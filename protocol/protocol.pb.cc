// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace spaceless {
namespace protocol {
class ReqRegisterUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqRegisterUser> {
} _ReqRegisterUser_default_instance_;
class UserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<User> {
} _User_default_instance_;
class RspRegisterUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspRegisterUser> {
} _RspRegisterUser_default_instance_;
class ReqLoginUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqLoginUser> {
} _ReqLoginUser_default_instance_;
class RspLoginUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspLoginUser> {
} _RspLoginUser_default_instance_;
class ReqRemoveUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqRemoveUser> {
} _ReqRemoveUser_default_instance_;
class RspRemoveUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspRemoveUser> {
} _RspRemoveUser_default_instance_;
class ReqFindUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqFindUser> {
} _ReqFindUser_default_instance_;
class RspFindUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspFindUser> {
} _RspFindUser_default_instance_;

namespace protobuf_protocol_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegisterUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegisterUser, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegisterUser, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, group_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegisterUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegisterUser, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegisterUser, user_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUser, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUser, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLoginUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLoginUser, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRemoveUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRemoveUser, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRemoveUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRemoveUser, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFindUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFindUser, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFindUser, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspFindUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspFindUser, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspFindUser, user_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ReqRegisterUser)},
  { 6, -1, sizeof(User)},
  { 13, -1, sizeof(RspRegisterUser)},
  { 19, -1, sizeof(ReqLoginUser)},
  { 25, -1, sizeof(RspLoginUser)},
  { 30, -1, sizeof(ReqRemoveUser)},
  { 35, -1, sizeof(RspRemoveUser)},
  { 40, -1, sizeof(ReqFindUser)},
  { 46, -1, sizeof(RspFindUser)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqRegisterUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspRegisterUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqLoginUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspLoginUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqRemoveUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspRemoveUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqFindUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspFindUser_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protocol.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace

void TableStruct::Shutdown() {
  _ReqRegisterUser_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _User_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RspRegisterUser_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ReqLoginUser_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _RspLoginUser_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ReqRemoveUser_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _RspRemoveUser_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ReqFindUser_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _RspFindUser_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ReqRegisterUser_default_instance_.DefaultConstruct();
  _User_default_instance_.DefaultConstruct();
  _RspRegisterUser_default_instance_.DefaultConstruct();
  _ReqLoginUser_default_instance_.DefaultConstruct();
  _RspLoginUser_default_instance_.DefaultConstruct();
  _ReqRemoveUser_default_instance_.DefaultConstruct();
  _RspRemoveUser_default_instance_.DefaultConstruct();
  _ReqFindUser_default_instance_.DefaultConstruct();
  _RspFindUser_default_instance_.DefaultConstruct();
  _RspRegisterUser_default_instance_.get_mutable()->user_ = const_cast< ::spaceless::protocol::User*>(
      ::spaceless::protocol::User::internal_default_instance());
  _RspFindUser_default_instance_.get_mutable()->user_ = const_cast< ::spaceless::protocol::User*>(
      ::spaceless::protocol::User::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016protocol.proto\022\022spaceless.protocol\"5\n\017"
      "ReqRegisterUser\022\020\n\010username\030\001 \001(\t\022\020\n\010pas"
      "sword\030\002 \001(\t\"9\n\004User\022\013\n\003uid\030\001 \001(\005\022\020\n\010user"
      "name\030\002 \001(\t\022\022\n\ngroup_list\030\003 \003(\005\"I\n\017RspReg"
      "isterUser\022\016\n\006result\030\001 \001(\005\022&\n\004user\030\002 \001(\0132"
      "\030.spaceless.protocol.User\"-\n\014ReqLoginUse"
      "r\022\013\n\003uid\030\001 \001(\005\022\020\n\010password\030\002 \001(\t\"\036\n\014RspL"
      "oginUser\022\016\n\006result\030\001 \001(\010\"\034\n\rReqRemoveUse"
      "r\022\013\n\003uid\030\001 \001(\005\"\037\n\rRspRemoveUser\022\016\n\006resul"
      "t\030\001 \001(\010\",\n\013ReqFindUser\022\013\n\003uid\030\001 \001(\005\022\020\n\010u"
      "sername\030\002 \001(\t\"E\n\013RspFindUser\022\016\n\006result\030\001"
      " \001(\005\022&\n\004user\030\002 \001(\0132\030.spaceless.protocol."
      "User*\310\001\n\013CommandType\022\023\n\017INVALID_COMMAND\020"
      "\000\022\025\n\021REQ_REGISTER_USER\020\001\022\025\n\021RSP_REGISTER"
      "_USER\020\002\022\022\n\016REQ_LOGIN_USER\020\003\022\022\n\016RSP_LOGIN"
      "_USER\020\004\022\023\n\017REQ_REMOVE_USER\020\005\022\023\n\017RSP_REMO"
      "VE_USER\020\006\022\021\n\rREQ_FIND_USER\020\007\022\021\n\rRSP_FIND"
      "_USER\020\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 695);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_protocol_2eproto

const ::google::protobuf::EnumDescriptor* CommandType_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[0];
}
bool CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRegisterUser::kUsernameFieldNumber;
const int ReqRegisterUser::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRegisterUser::ReqRegisterUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqRegisterUser)
}
ReqRegisterUser::ReqRegisterUser(const ReqRegisterUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqRegisterUser)
}

void ReqRegisterUser::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReqRegisterUser::~ReqRegisterUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqRegisterUser)
  SharedDtor();
}

void ReqRegisterUser::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqRegisterUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRegisterUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[0].descriptor;
}

const ReqRegisterUser& ReqRegisterUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqRegisterUser* ReqRegisterUser::New(::google::protobuf::Arena* arena) const {
  ReqRegisterUser* n = new ReqRegisterUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRegisterUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqRegisterUser)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReqRegisterUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqRegisterUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.ReqRegisterUser.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.ReqRegisterUser.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqRegisterUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqRegisterUser)
  return false;
#undef DO_
}

void ReqRegisterUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqRegisterUser)
  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqRegisterUser.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqRegisterUser.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqRegisterUser)
}

::google::protobuf::uint8* ReqRegisterUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqRegisterUser)
  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqRegisterUser.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqRegisterUser.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqRegisterUser)
  return target;
}

size_t ReqRegisterUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqRegisterUser)
  size_t total_size = 0;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRegisterUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqRegisterUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRegisterUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRegisterUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqRegisterUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqRegisterUser)
    MergeFrom(*source);
  }
}

void ReqRegisterUser::MergeFrom(const ReqRegisterUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqRegisterUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void ReqRegisterUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqRegisterUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRegisterUser::CopyFrom(const ReqRegisterUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqRegisterUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRegisterUser::IsInitialized() const {
  return true;
}

void ReqRegisterUser::Swap(ReqRegisterUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRegisterUser::InternalSwap(ReqRegisterUser* other) {
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRegisterUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRegisterUser

// string username = 1;
void ReqRegisterUser::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqRegisterUser::username() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRegisterUser.username)
  return username_.GetNoArena();
}
void ReqRegisterUser::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRegisterUser.username)
}
#if LANG_CXX11
void ReqRegisterUser::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqRegisterUser.username)
}
#endif
void ReqRegisterUser::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqRegisterUser.username)
}
void ReqRegisterUser::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqRegisterUser.username)
}
::std::string* ReqRegisterUser::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqRegisterUser.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqRegisterUser::release_username() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqRegisterUser.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqRegisterUser::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqRegisterUser.username)
}

// string password = 2;
void ReqRegisterUser::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqRegisterUser::password() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRegisterUser.password)
  return password_.GetNoArena();
}
void ReqRegisterUser::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRegisterUser.password)
}
#if LANG_CXX11
void ReqRegisterUser::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqRegisterUser.password)
}
#endif
void ReqRegisterUser::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqRegisterUser.password)
}
void ReqRegisterUser::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqRegisterUser.password)
}
::std::string* ReqRegisterUser::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqRegisterUser.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqRegisterUser::release_password() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqRegisterUser.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqRegisterUser::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqRegisterUser.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kUidFieldNumber;
const int User::kUsernameFieldNumber;
const int User::kGroupListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.User)
}
User::User(const User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      group_list_(from.group_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.User)
}

void User::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
  _cached_size_ = 0;
}

User::~User() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.User)
  SharedDtor();
}

void User::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[1].descriptor;
}

const User& User::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

User* User::New(::google::protobuf::Arena* arena) const {
  User* n = new User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.User)
  group_list_.Clear();
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 uid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.User.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 group_list = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_group_list())));
        } else if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_group_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.User)
  // int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.User.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // repeated int32 group_list = 3;
  if (this->group_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_group_list_cached_byte_size_);
  }
  for (int i = 0; i < this->group_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->group_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.User)
  // int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.User.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // repeated int32 group_list = 3;
  if (this->group_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _group_list_cached_byte_size_, target);
  }
  for (int i = 0; i < this->group_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->group_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.User)
  size_t total_size = 0;

  // repeated int32 group_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->group_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _group_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_list_.MergeFrom(from.group_list_);
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  group_list_.UnsafeArenaSwap(&other->group_list_);
  username_.Swap(&other->username_);
  std::swap(uid_, other->uid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// User

// int32 uid = 1;
void User::clear_uid() {
  uid_ = 0;
}
::google::protobuf::int32 User::uid() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.User.uid)
  return uid_;
}
void User::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.User.uid)
}

// string username = 2;
void User::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::username() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.User.username)
  return username_.GetNoArena();
}
void User::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.User.username)
}
#if LANG_CXX11
void User::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.User.username)
}
#endif
void User::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.User.username)
}
void User::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.User.username)
}
::std::string* User::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.User.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_username() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.User.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.User.username)
}

// repeated int32 group_list = 3;
int User::group_list_size() const {
  return group_list_.size();
}
void User::clear_group_list() {
  group_list_.Clear();
}
::google::protobuf::int32 User::group_list(int index) const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.User.group_list)
  return group_list_.Get(index);
}
void User::set_group_list(int index, ::google::protobuf::int32 value) {
  group_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.User.group_list)
}
void User::add_group_list(::google::protobuf::int32 value) {
  group_list_.Add(value);
  // @@protoc_insertion_point(field_add:spaceless.protocol.User.group_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
User::group_list() const {
  // @@protoc_insertion_point(field_list:spaceless.protocol.User.group_list)
  return group_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
User::mutable_group_list() {
  // @@protoc_insertion_point(field_mutable_list:spaceless.protocol.User.group_list)
  return &group_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspRegisterUser::kResultFieldNumber;
const int RspRegisterUser::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspRegisterUser::RspRegisterUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspRegisterUser)
}
RspRegisterUser::RspRegisterUser(const RspRegisterUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::spaceless::protocol::User(*from.user_);
  } else {
    user_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspRegisterUser)
}

void RspRegisterUser::SharedCtor() {
  ::memset(&user_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&user_) + sizeof(result_));
  _cached_size_ = 0;
}

RspRegisterUser::~RspRegisterUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspRegisterUser)
  SharedDtor();
}

void RspRegisterUser::SharedDtor() {
  if (this != internal_default_instance()) {
    delete user_;
  }
}

void RspRegisterUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspRegisterUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[2].descriptor;
}

const RspRegisterUser& RspRegisterUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspRegisterUser* RspRegisterUser::New(::google::protobuf::Arena* arena) const {
  RspRegisterUser* n = new RspRegisterUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspRegisterUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspRegisterUser)
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
  result_ = 0;
}

bool RspRegisterUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspRegisterUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spaceless.protocol.User user = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspRegisterUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspRegisterUser)
  return false;
#undef DO_
}

void RspRegisterUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspRegisterUser)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // .spaceless.protocol.User user = 2;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->user_, output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspRegisterUser)
}

::google::protobuf::uint8* RspRegisterUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspRegisterUser)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // .spaceless.protocol.User user = 2;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->user_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspRegisterUser)
  return target;
}

size_t RspRegisterUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspRegisterUser)
  size_t total_size = 0;

  // .spaceless.protocol.User user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspRegisterUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspRegisterUser)
  GOOGLE_DCHECK_NE(&from, this);
  const RspRegisterUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspRegisterUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspRegisterUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspRegisterUser)
    MergeFrom(*source);
  }
}

void RspRegisterUser::MergeFrom(const RspRegisterUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspRegisterUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    mutable_user()->::spaceless::protocol::User::MergeFrom(from.user());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspRegisterUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspRegisterUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspRegisterUser::CopyFrom(const RspRegisterUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspRegisterUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspRegisterUser::IsInitialized() const {
  return true;
}

void RspRegisterUser::Swap(RspRegisterUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspRegisterUser::InternalSwap(RspRegisterUser* other) {
  std::swap(user_, other->user_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspRegisterUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspRegisterUser

// int32 result = 1;
void RspRegisterUser::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspRegisterUser::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRegisterUser.result)
  return result_;
}
void RspRegisterUser::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspRegisterUser.result)
}

// .spaceless.protocol.User user = 2;
bool RspRegisterUser::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
void RspRegisterUser::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::spaceless::protocol::User& RspRegisterUser::user() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRegisterUser.user)
  return user_ != NULL ? *user_
                         : *::spaceless::protocol::User::internal_default_instance();
}
::spaceless::protocol::User* RspRegisterUser::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::spaceless::protocol::User;
  }
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.RspRegisterUser.user)
  return user_;
}
::spaceless::protocol::User* RspRegisterUser::release_user() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.RspRegisterUser.user)
  
  ::spaceless::protocol::User* temp = user_;
  user_ = NULL;
  return temp;
}
void RspRegisterUser::set_allocated_user(::spaceless::protocol::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.RspRegisterUser.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqLoginUser::kUidFieldNumber;
const int ReqLoginUser::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLoginUser::ReqLoginUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqLoginUser)
}
ReqLoginUser::ReqLoginUser(const ReqLoginUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqLoginUser)
}

void ReqLoginUser::SharedCtor() {
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
  _cached_size_ = 0;
}

ReqLoginUser::~ReqLoginUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqLoginUser)
  SharedDtor();
}

void ReqLoginUser::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqLoginUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLoginUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[3].descriptor;
}

const ReqLoginUser& ReqLoginUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqLoginUser* ReqLoginUser::New(::google::protobuf::Arena* arena) const {
  ReqLoginUser* n = new ReqLoginUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqLoginUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqLoginUser)
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
}

bool ReqLoginUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqLoginUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 uid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.ReqLoginUser.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqLoginUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqLoginUser)
  return false;
#undef DO_
}

void ReqLoginUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqLoginUser)
  // int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqLoginUser.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqLoginUser)
}

::google::protobuf::uint8* ReqLoginUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqLoginUser)
  // int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqLoginUser.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqLoginUser)
  return target;
}

size_t ReqLoginUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqLoginUser)
  size_t total_size = 0;

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLoginUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqLoginUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLoginUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLoginUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqLoginUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqLoginUser)
    MergeFrom(*source);
  }
}

void ReqLoginUser::MergeFrom(const ReqLoginUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqLoginUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void ReqLoginUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqLoginUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLoginUser::CopyFrom(const ReqLoginUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqLoginUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLoginUser::IsInitialized() const {
  return true;
}

void ReqLoginUser::Swap(ReqLoginUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLoginUser::InternalSwap(ReqLoginUser* other) {
  password_.Swap(&other->password_);
  std::swap(uid_, other->uid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqLoginUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqLoginUser

// int32 uid = 1;
void ReqLoginUser::clear_uid() {
  uid_ = 0;
}
::google::protobuf::int32 ReqLoginUser::uid() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqLoginUser.uid)
  return uid_;
}
void ReqLoginUser::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqLoginUser.uid)
}

// string password = 2;
void ReqLoginUser::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqLoginUser::password() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqLoginUser.password)
  return password_.GetNoArena();
}
void ReqLoginUser::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqLoginUser.password)
}
#if LANG_CXX11
void ReqLoginUser::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqLoginUser.password)
}
#endif
void ReqLoginUser::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqLoginUser.password)
}
void ReqLoginUser::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqLoginUser.password)
}
::std::string* ReqLoginUser::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqLoginUser.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqLoginUser::release_password() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqLoginUser.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqLoginUser::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqLoginUser.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspLoginUser::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspLoginUser::RspLoginUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspLoginUser)
}
RspLoginUser::RspLoginUser(const RspLoginUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspLoginUser)
}

void RspLoginUser::SharedCtor() {
  result_ = false;
  _cached_size_ = 0;
}

RspLoginUser::~RspLoginUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspLoginUser)
  SharedDtor();
}

void RspLoginUser::SharedDtor() {
}

void RspLoginUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspLoginUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[4].descriptor;
}

const RspLoginUser& RspLoginUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspLoginUser* RspLoginUser::New(::google::protobuf::Arena* arena) const {
  RspLoginUser* n = new RspLoginUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspLoginUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspLoginUser)
  result_ = false;
}

bool RspLoginUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspLoginUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspLoginUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspLoginUser)
  return false;
#undef DO_
}

void RspLoginUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspLoginUser)
  // bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspLoginUser)
}

::google::protobuf::uint8* RspLoginUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspLoginUser)
  // bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspLoginUser)
  return target;
}

size_t RspLoginUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspLoginUser)
  size_t total_size = 0;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspLoginUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspLoginUser)
  GOOGLE_DCHECK_NE(&from, this);
  const RspLoginUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspLoginUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspLoginUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspLoginUser)
    MergeFrom(*source);
  }
}

void RspLoginUser::MergeFrom(const RspLoginUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspLoginUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspLoginUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspLoginUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspLoginUser::CopyFrom(const RspLoginUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspLoginUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspLoginUser::IsInitialized() const {
  return true;
}

void RspLoginUser::Swap(RspLoginUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspLoginUser::InternalSwap(RspLoginUser* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspLoginUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspLoginUser

// bool result = 1;
void RspLoginUser::clear_result() {
  result_ = false;
}
bool RspLoginUser::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspLoginUser.result)
  return result_;
}
void RspLoginUser::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspLoginUser.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRemoveUser::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRemoveUser::ReqRemoveUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqRemoveUser)
}
ReqRemoveUser::ReqRemoveUser(const ReqRemoveUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqRemoveUser)
}

void ReqRemoveUser::SharedCtor() {
  uid_ = 0;
  _cached_size_ = 0;
}

ReqRemoveUser::~ReqRemoveUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqRemoveUser)
  SharedDtor();
}

void ReqRemoveUser::SharedDtor() {
}

void ReqRemoveUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRemoveUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[5].descriptor;
}

const ReqRemoveUser& ReqRemoveUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqRemoveUser* ReqRemoveUser::New(::google::protobuf::Arena* arena) const {
  ReqRemoveUser* n = new ReqRemoveUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRemoveUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqRemoveUser)
  uid_ = 0;
}

bool ReqRemoveUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqRemoveUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 uid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqRemoveUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqRemoveUser)
  return false;
#undef DO_
}

void ReqRemoveUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqRemoveUser)
  // int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqRemoveUser)
}

::google::protobuf::uint8* ReqRemoveUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqRemoveUser)
  // int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqRemoveUser)
  return target;
}

size_t ReqRemoveUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqRemoveUser)
  size_t total_size = 0;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRemoveUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqRemoveUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRemoveUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRemoveUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqRemoveUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqRemoveUser)
    MergeFrom(*source);
  }
}

void ReqRemoveUser::MergeFrom(const ReqRemoveUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqRemoveUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void ReqRemoveUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqRemoveUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRemoveUser::CopyFrom(const ReqRemoveUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqRemoveUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRemoveUser::IsInitialized() const {
  return true;
}

void ReqRemoveUser::Swap(ReqRemoveUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRemoveUser::InternalSwap(ReqRemoveUser* other) {
  std::swap(uid_, other->uid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRemoveUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRemoveUser

// int32 uid = 1;
void ReqRemoveUser::clear_uid() {
  uid_ = 0;
}
::google::protobuf::int32 ReqRemoveUser::uid() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRemoveUser.uid)
  return uid_;
}
void ReqRemoveUser::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRemoveUser.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspRemoveUser::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspRemoveUser::RspRemoveUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspRemoveUser)
}
RspRemoveUser::RspRemoveUser(const RspRemoveUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspRemoveUser)
}

void RspRemoveUser::SharedCtor() {
  result_ = false;
  _cached_size_ = 0;
}

RspRemoveUser::~RspRemoveUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspRemoveUser)
  SharedDtor();
}

void RspRemoveUser::SharedDtor() {
}

void RspRemoveUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspRemoveUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[6].descriptor;
}

const RspRemoveUser& RspRemoveUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspRemoveUser* RspRemoveUser::New(::google::protobuf::Arena* arena) const {
  RspRemoveUser* n = new RspRemoveUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspRemoveUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspRemoveUser)
  result_ = false;
}

bool RspRemoveUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspRemoveUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspRemoveUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspRemoveUser)
  return false;
#undef DO_
}

void RspRemoveUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspRemoveUser)
  // bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspRemoveUser)
}

::google::protobuf::uint8* RspRemoveUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspRemoveUser)
  // bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspRemoveUser)
  return target;
}

size_t RspRemoveUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspRemoveUser)
  size_t total_size = 0;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspRemoveUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspRemoveUser)
  GOOGLE_DCHECK_NE(&from, this);
  const RspRemoveUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspRemoveUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspRemoveUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspRemoveUser)
    MergeFrom(*source);
  }
}

void RspRemoveUser::MergeFrom(const RspRemoveUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspRemoveUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspRemoveUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspRemoveUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspRemoveUser::CopyFrom(const RspRemoveUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspRemoveUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspRemoveUser::IsInitialized() const {
  return true;
}

void RspRemoveUser::Swap(RspRemoveUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspRemoveUser::InternalSwap(RspRemoveUser* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspRemoveUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspRemoveUser

// bool result = 1;
void RspRemoveUser::clear_result() {
  result_ = false;
}
bool RspRemoveUser::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRemoveUser.result)
  return result_;
}
void RspRemoveUser::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspRemoveUser.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqFindUser::kUidFieldNumber;
const int ReqFindUser::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqFindUser::ReqFindUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqFindUser)
}
ReqFindUser::ReqFindUser(const ReqFindUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqFindUser)
}

void ReqFindUser::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
  _cached_size_ = 0;
}

ReqFindUser::~ReqFindUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqFindUser)
  SharedDtor();
}

void ReqFindUser::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqFindUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqFindUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[7].descriptor;
}

const ReqFindUser& ReqFindUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqFindUser* ReqFindUser::New(::google::protobuf::Arena* arena) const {
  ReqFindUser* n = new ReqFindUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqFindUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqFindUser)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
}

bool ReqFindUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqFindUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 uid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.ReqFindUser.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqFindUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqFindUser)
  return false;
#undef DO_
}

void ReqFindUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqFindUser)
  // int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqFindUser.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqFindUser)
}

::google::protobuf::uint8* ReqFindUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqFindUser)
  // int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqFindUser.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqFindUser)
  return target;
}

size_t ReqFindUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqFindUser)
  size_t total_size = 0;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqFindUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqFindUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqFindUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqFindUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqFindUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqFindUser)
    MergeFrom(*source);
  }
}

void ReqFindUser::MergeFrom(const ReqFindUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqFindUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void ReqFindUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqFindUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqFindUser::CopyFrom(const ReqFindUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqFindUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFindUser::IsInitialized() const {
  return true;
}

void ReqFindUser::Swap(ReqFindUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqFindUser::InternalSwap(ReqFindUser* other) {
  username_.Swap(&other->username_);
  std::swap(uid_, other->uid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqFindUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqFindUser

// int32 uid = 1;
void ReqFindUser::clear_uid() {
  uid_ = 0;
}
::google::protobuf::int32 ReqFindUser::uid() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqFindUser.uid)
  return uid_;
}
void ReqFindUser::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqFindUser.uid)
}

// string username = 2;
void ReqFindUser::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqFindUser::username() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqFindUser.username)
  return username_.GetNoArena();
}
void ReqFindUser::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqFindUser.username)
}
#if LANG_CXX11
void ReqFindUser::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqFindUser.username)
}
#endif
void ReqFindUser::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqFindUser.username)
}
void ReqFindUser::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqFindUser.username)
}
::std::string* ReqFindUser::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqFindUser.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqFindUser::release_username() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqFindUser.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqFindUser::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqFindUser.username)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspFindUser::kResultFieldNumber;
const int RspFindUser::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspFindUser::RspFindUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspFindUser)
}
RspFindUser::RspFindUser(const RspFindUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::spaceless::protocol::User(*from.user_);
  } else {
    user_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspFindUser)
}

void RspFindUser::SharedCtor() {
  ::memset(&user_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&user_) + sizeof(result_));
  _cached_size_ = 0;
}

RspFindUser::~RspFindUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspFindUser)
  SharedDtor();
}

void RspFindUser::SharedDtor() {
  if (this != internal_default_instance()) {
    delete user_;
  }
}

void RspFindUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspFindUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[8].descriptor;
}

const RspFindUser& RspFindUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspFindUser* RspFindUser::New(::google::protobuf::Arena* arena) const {
  RspFindUser* n = new RspFindUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspFindUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspFindUser)
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
  result_ = 0;
}

bool RspFindUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspFindUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spaceless.protocol.User user = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspFindUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspFindUser)
  return false;
#undef DO_
}

void RspFindUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspFindUser)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // .spaceless.protocol.User user = 2;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->user_, output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspFindUser)
}

::google::protobuf::uint8* RspFindUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspFindUser)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // .spaceless.protocol.User user = 2;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->user_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspFindUser)
  return target;
}

size_t RspFindUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspFindUser)
  size_t total_size = 0;

  // .spaceless.protocol.User user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspFindUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspFindUser)
  GOOGLE_DCHECK_NE(&from, this);
  const RspFindUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspFindUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspFindUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspFindUser)
    MergeFrom(*source);
  }
}

void RspFindUser::MergeFrom(const RspFindUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspFindUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    mutable_user()->::spaceless::protocol::User::MergeFrom(from.user());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspFindUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspFindUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspFindUser::CopyFrom(const RspFindUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspFindUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspFindUser::IsInitialized() const {
  return true;
}

void RspFindUser::Swap(RspFindUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspFindUser::InternalSwap(RspFindUser* other) {
  std::swap(user_, other->user_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspFindUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspFindUser

// int32 result = 1;
void RspFindUser::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspFindUser::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspFindUser.result)
  return result_;
}
void RspFindUser::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspFindUser.result)
}

// .spaceless.protocol.User user = 2;
bool RspFindUser::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
void RspFindUser::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::spaceless::protocol::User& RspFindUser::user() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspFindUser.user)
  return user_ != NULL ? *user_
                         : *::spaceless::protocol::User::internal_default_instance();
}
::spaceless::protocol::User* RspFindUser::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::spaceless::protocol::User;
  }
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.RspFindUser.user)
  return user_;
}
::spaceless::protocol::User* RspFindUser::release_user() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.RspFindUser.user)
  
  ::spaceless::protocol::User* temp = user_;
  user_ = NULL;
  return temp;
}
void RspFindUser::set_allocated_user(::spaceless::protocol::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.RspFindUser.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace spaceless

// @@protoc_insertion_point(global_scope)
