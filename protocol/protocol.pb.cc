// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace spaceless {
namespace protocol {
class RspErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspError> {
} _RspError_default_instance_;
class UserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<User> {
} _User_default_instance_;
class ReqRegisterUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqRegisterUser> {
} _ReqRegisterUser_default_instance_;
class RspRegisterUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspRegisterUser> {
} _RspRegisterUser_default_instance_;
class ReqLoginUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqLoginUser> {
} _ReqLoginUser_default_instance_;
class RspLoginUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspLoginUser> {
} _RspLoginUser_default_instance_;
class ReqRemoveUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqRemoveUser> {
} _ReqRemoveUser_default_instance_;
class RspRemoveUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspRemoveUser> {
} _RspRemoveUser_default_instance_;
class ReqFindUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqFindUser> {
} _ReqFindUser_default_instance_;
class RspFindUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspFindUser> {
} _RspFindUser_default_instance_;
class SharingGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SharingGroup> {
} _SharingGroup_default_instance_;
class ReqRegisterGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqRegisterGroup> {
} _ReqRegisterGroup_default_instance_;
class RspRegisterGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspRegisterGroup> {
} _RspRegisterGroup_default_instance_;
class ReqRemoveGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqRemoveGroup> {
} _ReqRemoveGroup_default_instance_;
class RspRemoveGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspRemoveGroup> {
} _RspRemoveGroup_default_instance_;
class ReqFindGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqFindGroup> {
} _ReqFindGroup_default_instance_;
class RspFindGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspFindGroup> {
} _RspFindGroup_default_instance_;
class ReqJoinGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqJoinGroup> {
} _ReqJoinGroup_default_instance_;
class RspJoinGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspJoinGroup> {
} _RspJoinGroup_default_instance_;
class ReqAssignAsManagerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqAssignAsManager> {
} _ReqAssignAsManager_default_instance_;
class RspAssignAsManagerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspAssignAsManager> {
} _RspAssignAsManager_default_instance_;
class ReqAssignAsMemeberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqAssignAsMemeber> {
} _ReqAssignAsMemeber_default_instance_;
class RspAssignAsMemeberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspAssignAsMemeber> {
} _RspAssignAsMemeber_default_instance_;
class ReqKickOutUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqKickOutUser> {
} _ReqKickOutUser_default_instance_;
class RspKickOutUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspKickOutUser> {
} _RspKickOutUser_default_instance_;
class FileFragmentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileFragment> {
} _FileFragment_default_instance_;
class ReqPutFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqPutFile> {
} _ReqPutFile_default_instance_;
class RspPutFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspPutFile> {
} _RspPutFile_default_instance_;
class ReqGetFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqGetFile> {
} _ReqGetFile_default_instance_;
class RspGetFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspGetFile> {
} _RspGetFile_default_instance_;
class ReqCreatePathDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqCreatePath> {
} _ReqCreatePath_default_instance_;
class RspCreatePathDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspCreatePath> {
} _RspCreatePath_default_instance_;
class ReqRemovePathDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqRemovePath> {
} _ReqRemovePath_default_instance_;
class RspRemovePathDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspRemovePath> {
} _RspRemovePath_default_instance_;

namespace protobuf_protocol_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[34];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspError, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, group_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegisterUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegisterUser, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegisterUser, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegisterUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegisterUser, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegisterUser, user_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUser, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginUser, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLoginUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLoginUser, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRemoveUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRemoveUser, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRemoveUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRemoveUser, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFindUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFindUser, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFindUser, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspFindUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspFindUser, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspFindUser, user_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharingGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharingGroup, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharingGroup, group_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharingGroup, owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharingGroup, root_dir_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharingGroup, manager_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharingGroup, member_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegisterGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegisterGroup, group_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegisterGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegisterGroup, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegisterGroup, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRemoveGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRemoveGroup, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRemoveGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRemoveGroup, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFindGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFindGroup, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFindGroup, group_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspFindGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspFindGroup, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspFindGroup, group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoinGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoinGroup, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspJoinGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspJoinGroup, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAssignAsManager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAssignAsManager, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAssignAsManager, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspAssignAsManager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspAssignAsManager, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAssignAsMemeber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAssignAsMemeber, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAssignAsMemeber, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspAssignAsMemeber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspAssignAsMemeber, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKickOutUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKickOutUser, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKickOutUser, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspKickOutUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspKickOutUser, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileFragment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileFragment, max_fragment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileFragment, fragment_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileFragment, fragment_content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPutFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPutFile, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPutFile, file_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPutFile, fragment_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPutFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPutFile, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetFile, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetFile, file_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetFile, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetFile, fragment_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreatePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreatePath, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreatePath, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCreatePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCreatePath, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRemovePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRemovePath, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRemovePath, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRemovePath, force_remove_all_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRemovePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRemovePath, result_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(RspError)},
  { 5, -1, sizeof(User)},
  { 12, -1, sizeof(ReqRegisterUser)},
  { 18, -1, sizeof(RspRegisterUser)},
  { 24, -1, sizeof(ReqLoginUser)},
  { 30, -1, sizeof(RspLoginUser)},
  { 35, -1, sizeof(ReqRemoveUser)},
  { 40, -1, sizeof(RspRemoveUser)},
  { 45, -1, sizeof(ReqFindUser)},
  { 51, -1, sizeof(RspFindUser)},
  { 57, -1, sizeof(SharingGroup)},
  { 67, -1, sizeof(ReqRegisterGroup)},
  { 72, -1, sizeof(RspRegisterGroup)},
  { 78, -1, sizeof(ReqRemoveGroup)},
  { 83, -1, sizeof(RspRemoveGroup)},
  { 88, -1, sizeof(ReqFindGroup)},
  { 94, -1, sizeof(RspFindGroup)},
  { 100, -1, sizeof(ReqJoinGroup)},
  { 105, -1, sizeof(RspJoinGroup)},
  { 110, -1, sizeof(ReqAssignAsManager)},
  { 116, -1, sizeof(RspAssignAsManager)},
  { 121, -1, sizeof(ReqAssignAsMemeber)},
  { 127, -1, sizeof(RspAssignAsMemeber)},
  { 132, -1, sizeof(ReqKickOutUser)},
  { 138, -1, sizeof(RspKickOutUser)},
  { 143, -1, sizeof(FileFragment)},
  { 150, -1, sizeof(ReqPutFile)},
  { 157, -1, sizeof(RspPutFile)},
  { 162, -1, sizeof(ReqGetFile)},
  { 168, -1, sizeof(RspGetFile)},
  { 174, -1, sizeof(ReqCreatePath)},
  { 180, -1, sizeof(RspCreatePath)},
  { 185, -1, sizeof(ReqRemovePath)},
  { 192, -1, sizeof(RspRemovePath)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqRegisterUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspRegisterUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqLoginUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspLoginUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqRemoveUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspRemoveUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqFindUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspFindUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SharingGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqRegisterGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspRegisterGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqRemoveGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspRemoveGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqFindGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspFindGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqJoinGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspJoinGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqAssignAsManager_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspAssignAsManager_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqAssignAsMemeber_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspAssignAsMemeber_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqKickOutUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspKickOutUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FileFragment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqPutFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspPutFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqGetFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspGetFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqCreatePath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspCreatePath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqRemovePath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspRemovePath_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protocol.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 34);
}

}  // namespace

void TableStruct::Shutdown() {
  _RspError_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _User_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ReqRegisterUser_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _RspRegisterUser_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ReqLoginUser_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _RspLoginUser_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ReqRemoveUser_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _RspRemoveUser_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ReqFindUser_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _RspFindUser_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SharingGroup_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ReqRegisterGroup_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _RspRegisterGroup_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ReqRemoveGroup_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _RspRemoveGroup_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _ReqFindGroup_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _RspFindGroup_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _ReqJoinGroup_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _RspJoinGroup_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _ReqAssignAsManager_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _RspAssignAsManager_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _ReqAssignAsMemeber_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _RspAssignAsMemeber_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _ReqKickOutUser_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _RspKickOutUser_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _FileFragment_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _ReqPutFile_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _RspPutFile_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _ReqGetFile_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _RspGetFile_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _ReqCreatePath_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _RspCreatePath_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _ReqRemovePath_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _RspRemovePath_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RspError_default_instance_.DefaultConstruct();
  _User_default_instance_.DefaultConstruct();
  _ReqRegisterUser_default_instance_.DefaultConstruct();
  _RspRegisterUser_default_instance_.DefaultConstruct();
  _ReqLoginUser_default_instance_.DefaultConstruct();
  _RspLoginUser_default_instance_.DefaultConstruct();
  _ReqRemoveUser_default_instance_.DefaultConstruct();
  _RspRemoveUser_default_instance_.DefaultConstruct();
  _ReqFindUser_default_instance_.DefaultConstruct();
  _RspFindUser_default_instance_.DefaultConstruct();
  _SharingGroup_default_instance_.DefaultConstruct();
  _ReqRegisterGroup_default_instance_.DefaultConstruct();
  _RspRegisterGroup_default_instance_.DefaultConstruct();
  _ReqRemoveGroup_default_instance_.DefaultConstruct();
  _RspRemoveGroup_default_instance_.DefaultConstruct();
  _ReqFindGroup_default_instance_.DefaultConstruct();
  _RspFindGroup_default_instance_.DefaultConstruct();
  _ReqJoinGroup_default_instance_.DefaultConstruct();
  _RspJoinGroup_default_instance_.DefaultConstruct();
  _ReqAssignAsManager_default_instance_.DefaultConstruct();
  _RspAssignAsManager_default_instance_.DefaultConstruct();
  _ReqAssignAsMemeber_default_instance_.DefaultConstruct();
  _RspAssignAsMemeber_default_instance_.DefaultConstruct();
  _ReqKickOutUser_default_instance_.DefaultConstruct();
  _RspKickOutUser_default_instance_.DefaultConstruct();
  _FileFragment_default_instance_.DefaultConstruct();
  _ReqPutFile_default_instance_.DefaultConstruct();
  _RspPutFile_default_instance_.DefaultConstruct();
  _ReqGetFile_default_instance_.DefaultConstruct();
  _RspGetFile_default_instance_.DefaultConstruct();
  _ReqCreatePath_default_instance_.DefaultConstruct();
  _RspCreatePath_default_instance_.DefaultConstruct();
  _ReqRemovePath_default_instance_.DefaultConstruct();
  _RspRemovePath_default_instance_.DefaultConstruct();
  _RspRegisterUser_default_instance_.get_mutable()->user_ = const_cast< ::spaceless::protocol::User*>(
      ::spaceless::protocol::User::internal_default_instance());
  _RspFindUser_default_instance_.get_mutable()->user_ = const_cast< ::spaceless::protocol::User*>(
      ::spaceless::protocol::User::internal_default_instance());
  _RspFindGroup_default_instance_.get_mutable()->group_ = const_cast< ::spaceless::protocol::SharingGroup*>(
      ::spaceless::protocol::SharingGroup::internal_default_instance());
  _ReqPutFile_default_instance_.get_mutable()->fragment_ = const_cast< ::spaceless::protocol::FileFragment*>(
      ::spaceless::protocol::FileFragment::internal_default_instance());
  _RspGetFile_default_instance_.get_mutable()->fragment_ = const_cast< ::spaceless::protocol::FileFragment*>(
      ::spaceless::protocol::FileFragment::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016protocol.proto\022\022spaceless.protocol\"\032\n\010"
      "RspError\022\016\n\006result\030\001 \001(\005\">\n\004User\022\017\n\007user"
      "_id\030\001 \001(\005\022\021\n\tuser_name\030\002 \001(\t\022\022\n\ngroup_li"
      "st\030\003 \003(\005\"5\n\017ReqRegisterUser\022\020\n\010username\030"
      "\001 \001(\t\022\020\n\010password\030\002 \001(\t\"I\n\017RspRegisterUs"
      "er\022\016\n\006result\030\001 \001(\005\022&\n\004user\030\002 \001(\0132\030.space"
      "less.protocol.User\"1\n\014ReqLoginUser\022\017\n\007us"
      "er_id\030\001 \001(\005\022\020\n\010password\030\002 \001(\t\"\036\n\014RspLogi"
      "nUser\022\016\n\006result\030\001 \001(\005\" \n\rReqRemoveUser\022\017"
      "\n\007user_id\030\001 \001(\005\"\037\n\rRspRemoveUser\022\016\n\006resu"
      "lt\030\001 \001(\005\"0\n\013ReqFindUser\022\017\n\007user_id\030\001 \001(\005"
      "\022\020\n\010username\030\002 \001(\t\"E\n\013RspFindUser\022\016\n\006res"
      "ult\030\001 \001(\005\022&\n\004user\030\002 \001(\0132\030.spaceless.prot"
      "ocol.User\"\206\001\n\014SharingGroup\022\020\n\010group_id\030\001"
      " \001(\005\022\022\n\ngroup_name\030\002 \001(\t\022\020\n\010owner_id\030\003 \001"
      "(\005\022\023\n\013root_dir_id\030\004 \001(\005\022\024\n\014manager_list\030"
      "\005 \003(\005\022\023\n\013member_list\030\006 \003(\005\"&\n\020ReqRegiste"
      "rGroup\022\022\n\ngroup_name\030\001 \001(\t\"4\n\020RspRegiste"
      "rGroup\022\016\n\006result\030\001 \001(\005\022\020\n\010group_id\030\002 \001(\005"
      "\"\"\n\016ReqRemoveGroup\022\020\n\010group_id\030\001 \001(\005\" \n\016"
      "RspRemoveGroup\022\016\n\006result\030\001 \001(\010\"4\n\014ReqFin"
      "dGroup\022\020\n\010group_id\030\001 \001(\005\022\022\n\ngroup_name\030\002"
      " \001(\t\"O\n\014RspFindGroup\022\016\n\006result\030\001 \001(\005\022/\n\005"
      "group\030\002 \001(\0132 .spaceless.protocol.Sharing"
      "Group\" \n\014ReqJoinGroup\022\020\n\010group_id\030\001 \001(\005\""
      "\036\n\014RspJoinGroup\022\016\n\006result\030\001 \001(\005\"7\n\022ReqAs"
      "signAsManager\022\020\n\010group_id\030\001 \001(\005\022\017\n\007user_"
      "id\030\002 \001(\005\"$\n\022RspAssignAsManager\022\016\n\006result"
      "\030\001 \001(\005\"7\n\022ReqAssignAsMemeber\022\020\n\010group_id"
      "\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\005\"$\n\022RspAssignAsMe"
      "meber\022\016\n\006result\030\001 \001(\005\"3\n\016ReqKickOutUser\022"
      "\020\n\010group_id\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\005\" \n\016Rs"
      "pKickOutUser\022\016\n\006result\030\001 \001(\005\"V\n\014FileFrag"
      "ment\022\024\n\014max_fragment\030\001 \001(\005\022\026\n\016fragment_i"
      "ndex\030\002 \001(\005\022\030\n\020fragment_content\030\003 \001(\014\"e\n\n"
      "ReqPutFile\022\020\n\010group_id\030\001 \001(\005\022\021\n\tfile_pat"
      "h\030\002 \001(\t\0222\n\010fragment\030\003 \001(\0132 .spaceless.pr"
      "otocol.FileFragment\"\034\n\nRspPutFile\022\016\n\006res"
      "ult\030\001 \001(\005\"1\n\nReqGetFile\022\020\n\010group_id\030\001 \001("
      "\005\022\021\n\tfile_path\030\002 \001(\t\"P\n\nRspGetFile\022\016\n\006re"
      "sult\030\001 \001(\005\0222\n\010fragment\030\002 \001(\0132 .spaceless"
      ".protocol.FileFragment\"/\n\rReqCreatePath\022"
      "\020\n\010group_id\030\001 \001(\005\022\014\n\004path\030\002 \001(\t\"\037\n\rRspCr"
      "eatePath\022\016\n\006result\030\001 \001(\005\"I\n\rReqRemovePat"
      "h\022\020\n\010group_id\030\001 \001(\005\022\014\n\004path\030\002 \001(\t\022\030\n\020for"
      "ce_remove_all\030\003 \001(\010\"\037\n\rRspRemovePath\022\016\n\006"
      "result\030\001 \001(\005*\310\005\n\013CommandType\022\023\n\017INVALID_"
      "COMMAND\020\000\022\026\n\021REQ_REGISTER_USER\020\350\007\022\026\n\021RSP"
      "_REGISTER_USER\020\352\007\022\023\n\016REQ_LOGIN_USER\020\353\007\022\023"
      "\n\016RSP_LOGIN_USER\020\354\007\022\024\n\017REQ_REMOVE_USER\020\355"
      "\007\022\024\n\017RSP_REMOVE_USER\020\356\007\022\022\n\rREQ_FIND_USER"
      "\020\357\007\022\022\n\rRSP_FIND_USER\020\360\007\022\027\n\022REQ_REGISTER_"
      "GROUP\020\325\010\022\027\n\022RSP_REGISTER_GROUP\020\326\010\022\025\n\020REQ"
      "_REMOVE_GROUP\020\327\010\022\025\n\020RSP_REMOVE_GROUP\020\330\010\022"
      "\023\n\016REQ_FIND_GROUP\020\331\010\022\023\n\016RSP_FIND_GROUP\020\332"
      "\010\022\023\n\016REQ_JOIN_GROUP\020\333\010\022\023\n\016RSP_JOIN_GROUP"
      "\020\334\010\022\032\n\025REQ_ASSIGN_AS_MANAGER\020\335\010\022\032\n\025RSP_A"
      "SSIGN_AS_MANAGER\020\336\010\022\032\n\025REQ_ASSIGN_AS_MEM"
      "EBER\020\337\010\022\032\n\025RSP_ASSIGN_AS_MEMEBER\020\340\010\022\026\n\021R"
      "EQ_KICK_OUT_USER\020\341\010\022\026\n\021RSP_KICK_OUT_USER"
      "\020\342\010\022\021\n\014REQ_PUT_FILE\020\377\010\022\021\n\014RSP_PUT_FILE\020\200"
      "\t\022\021\n\014REQ_GET_FILE\020\201\t\022\021\n\014RSP_GET_FILE\020\202\t\022"
      "\024\n\017REQ_CREATE_PATH\020\203\t\022\024\n\017RSP_CREATE_PATH"
      "\020\204\t\022\024\n\017REQ_REMOVE_PATH\020\205\t\022\024\n\017RSP_REMOVE_"
      "PATH\020\206\t*N\n\021MiscellaneousType\022\031\n\025INVALID_"
      "MISCELLANEOUS\020\000\022\036\n\030MAX_FRAGMENT_CONTENT_"
      "LEN\020\320\206\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2655);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_protocol_2eproto

const ::google::protobuf::EnumDescriptor* CommandType_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[0];
}
bool CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1000:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1115:
    case 1116:
    case 1117:
    case 1118:
    case 1119:
    case 1120:
    case 1121:
    case 1122:
    case 1151:
    case 1152:
    case 1153:
    case 1154:
    case 1155:
    case 1156:
    case 1157:
    case 1158:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MiscellaneousType_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[1];
}
bool MiscellaneousType_IsValid(int value) {
  switch (value) {
    case 0:
    case 50000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspError::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspError::RspError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspError)
}
RspError::RspError(const RspError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspError)
}

void RspError::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

RspError::~RspError() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspError)
  SharedDtor();
}

void RspError::SharedDtor() {
}

void RspError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspError::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[0].descriptor;
}

const RspError& RspError::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspError* RspError::New(::google::protobuf::Arena* arena) const {
  RspError* n = new RspError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspError::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspError)
  result_ = 0;
}

bool RspError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspError)
  return false;
#undef DO_
}

void RspError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspError)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspError)
}

::google::protobuf::uint8* RspError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspError)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspError)
  return target;
}

size_t RspError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspError)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspError)
  GOOGLE_DCHECK_NE(&from, this);
  const RspError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspError)
    MergeFrom(*source);
  }
}

void RspError::MergeFrom(const RspError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspError::CopyFrom(const RspError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspError::IsInitialized() const {
  return true;
}

void RspError::Swap(RspError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspError::InternalSwap(RspError* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspError::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspError

// int32 result = 1;
void RspError::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspError::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspError.result)
  return result_;
}
void RspError::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspError.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kUserIdFieldNumber;
const int User::kUserNameFieldNumber;
const int User::kGroupListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.User)
}
User::User(const User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      group_list_(from.group_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.User)
}

void User::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
  _cached_size_ = 0;
}

User::~User() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.User)
  SharedDtor();
}

void User::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[1].descriptor;
}

const User& User::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

User* User::New(::google::protobuf::Arena* arena) const {
  User* n = new User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.User)
  group_list_.Clear();
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 user_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.User.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 group_list = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_group_list())));
        } else if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_group_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.User)
  // int32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.User.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  // repeated int32 group_list = 3;
  if (this->group_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_group_list_cached_byte_size_);
  }
  for (int i = 0; i < this->group_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->group_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.User)
  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.User.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // repeated int32 group_list = 3;
  if (this->group_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _group_list_cached_byte_size_, target);
  }
  for (int i = 0; i < this->group_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->group_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.User)
  size_t total_size = 0;

  // repeated int32 group_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->group_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _group_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_list_.MergeFrom(from.group_list_);
  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  group_list_.UnsafeArenaSwap(&other->group_list_);
  user_name_.Swap(&other->user_name_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// User

// int32 user_id = 1;
void User::clear_user_id() {
  user_id_ = 0;
}
::google::protobuf::int32 User::user_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.User.user_id)
  return user_id_;
}
void User::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.User.user_id)
}

// string user_name = 2;
void User::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::user_name() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.User.user_name)
  return user_name_.GetNoArena();
}
void User::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.User.user_name)
}
#if LANG_CXX11
void User::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.User.user_name)
}
#endif
void User::set_user_name(const char* value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.User.user_name)
}
void User::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.User.user_name)
}
::std::string* User::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.User.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_user_name() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.User.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.User.user_name)
}

// repeated int32 group_list = 3;
int User::group_list_size() const {
  return group_list_.size();
}
void User::clear_group_list() {
  group_list_.Clear();
}
::google::protobuf::int32 User::group_list(int index) const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.User.group_list)
  return group_list_.Get(index);
}
void User::set_group_list(int index, ::google::protobuf::int32 value) {
  group_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.User.group_list)
}
void User::add_group_list(::google::protobuf::int32 value) {
  group_list_.Add(value);
  // @@protoc_insertion_point(field_add:spaceless.protocol.User.group_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
User::group_list() const {
  // @@protoc_insertion_point(field_list:spaceless.protocol.User.group_list)
  return group_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
User::mutable_group_list() {
  // @@protoc_insertion_point(field_mutable_list:spaceless.protocol.User.group_list)
  return &group_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRegisterUser::kUsernameFieldNumber;
const int ReqRegisterUser::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRegisterUser::ReqRegisterUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqRegisterUser)
}
ReqRegisterUser::ReqRegisterUser(const ReqRegisterUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqRegisterUser)
}

void ReqRegisterUser::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReqRegisterUser::~ReqRegisterUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqRegisterUser)
  SharedDtor();
}

void ReqRegisterUser::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqRegisterUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRegisterUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[2].descriptor;
}

const ReqRegisterUser& ReqRegisterUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqRegisterUser* ReqRegisterUser::New(::google::protobuf::Arena* arena) const {
  ReqRegisterUser* n = new ReqRegisterUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRegisterUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqRegisterUser)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReqRegisterUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqRegisterUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.ReqRegisterUser.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.ReqRegisterUser.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqRegisterUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqRegisterUser)
  return false;
#undef DO_
}

void ReqRegisterUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqRegisterUser)
  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqRegisterUser.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqRegisterUser.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqRegisterUser)
}

::google::protobuf::uint8* ReqRegisterUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqRegisterUser)
  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqRegisterUser.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqRegisterUser.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqRegisterUser)
  return target;
}

size_t ReqRegisterUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqRegisterUser)
  size_t total_size = 0;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRegisterUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqRegisterUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRegisterUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRegisterUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqRegisterUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqRegisterUser)
    MergeFrom(*source);
  }
}

void ReqRegisterUser::MergeFrom(const ReqRegisterUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqRegisterUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void ReqRegisterUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqRegisterUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRegisterUser::CopyFrom(const ReqRegisterUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqRegisterUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRegisterUser::IsInitialized() const {
  return true;
}

void ReqRegisterUser::Swap(ReqRegisterUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRegisterUser::InternalSwap(ReqRegisterUser* other) {
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRegisterUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRegisterUser

// string username = 1;
void ReqRegisterUser::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqRegisterUser::username() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRegisterUser.username)
  return username_.GetNoArena();
}
void ReqRegisterUser::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRegisterUser.username)
}
#if LANG_CXX11
void ReqRegisterUser::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqRegisterUser.username)
}
#endif
void ReqRegisterUser::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqRegisterUser.username)
}
void ReqRegisterUser::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqRegisterUser.username)
}
::std::string* ReqRegisterUser::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqRegisterUser.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqRegisterUser::release_username() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqRegisterUser.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqRegisterUser::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqRegisterUser.username)
}

// string password = 2;
void ReqRegisterUser::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqRegisterUser::password() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRegisterUser.password)
  return password_.GetNoArena();
}
void ReqRegisterUser::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRegisterUser.password)
}
#if LANG_CXX11
void ReqRegisterUser::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqRegisterUser.password)
}
#endif
void ReqRegisterUser::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqRegisterUser.password)
}
void ReqRegisterUser::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqRegisterUser.password)
}
::std::string* ReqRegisterUser::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqRegisterUser.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqRegisterUser::release_password() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqRegisterUser.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqRegisterUser::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqRegisterUser.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspRegisterUser::kResultFieldNumber;
const int RspRegisterUser::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspRegisterUser::RspRegisterUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspRegisterUser)
}
RspRegisterUser::RspRegisterUser(const RspRegisterUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::spaceless::protocol::User(*from.user_);
  } else {
    user_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspRegisterUser)
}

void RspRegisterUser::SharedCtor() {
  ::memset(&user_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&user_) + sizeof(result_));
  _cached_size_ = 0;
}

RspRegisterUser::~RspRegisterUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspRegisterUser)
  SharedDtor();
}

void RspRegisterUser::SharedDtor() {
  if (this != internal_default_instance()) {
    delete user_;
  }
}

void RspRegisterUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspRegisterUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[3].descriptor;
}

const RspRegisterUser& RspRegisterUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspRegisterUser* RspRegisterUser::New(::google::protobuf::Arena* arena) const {
  RspRegisterUser* n = new RspRegisterUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspRegisterUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspRegisterUser)
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
  result_ = 0;
}

bool RspRegisterUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspRegisterUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spaceless.protocol.User user = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspRegisterUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspRegisterUser)
  return false;
#undef DO_
}

void RspRegisterUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspRegisterUser)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // .spaceless.protocol.User user = 2;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->user_, output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspRegisterUser)
}

::google::protobuf::uint8* RspRegisterUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspRegisterUser)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // .spaceless.protocol.User user = 2;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->user_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspRegisterUser)
  return target;
}

size_t RspRegisterUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspRegisterUser)
  size_t total_size = 0;

  // .spaceless.protocol.User user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspRegisterUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspRegisterUser)
  GOOGLE_DCHECK_NE(&from, this);
  const RspRegisterUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspRegisterUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspRegisterUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspRegisterUser)
    MergeFrom(*source);
  }
}

void RspRegisterUser::MergeFrom(const RspRegisterUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspRegisterUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    mutable_user()->::spaceless::protocol::User::MergeFrom(from.user());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspRegisterUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspRegisterUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspRegisterUser::CopyFrom(const RspRegisterUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspRegisterUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspRegisterUser::IsInitialized() const {
  return true;
}

void RspRegisterUser::Swap(RspRegisterUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspRegisterUser::InternalSwap(RspRegisterUser* other) {
  std::swap(user_, other->user_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspRegisterUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspRegisterUser

// int32 result = 1;
void RspRegisterUser::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspRegisterUser::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRegisterUser.result)
  return result_;
}
void RspRegisterUser::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspRegisterUser.result)
}

// .spaceless.protocol.User user = 2;
bool RspRegisterUser::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
void RspRegisterUser::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::spaceless::protocol::User& RspRegisterUser::user() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRegisterUser.user)
  return user_ != NULL ? *user_
                         : *::spaceless::protocol::User::internal_default_instance();
}
::spaceless::protocol::User* RspRegisterUser::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::spaceless::protocol::User;
  }
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.RspRegisterUser.user)
  return user_;
}
::spaceless::protocol::User* RspRegisterUser::release_user() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.RspRegisterUser.user)
  
  ::spaceless::protocol::User* temp = user_;
  user_ = NULL;
  return temp;
}
void RspRegisterUser::set_allocated_user(::spaceless::protocol::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.RspRegisterUser.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqLoginUser::kUserIdFieldNumber;
const int ReqLoginUser::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLoginUser::ReqLoginUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqLoginUser)
}
ReqLoginUser::ReqLoginUser(const ReqLoginUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqLoginUser)
}

void ReqLoginUser::SharedCtor() {
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
  _cached_size_ = 0;
}

ReqLoginUser::~ReqLoginUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqLoginUser)
  SharedDtor();
}

void ReqLoginUser::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqLoginUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLoginUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[4].descriptor;
}

const ReqLoginUser& ReqLoginUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqLoginUser* ReqLoginUser::New(::google::protobuf::Arena* arena) const {
  ReqLoginUser* n = new ReqLoginUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqLoginUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqLoginUser)
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

bool ReqLoginUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqLoginUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 user_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.ReqLoginUser.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqLoginUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqLoginUser)
  return false;
#undef DO_
}

void ReqLoginUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqLoginUser)
  // int32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqLoginUser.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqLoginUser)
}

::google::protobuf::uint8* ReqLoginUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqLoginUser)
  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqLoginUser.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqLoginUser)
  return target;
}

size_t ReqLoginUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqLoginUser)
  size_t total_size = 0;

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLoginUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqLoginUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLoginUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLoginUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqLoginUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqLoginUser)
    MergeFrom(*source);
  }
}

void ReqLoginUser::MergeFrom(const ReqLoginUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqLoginUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void ReqLoginUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqLoginUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLoginUser::CopyFrom(const ReqLoginUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqLoginUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLoginUser::IsInitialized() const {
  return true;
}

void ReqLoginUser::Swap(ReqLoginUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLoginUser::InternalSwap(ReqLoginUser* other) {
  password_.Swap(&other->password_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqLoginUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqLoginUser

// int32 user_id = 1;
void ReqLoginUser::clear_user_id() {
  user_id_ = 0;
}
::google::protobuf::int32 ReqLoginUser::user_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqLoginUser.user_id)
  return user_id_;
}
void ReqLoginUser::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqLoginUser.user_id)
}

// string password = 2;
void ReqLoginUser::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqLoginUser::password() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqLoginUser.password)
  return password_.GetNoArena();
}
void ReqLoginUser::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqLoginUser.password)
}
#if LANG_CXX11
void ReqLoginUser::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqLoginUser.password)
}
#endif
void ReqLoginUser::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqLoginUser.password)
}
void ReqLoginUser::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqLoginUser.password)
}
::std::string* ReqLoginUser::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqLoginUser.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqLoginUser::release_password() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqLoginUser.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqLoginUser::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqLoginUser.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspLoginUser::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspLoginUser::RspLoginUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspLoginUser)
}
RspLoginUser::RspLoginUser(const RspLoginUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspLoginUser)
}

void RspLoginUser::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

RspLoginUser::~RspLoginUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspLoginUser)
  SharedDtor();
}

void RspLoginUser::SharedDtor() {
}

void RspLoginUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspLoginUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[5].descriptor;
}

const RspLoginUser& RspLoginUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspLoginUser* RspLoginUser::New(::google::protobuf::Arena* arena) const {
  RspLoginUser* n = new RspLoginUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspLoginUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspLoginUser)
  result_ = 0;
}

bool RspLoginUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspLoginUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspLoginUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspLoginUser)
  return false;
#undef DO_
}

void RspLoginUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspLoginUser)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspLoginUser)
}

::google::protobuf::uint8* RspLoginUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspLoginUser)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspLoginUser)
  return target;
}

size_t RspLoginUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspLoginUser)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspLoginUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspLoginUser)
  GOOGLE_DCHECK_NE(&from, this);
  const RspLoginUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspLoginUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspLoginUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspLoginUser)
    MergeFrom(*source);
  }
}

void RspLoginUser::MergeFrom(const RspLoginUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspLoginUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspLoginUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspLoginUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspLoginUser::CopyFrom(const RspLoginUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspLoginUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspLoginUser::IsInitialized() const {
  return true;
}

void RspLoginUser::Swap(RspLoginUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspLoginUser::InternalSwap(RspLoginUser* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspLoginUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspLoginUser

// int32 result = 1;
void RspLoginUser::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspLoginUser::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspLoginUser.result)
  return result_;
}
void RspLoginUser::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspLoginUser.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRemoveUser::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRemoveUser::ReqRemoveUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqRemoveUser)
}
ReqRemoveUser::ReqRemoveUser(const ReqRemoveUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqRemoveUser)
}

void ReqRemoveUser::SharedCtor() {
  user_id_ = 0;
  _cached_size_ = 0;
}

ReqRemoveUser::~ReqRemoveUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqRemoveUser)
  SharedDtor();
}

void ReqRemoveUser::SharedDtor() {
}

void ReqRemoveUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRemoveUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[6].descriptor;
}

const ReqRemoveUser& ReqRemoveUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqRemoveUser* ReqRemoveUser::New(::google::protobuf::Arena* arena) const {
  ReqRemoveUser* n = new ReqRemoveUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRemoveUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqRemoveUser)
  user_id_ = 0;
}

bool ReqRemoveUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqRemoveUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 user_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqRemoveUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqRemoveUser)
  return false;
#undef DO_
}

void ReqRemoveUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqRemoveUser)
  // int32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqRemoveUser)
}

::google::protobuf::uint8* ReqRemoveUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqRemoveUser)
  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqRemoveUser)
  return target;
}

size_t ReqRemoveUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqRemoveUser)
  size_t total_size = 0;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRemoveUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqRemoveUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRemoveUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRemoveUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqRemoveUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqRemoveUser)
    MergeFrom(*source);
  }
}

void ReqRemoveUser::MergeFrom(const ReqRemoveUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqRemoveUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void ReqRemoveUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqRemoveUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRemoveUser::CopyFrom(const ReqRemoveUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqRemoveUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRemoveUser::IsInitialized() const {
  return true;
}

void ReqRemoveUser::Swap(ReqRemoveUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRemoveUser::InternalSwap(ReqRemoveUser* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRemoveUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRemoveUser

// int32 user_id = 1;
void ReqRemoveUser::clear_user_id() {
  user_id_ = 0;
}
::google::protobuf::int32 ReqRemoveUser::user_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRemoveUser.user_id)
  return user_id_;
}
void ReqRemoveUser::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRemoveUser.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspRemoveUser::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspRemoveUser::RspRemoveUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspRemoveUser)
}
RspRemoveUser::RspRemoveUser(const RspRemoveUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspRemoveUser)
}

void RspRemoveUser::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

RspRemoveUser::~RspRemoveUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspRemoveUser)
  SharedDtor();
}

void RspRemoveUser::SharedDtor() {
}

void RspRemoveUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspRemoveUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[7].descriptor;
}

const RspRemoveUser& RspRemoveUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspRemoveUser* RspRemoveUser::New(::google::protobuf::Arena* arena) const {
  RspRemoveUser* n = new RspRemoveUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspRemoveUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspRemoveUser)
  result_ = 0;
}

bool RspRemoveUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspRemoveUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspRemoveUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspRemoveUser)
  return false;
#undef DO_
}

void RspRemoveUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspRemoveUser)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspRemoveUser)
}

::google::protobuf::uint8* RspRemoveUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspRemoveUser)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspRemoveUser)
  return target;
}

size_t RspRemoveUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspRemoveUser)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspRemoveUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspRemoveUser)
  GOOGLE_DCHECK_NE(&from, this);
  const RspRemoveUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspRemoveUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspRemoveUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspRemoveUser)
    MergeFrom(*source);
  }
}

void RspRemoveUser::MergeFrom(const RspRemoveUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspRemoveUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspRemoveUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspRemoveUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspRemoveUser::CopyFrom(const RspRemoveUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspRemoveUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspRemoveUser::IsInitialized() const {
  return true;
}

void RspRemoveUser::Swap(RspRemoveUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspRemoveUser::InternalSwap(RspRemoveUser* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspRemoveUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspRemoveUser

// int32 result = 1;
void RspRemoveUser::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspRemoveUser::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRemoveUser.result)
  return result_;
}
void RspRemoveUser::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspRemoveUser.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqFindUser::kUserIdFieldNumber;
const int ReqFindUser::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqFindUser::ReqFindUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqFindUser)
}
ReqFindUser::ReqFindUser(const ReqFindUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqFindUser)
}

void ReqFindUser::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
  _cached_size_ = 0;
}

ReqFindUser::~ReqFindUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqFindUser)
  SharedDtor();
}

void ReqFindUser::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqFindUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqFindUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[8].descriptor;
}

const ReqFindUser& ReqFindUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqFindUser* ReqFindUser::New(::google::protobuf::Arena* arena) const {
  ReqFindUser* n = new ReqFindUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqFindUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqFindUser)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

bool ReqFindUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqFindUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 user_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.ReqFindUser.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqFindUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqFindUser)
  return false;
#undef DO_
}

void ReqFindUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqFindUser)
  // int32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqFindUser.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqFindUser)
}

::google::protobuf::uint8* ReqFindUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqFindUser)
  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqFindUser.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqFindUser)
  return target;
}

size_t ReqFindUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqFindUser)
  size_t total_size = 0;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqFindUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqFindUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqFindUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqFindUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqFindUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqFindUser)
    MergeFrom(*source);
  }
}

void ReqFindUser::MergeFrom(const ReqFindUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqFindUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void ReqFindUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqFindUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqFindUser::CopyFrom(const ReqFindUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqFindUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFindUser::IsInitialized() const {
  return true;
}

void ReqFindUser::Swap(ReqFindUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqFindUser::InternalSwap(ReqFindUser* other) {
  username_.Swap(&other->username_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqFindUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqFindUser

// int32 user_id = 1;
void ReqFindUser::clear_user_id() {
  user_id_ = 0;
}
::google::protobuf::int32 ReqFindUser::user_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqFindUser.user_id)
  return user_id_;
}
void ReqFindUser::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqFindUser.user_id)
}

// string username = 2;
void ReqFindUser::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqFindUser::username() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqFindUser.username)
  return username_.GetNoArena();
}
void ReqFindUser::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqFindUser.username)
}
#if LANG_CXX11
void ReqFindUser::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqFindUser.username)
}
#endif
void ReqFindUser::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqFindUser.username)
}
void ReqFindUser::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqFindUser.username)
}
::std::string* ReqFindUser::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqFindUser.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqFindUser::release_username() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqFindUser.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqFindUser::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqFindUser.username)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspFindUser::kResultFieldNumber;
const int RspFindUser::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspFindUser::RspFindUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspFindUser)
}
RspFindUser::RspFindUser(const RspFindUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::spaceless::protocol::User(*from.user_);
  } else {
    user_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspFindUser)
}

void RspFindUser::SharedCtor() {
  ::memset(&user_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&user_) + sizeof(result_));
  _cached_size_ = 0;
}

RspFindUser::~RspFindUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspFindUser)
  SharedDtor();
}

void RspFindUser::SharedDtor() {
  if (this != internal_default_instance()) {
    delete user_;
  }
}

void RspFindUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspFindUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[9].descriptor;
}

const RspFindUser& RspFindUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspFindUser* RspFindUser::New(::google::protobuf::Arena* arena) const {
  RspFindUser* n = new RspFindUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspFindUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspFindUser)
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
  result_ = 0;
}

bool RspFindUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspFindUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spaceless.protocol.User user = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspFindUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspFindUser)
  return false;
#undef DO_
}

void RspFindUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspFindUser)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // .spaceless.protocol.User user = 2;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->user_, output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspFindUser)
}

::google::protobuf::uint8* RspFindUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspFindUser)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // .spaceless.protocol.User user = 2;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->user_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspFindUser)
  return target;
}

size_t RspFindUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspFindUser)
  size_t total_size = 0;

  // .spaceless.protocol.User user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspFindUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspFindUser)
  GOOGLE_DCHECK_NE(&from, this);
  const RspFindUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspFindUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspFindUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspFindUser)
    MergeFrom(*source);
  }
}

void RspFindUser::MergeFrom(const RspFindUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspFindUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    mutable_user()->::spaceless::protocol::User::MergeFrom(from.user());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspFindUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspFindUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspFindUser::CopyFrom(const RspFindUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspFindUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspFindUser::IsInitialized() const {
  return true;
}

void RspFindUser::Swap(RspFindUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspFindUser::InternalSwap(RspFindUser* other) {
  std::swap(user_, other->user_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspFindUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspFindUser

// int32 result = 1;
void RspFindUser::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspFindUser::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspFindUser.result)
  return result_;
}
void RspFindUser::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspFindUser.result)
}

// .spaceless.protocol.User user = 2;
bool RspFindUser::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
void RspFindUser::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::spaceless::protocol::User& RspFindUser::user() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspFindUser.user)
  return user_ != NULL ? *user_
                         : *::spaceless::protocol::User::internal_default_instance();
}
::spaceless::protocol::User* RspFindUser::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::spaceless::protocol::User;
  }
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.RspFindUser.user)
  return user_;
}
::spaceless::protocol::User* RspFindUser::release_user() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.RspFindUser.user)
  
  ::spaceless::protocol::User* temp = user_;
  user_ = NULL;
  return temp;
}
void RspFindUser::set_allocated_user(::spaceless::protocol::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.RspFindUser.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SharingGroup::kGroupIdFieldNumber;
const int SharingGroup::kGroupNameFieldNumber;
const int SharingGroup::kOwnerIdFieldNumber;
const int SharingGroup::kRootDirIdFieldNumber;
const int SharingGroup::kManagerListFieldNumber;
const int SharingGroup::kMemberListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SharingGroup::SharingGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.SharingGroup)
}
SharingGroup::SharingGroup(const SharingGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      manager_list_(from.manager_list_),
      member_list_(from.member_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_name().size() > 0) {
    group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  ::memcpy(&group_id_, &from.group_id_,
    reinterpret_cast<char*>(&root_dir_id_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(root_dir_id_));
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.SharingGroup)
}

void SharingGroup::SharedCtor() {
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&root_dir_id_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(root_dir_id_));
  _cached_size_ = 0;
}

SharingGroup::~SharingGroup() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.SharingGroup)
  SharedDtor();
}

void SharingGroup::SharedDtor() {
  group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SharingGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SharingGroup::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[10].descriptor;
}

const SharingGroup& SharingGroup::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

SharingGroup* SharingGroup::New(::google::protobuf::Arena* arena) const {
  SharingGroup* n = new SharingGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SharingGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.SharingGroup)
  manager_list_.Clear();
  member_list_.Clear();
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&root_dir_id_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(root_dir_id_));
}

bool SharingGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.SharingGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 group_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.SharingGroup.group_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 owner_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 root_dir_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &root_dir_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 manager_list = 5;
      case 5: {
        if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_manager_list())));
        } else if (tag == 40u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_manager_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 member_list = 6;
      case 6: {
        if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_member_list())));
        } else if (tag == 48u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.SharingGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.SharingGroup)
  return false;
#undef DO_
}

void SharingGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.SharingGroup)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.SharingGroup.group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_name(), output);
  }

  // int32 owner_id = 3;
  if (this->owner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->owner_id(), output);
  }

  // int32 root_dir_id = 4;
  if (this->root_dir_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->root_dir_id(), output);
  }

  // repeated int32 manager_list = 5;
  if (this->manager_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_manager_list_cached_byte_size_);
  }
  for (int i = 0; i < this->manager_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->manager_list(i), output);
  }

  // repeated int32 member_list = 6;
  if (this->member_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_member_list_cached_byte_size_);
  }
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->member_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.SharingGroup)
}

::google::protobuf::uint8* SharingGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.SharingGroup)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.SharingGroup.group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_name(), target);
  }

  // int32 owner_id = 3;
  if (this->owner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->owner_id(), target);
  }

  // int32 root_dir_id = 4;
  if (this->root_dir_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->root_dir_id(), target);
  }

  // repeated int32 manager_list = 5;
  if (this->manager_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _manager_list_cached_byte_size_, target);
  }
  for (int i = 0; i < this->manager_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->manager_list(i), target);
  }

  // repeated int32 member_list = 6;
  if (this->member_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _member_list_cached_byte_size_, target);
  }
  for (int i = 0; i < this->member_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->member_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.SharingGroup)
  return target;
}

size_t SharingGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.SharingGroup)
  size_t total_size = 0;

  // repeated int32 manager_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->manager_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _manager_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 member_list = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->member_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _member_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_name());
  }

  // int32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  // int32 owner_id = 3;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner_id());
  }

  // int32 root_dir_id = 4;
  if (this->root_dir_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->root_dir_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharingGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.SharingGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const SharingGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SharingGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.SharingGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.SharingGroup)
    MergeFrom(*source);
  }
}

void SharingGroup::MergeFrom(const SharingGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.SharingGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manager_list_.MergeFrom(from.manager_list_);
  member_list_.MergeFrom(from.member_list_);
  if (from.group_name().size() > 0) {

    group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.owner_id() != 0) {
    set_owner_id(from.owner_id());
  }
  if (from.root_dir_id() != 0) {
    set_root_dir_id(from.root_dir_id());
  }
}

void SharingGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.SharingGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharingGroup::CopyFrom(const SharingGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.SharingGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingGroup::IsInitialized() const {
  return true;
}

void SharingGroup::Swap(SharingGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SharingGroup::InternalSwap(SharingGroup* other) {
  manager_list_.UnsafeArenaSwap(&other->manager_list_);
  member_list_.UnsafeArenaSwap(&other->member_list_);
  group_name_.Swap(&other->group_name_);
  std::swap(group_id_, other->group_id_);
  std::swap(owner_id_, other->owner_id_);
  std::swap(root_dir_id_, other->root_dir_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SharingGroup::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SharingGroup

// int32 group_id = 1;
void SharingGroup::clear_group_id() {
  group_id_ = 0;
}
::google::protobuf::int32 SharingGroup::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.SharingGroup.group_id)
  return group_id_;
}
void SharingGroup::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.SharingGroup.group_id)
}

// string group_name = 2;
void SharingGroup::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SharingGroup::group_name() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.SharingGroup.group_name)
  return group_name_.GetNoArena();
}
void SharingGroup::set_group_name(const ::std::string& value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.SharingGroup.group_name)
}
#if LANG_CXX11
void SharingGroup::set_group_name(::std::string&& value) {
  
  group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.SharingGroup.group_name)
}
#endif
void SharingGroup::set_group_name(const char* value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.SharingGroup.group_name)
}
void SharingGroup::set_group_name(const char* value, size_t size) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.SharingGroup.group_name)
}
::std::string* SharingGroup::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.SharingGroup.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SharingGroup::release_group_name() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.SharingGroup.group_name)
  
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SharingGroup::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.SharingGroup.group_name)
}

// int32 owner_id = 3;
void SharingGroup::clear_owner_id() {
  owner_id_ = 0;
}
::google::protobuf::int32 SharingGroup::owner_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.SharingGroup.owner_id)
  return owner_id_;
}
void SharingGroup::set_owner_id(::google::protobuf::int32 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.SharingGroup.owner_id)
}

// int32 root_dir_id = 4;
void SharingGroup::clear_root_dir_id() {
  root_dir_id_ = 0;
}
::google::protobuf::int32 SharingGroup::root_dir_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.SharingGroup.root_dir_id)
  return root_dir_id_;
}
void SharingGroup::set_root_dir_id(::google::protobuf::int32 value) {
  
  root_dir_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.SharingGroup.root_dir_id)
}

// repeated int32 manager_list = 5;
int SharingGroup::manager_list_size() const {
  return manager_list_.size();
}
void SharingGroup::clear_manager_list() {
  manager_list_.Clear();
}
::google::protobuf::int32 SharingGroup::manager_list(int index) const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.SharingGroup.manager_list)
  return manager_list_.Get(index);
}
void SharingGroup::set_manager_list(int index, ::google::protobuf::int32 value) {
  manager_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.SharingGroup.manager_list)
}
void SharingGroup::add_manager_list(::google::protobuf::int32 value) {
  manager_list_.Add(value);
  // @@protoc_insertion_point(field_add:spaceless.protocol.SharingGroup.manager_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SharingGroup::manager_list() const {
  // @@protoc_insertion_point(field_list:spaceless.protocol.SharingGroup.manager_list)
  return manager_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SharingGroup::mutable_manager_list() {
  // @@protoc_insertion_point(field_mutable_list:spaceless.protocol.SharingGroup.manager_list)
  return &manager_list_;
}

// repeated int32 member_list = 6;
int SharingGroup::member_list_size() const {
  return member_list_.size();
}
void SharingGroup::clear_member_list() {
  member_list_.Clear();
}
::google::protobuf::int32 SharingGroup::member_list(int index) const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.SharingGroup.member_list)
  return member_list_.Get(index);
}
void SharingGroup::set_member_list(int index, ::google::protobuf::int32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.SharingGroup.member_list)
}
void SharingGroup::add_member_list(::google::protobuf::int32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:spaceless.protocol.SharingGroup.member_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SharingGroup::member_list() const {
  // @@protoc_insertion_point(field_list:spaceless.protocol.SharingGroup.member_list)
  return member_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SharingGroup::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:spaceless.protocol.SharingGroup.member_list)
  return &member_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRegisterGroup::kGroupNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRegisterGroup::ReqRegisterGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqRegisterGroup)
}
ReqRegisterGroup::ReqRegisterGroup(const ReqRegisterGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_name().size() > 0) {
    group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqRegisterGroup)
}

void ReqRegisterGroup::SharedCtor() {
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReqRegisterGroup::~ReqRegisterGroup() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqRegisterGroup)
  SharedDtor();
}

void ReqRegisterGroup::SharedDtor() {
  group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqRegisterGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRegisterGroup::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[11].descriptor;
}

const ReqRegisterGroup& ReqRegisterGroup::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqRegisterGroup* ReqRegisterGroup::New(::google::protobuf::Arena* arena) const {
  ReqRegisterGroup* n = new ReqRegisterGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRegisterGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqRegisterGroup)
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReqRegisterGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqRegisterGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.ReqRegisterGroup.group_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqRegisterGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqRegisterGroup)
  return false;
#undef DO_
}

void ReqRegisterGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqRegisterGroup)
  // string group_name = 1;
  if (this->group_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqRegisterGroup.group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqRegisterGroup)
}

::google::protobuf::uint8* ReqRegisterGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqRegisterGroup)
  // string group_name = 1;
  if (this->group_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqRegisterGroup.group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqRegisterGroup)
  return target;
}

size_t ReqRegisterGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqRegisterGroup)
  size_t total_size = 0;

  // string group_name = 1;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRegisterGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqRegisterGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRegisterGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRegisterGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqRegisterGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqRegisterGroup)
    MergeFrom(*source);
  }
}

void ReqRegisterGroup::MergeFrom(const ReqRegisterGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqRegisterGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_name().size() > 0) {

    group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
}

void ReqRegisterGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqRegisterGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRegisterGroup::CopyFrom(const ReqRegisterGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqRegisterGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRegisterGroup::IsInitialized() const {
  return true;
}

void ReqRegisterGroup::Swap(ReqRegisterGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRegisterGroup::InternalSwap(ReqRegisterGroup* other) {
  group_name_.Swap(&other->group_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRegisterGroup::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRegisterGroup

// string group_name = 1;
void ReqRegisterGroup::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqRegisterGroup::group_name() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRegisterGroup.group_name)
  return group_name_.GetNoArena();
}
void ReqRegisterGroup::set_group_name(const ::std::string& value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRegisterGroup.group_name)
}
#if LANG_CXX11
void ReqRegisterGroup::set_group_name(::std::string&& value) {
  
  group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqRegisterGroup.group_name)
}
#endif
void ReqRegisterGroup::set_group_name(const char* value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqRegisterGroup.group_name)
}
void ReqRegisterGroup::set_group_name(const char* value, size_t size) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqRegisterGroup.group_name)
}
::std::string* ReqRegisterGroup::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqRegisterGroup.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqRegisterGroup::release_group_name() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqRegisterGroup.group_name)
  
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqRegisterGroup::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqRegisterGroup.group_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspRegisterGroup::kResultFieldNumber;
const int RspRegisterGroup::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspRegisterGroup::RspRegisterGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspRegisterGroup)
}
RspRegisterGroup::RspRegisterGroup(const RspRegisterGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&result_) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspRegisterGroup)
}

void RspRegisterGroup::SharedCtor() {
  ::memset(&result_, 0, reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&result_) + sizeof(group_id_));
  _cached_size_ = 0;
}

RspRegisterGroup::~RspRegisterGroup() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspRegisterGroup)
  SharedDtor();
}

void RspRegisterGroup::SharedDtor() {
}

void RspRegisterGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspRegisterGroup::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[12].descriptor;
}

const RspRegisterGroup& RspRegisterGroup::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspRegisterGroup* RspRegisterGroup::New(::google::protobuf::Arena* arena) const {
  RspRegisterGroup* n = new RspRegisterGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspRegisterGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspRegisterGroup)
  ::memset(&result_, 0, reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&result_) + sizeof(group_id_));
}

bool RspRegisterGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspRegisterGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 group_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspRegisterGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspRegisterGroup)
  return false;
#undef DO_
}

void RspRegisterGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspRegisterGroup)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // int32 group_id = 2;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspRegisterGroup)
}

::google::protobuf::uint8* RspRegisterGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspRegisterGroup)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // int32 group_id = 2;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspRegisterGroup)
  return target;
}

size_t RspRegisterGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspRegisterGroup)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // int32 group_id = 2;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspRegisterGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspRegisterGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const RspRegisterGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspRegisterGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspRegisterGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspRegisterGroup)
    MergeFrom(*source);
  }
}

void RspRegisterGroup::MergeFrom(const RspRegisterGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspRegisterGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void RspRegisterGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspRegisterGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspRegisterGroup::CopyFrom(const RspRegisterGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspRegisterGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspRegisterGroup::IsInitialized() const {
  return true;
}

void RspRegisterGroup::Swap(RspRegisterGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspRegisterGroup::InternalSwap(RspRegisterGroup* other) {
  std::swap(result_, other->result_);
  std::swap(group_id_, other->group_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspRegisterGroup::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspRegisterGroup

// int32 result = 1;
void RspRegisterGroup::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspRegisterGroup::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRegisterGroup.result)
  return result_;
}
void RspRegisterGroup::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspRegisterGroup.result)
}

// int32 group_id = 2;
void RspRegisterGroup::clear_group_id() {
  group_id_ = 0;
}
::google::protobuf::int32 RspRegisterGroup::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRegisterGroup.group_id)
  return group_id_;
}
void RspRegisterGroup::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspRegisterGroup.group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRemoveGroup::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRemoveGroup::ReqRemoveGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqRemoveGroup)
}
ReqRemoveGroup::ReqRemoveGroup(const ReqRemoveGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqRemoveGroup)
}

void ReqRemoveGroup::SharedCtor() {
  group_id_ = 0;
  _cached_size_ = 0;
}

ReqRemoveGroup::~ReqRemoveGroup() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqRemoveGroup)
  SharedDtor();
}

void ReqRemoveGroup::SharedDtor() {
}

void ReqRemoveGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRemoveGroup::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[13].descriptor;
}

const ReqRemoveGroup& ReqRemoveGroup::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqRemoveGroup* ReqRemoveGroup::New(::google::protobuf::Arena* arena) const {
  ReqRemoveGroup* n = new ReqRemoveGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRemoveGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqRemoveGroup)
  group_id_ = 0;
}

bool ReqRemoveGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqRemoveGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 group_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqRemoveGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqRemoveGroup)
  return false;
#undef DO_
}

void ReqRemoveGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqRemoveGroup)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqRemoveGroup)
}

::google::protobuf::uint8* ReqRemoveGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqRemoveGroup)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqRemoveGroup)
  return target;
}

size_t ReqRemoveGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqRemoveGroup)
  size_t total_size = 0;

  // int32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRemoveGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqRemoveGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRemoveGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRemoveGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqRemoveGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqRemoveGroup)
    MergeFrom(*source);
  }
}

void ReqRemoveGroup::MergeFrom(const ReqRemoveGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqRemoveGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void ReqRemoveGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqRemoveGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRemoveGroup::CopyFrom(const ReqRemoveGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqRemoveGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRemoveGroup::IsInitialized() const {
  return true;
}

void ReqRemoveGroup::Swap(ReqRemoveGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRemoveGroup::InternalSwap(ReqRemoveGroup* other) {
  std::swap(group_id_, other->group_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRemoveGroup::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRemoveGroup

// int32 group_id = 1;
void ReqRemoveGroup::clear_group_id() {
  group_id_ = 0;
}
::google::protobuf::int32 ReqRemoveGroup::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRemoveGroup.group_id)
  return group_id_;
}
void ReqRemoveGroup::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRemoveGroup.group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspRemoveGroup::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspRemoveGroup::RspRemoveGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspRemoveGroup)
}
RspRemoveGroup::RspRemoveGroup(const RspRemoveGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspRemoveGroup)
}

void RspRemoveGroup::SharedCtor() {
  result_ = false;
  _cached_size_ = 0;
}

RspRemoveGroup::~RspRemoveGroup() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspRemoveGroup)
  SharedDtor();
}

void RspRemoveGroup::SharedDtor() {
}

void RspRemoveGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspRemoveGroup::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[14].descriptor;
}

const RspRemoveGroup& RspRemoveGroup::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspRemoveGroup* RspRemoveGroup::New(::google::protobuf::Arena* arena) const {
  RspRemoveGroup* n = new RspRemoveGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspRemoveGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspRemoveGroup)
  result_ = false;
}

bool RspRemoveGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspRemoveGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspRemoveGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspRemoveGroup)
  return false;
#undef DO_
}

void RspRemoveGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspRemoveGroup)
  // bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspRemoveGroup)
}

::google::protobuf::uint8* RspRemoveGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspRemoveGroup)
  // bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspRemoveGroup)
  return target;
}

size_t RspRemoveGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspRemoveGroup)
  size_t total_size = 0;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspRemoveGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspRemoveGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const RspRemoveGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspRemoveGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspRemoveGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspRemoveGroup)
    MergeFrom(*source);
  }
}

void RspRemoveGroup::MergeFrom(const RspRemoveGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspRemoveGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspRemoveGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspRemoveGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspRemoveGroup::CopyFrom(const RspRemoveGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspRemoveGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspRemoveGroup::IsInitialized() const {
  return true;
}

void RspRemoveGroup::Swap(RspRemoveGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspRemoveGroup::InternalSwap(RspRemoveGroup* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspRemoveGroup::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspRemoveGroup

// bool result = 1;
void RspRemoveGroup::clear_result() {
  result_ = false;
}
bool RspRemoveGroup::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRemoveGroup.result)
  return result_;
}
void RspRemoveGroup::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspRemoveGroup.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqFindGroup::kGroupIdFieldNumber;
const int ReqFindGroup::kGroupNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqFindGroup::ReqFindGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqFindGroup)
}
ReqFindGroup::ReqFindGroup(const ReqFindGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_name().size() > 0) {
    group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqFindGroup)
}

void ReqFindGroup::SharedCtor() {
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0;
  _cached_size_ = 0;
}

ReqFindGroup::~ReqFindGroup() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqFindGroup)
  SharedDtor();
}

void ReqFindGroup::SharedDtor() {
  group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqFindGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqFindGroup::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[15].descriptor;
}

const ReqFindGroup& ReqFindGroup::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqFindGroup* ReqFindGroup::New(::google::protobuf::Arena* arena) const {
  ReqFindGroup* n = new ReqFindGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqFindGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqFindGroup)
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0;
}

bool ReqFindGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqFindGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 group_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.ReqFindGroup.group_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqFindGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqFindGroup)
  return false;
#undef DO_
}

void ReqFindGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqFindGroup)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqFindGroup.group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqFindGroup)
}

::google::protobuf::uint8* ReqFindGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqFindGroup)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqFindGroup.group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqFindGroup)
  return target;
}

size_t ReqFindGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqFindGroup)
  size_t total_size = 0;

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_name());
  }

  // int32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqFindGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqFindGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqFindGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqFindGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqFindGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqFindGroup)
    MergeFrom(*source);
  }
}

void ReqFindGroup::MergeFrom(const ReqFindGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqFindGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_name().size() > 0) {

    group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void ReqFindGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqFindGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqFindGroup::CopyFrom(const ReqFindGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqFindGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFindGroup::IsInitialized() const {
  return true;
}

void ReqFindGroup::Swap(ReqFindGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqFindGroup::InternalSwap(ReqFindGroup* other) {
  group_name_.Swap(&other->group_name_);
  std::swap(group_id_, other->group_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqFindGroup::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqFindGroup

// int32 group_id = 1;
void ReqFindGroup::clear_group_id() {
  group_id_ = 0;
}
::google::protobuf::int32 ReqFindGroup::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqFindGroup.group_id)
  return group_id_;
}
void ReqFindGroup::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqFindGroup.group_id)
}

// string group_name = 2;
void ReqFindGroup::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqFindGroup::group_name() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqFindGroup.group_name)
  return group_name_.GetNoArena();
}
void ReqFindGroup::set_group_name(const ::std::string& value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqFindGroup.group_name)
}
#if LANG_CXX11
void ReqFindGroup::set_group_name(::std::string&& value) {
  
  group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqFindGroup.group_name)
}
#endif
void ReqFindGroup::set_group_name(const char* value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqFindGroup.group_name)
}
void ReqFindGroup::set_group_name(const char* value, size_t size) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqFindGroup.group_name)
}
::std::string* ReqFindGroup::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqFindGroup.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqFindGroup::release_group_name() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqFindGroup.group_name)
  
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqFindGroup::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqFindGroup.group_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspFindGroup::kResultFieldNumber;
const int RspFindGroup::kGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspFindGroup::RspFindGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspFindGroup)
}
RspFindGroup::RspFindGroup(const RspFindGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_group()) {
    group_ = new ::spaceless::protocol::SharingGroup(*from.group_);
  } else {
    group_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspFindGroup)
}

void RspFindGroup::SharedCtor() {
  ::memset(&group_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&group_) + sizeof(result_));
  _cached_size_ = 0;
}

RspFindGroup::~RspFindGroup() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspFindGroup)
  SharedDtor();
}

void RspFindGroup::SharedDtor() {
  if (this != internal_default_instance()) {
    delete group_;
  }
}

void RspFindGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspFindGroup::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[16].descriptor;
}

const RspFindGroup& RspFindGroup::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspFindGroup* RspFindGroup::New(::google::protobuf::Arena* arena) const {
  RspFindGroup* n = new RspFindGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspFindGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspFindGroup)
  if (GetArenaNoVirtual() == NULL && group_ != NULL) {
    delete group_;
  }
  group_ = NULL;
  result_ = 0;
}

bool RspFindGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspFindGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spaceless.protocol.SharingGroup group = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspFindGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspFindGroup)
  return false;
#undef DO_
}

void RspFindGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspFindGroup)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // .spaceless.protocol.SharingGroup group = 2;
  if (this->has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->group_, output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspFindGroup)
}

::google::protobuf::uint8* RspFindGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspFindGroup)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // .spaceless.protocol.SharingGroup group = 2;
  if (this->has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->group_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspFindGroup)
  return target;
}

size_t RspFindGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspFindGroup)
  size_t total_size = 0;

  // .spaceless.protocol.SharingGroup group = 2;
  if (this->has_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->group_);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspFindGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspFindGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const RspFindGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspFindGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspFindGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspFindGroup)
    MergeFrom(*source);
  }
}

void RspFindGroup::MergeFrom(const RspFindGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspFindGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_group()) {
    mutable_group()->::spaceless::protocol::SharingGroup::MergeFrom(from.group());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspFindGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspFindGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspFindGroup::CopyFrom(const RspFindGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspFindGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspFindGroup::IsInitialized() const {
  return true;
}

void RspFindGroup::Swap(RspFindGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspFindGroup::InternalSwap(RspFindGroup* other) {
  std::swap(group_, other->group_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspFindGroup::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspFindGroup

// int32 result = 1;
void RspFindGroup::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspFindGroup::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspFindGroup.result)
  return result_;
}
void RspFindGroup::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspFindGroup.result)
}

// .spaceless.protocol.SharingGroup group = 2;
bool RspFindGroup::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
void RspFindGroup::clear_group() {
  if (GetArenaNoVirtual() == NULL && group_ != NULL) delete group_;
  group_ = NULL;
}
const ::spaceless::protocol::SharingGroup& RspFindGroup::group() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspFindGroup.group)
  return group_ != NULL ? *group_
                         : *::spaceless::protocol::SharingGroup::internal_default_instance();
}
::spaceless::protocol::SharingGroup* RspFindGroup::mutable_group() {
  
  if (group_ == NULL) {
    group_ = new ::spaceless::protocol::SharingGroup;
  }
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.RspFindGroup.group)
  return group_;
}
::spaceless::protocol::SharingGroup* RspFindGroup::release_group() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.RspFindGroup.group)
  
  ::spaceless::protocol::SharingGroup* temp = group_;
  group_ = NULL;
  return temp;
}
void RspFindGroup::set_allocated_group(::spaceless::protocol::SharingGroup* group) {
  delete group_;
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.RspFindGroup.group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqJoinGroup::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqJoinGroup::ReqJoinGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqJoinGroup)
}
ReqJoinGroup::ReqJoinGroup(const ReqJoinGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqJoinGroup)
}

void ReqJoinGroup::SharedCtor() {
  group_id_ = 0;
  _cached_size_ = 0;
}

ReqJoinGroup::~ReqJoinGroup() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqJoinGroup)
  SharedDtor();
}

void ReqJoinGroup::SharedDtor() {
}

void ReqJoinGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqJoinGroup::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[17].descriptor;
}

const ReqJoinGroup& ReqJoinGroup::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqJoinGroup* ReqJoinGroup::New(::google::protobuf::Arena* arena) const {
  ReqJoinGroup* n = new ReqJoinGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqJoinGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqJoinGroup)
  group_id_ = 0;
}

bool ReqJoinGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqJoinGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 group_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqJoinGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqJoinGroup)
  return false;
#undef DO_
}

void ReqJoinGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqJoinGroup)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqJoinGroup)
}

::google::protobuf::uint8* ReqJoinGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqJoinGroup)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqJoinGroup)
  return target;
}

size_t ReqJoinGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqJoinGroup)
  size_t total_size = 0;

  // int32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqJoinGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqJoinGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqJoinGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqJoinGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqJoinGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqJoinGroup)
    MergeFrom(*source);
  }
}

void ReqJoinGroup::MergeFrom(const ReqJoinGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqJoinGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void ReqJoinGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqJoinGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqJoinGroup::CopyFrom(const ReqJoinGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqJoinGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqJoinGroup::IsInitialized() const {
  return true;
}

void ReqJoinGroup::Swap(ReqJoinGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqJoinGroup::InternalSwap(ReqJoinGroup* other) {
  std::swap(group_id_, other->group_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqJoinGroup::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqJoinGroup

// int32 group_id = 1;
void ReqJoinGroup::clear_group_id() {
  group_id_ = 0;
}
::google::protobuf::int32 ReqJoinGroup::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqJoinGroup.group_id)
  return group_id_;
}
void ReqJoinGroup::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqJoinGroup.group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspJoinGroup::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspJoinGroup::RspJoinGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspJoinGroup)
}
RspJoinGroup::RspJoinGroup(const RspJoinGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspJoinGroup)
}

void RspJoinGroup::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

RspJoinGroup::~RspJoinGroup() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspJoinGroup)
  SharedDtor();
}

void RspJoinGroup::SharedDtor() {
}

void RspJoinGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspJoinGroup::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[18].descriptor;
}

const RspJoinGroup& RspJoinGroup::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspJoinGroup* RspJoinGroup::New(::google::protobuf::Arena* arena) const {
  RspJoinGroup* n = new RspJoinGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspJoinGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspJoinGroup)
  result_ = 0;
}

bool RspJoinGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspJoinGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspJoinGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspJoinGroup)
  return false;
#undef DO_
}

void RspJoinGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspJoinGroup)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspJoinGroup)
}

::google::protobuf::uint8* RspJoinGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspJoinGroup)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspJoinGroup)
  return target;
}

size_t RspJoinGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspJoinGroup)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspJoinGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspJoinGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const RspJoinGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspJoinGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspJoinGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspJoinGroup)
    MergeFrom(*source);
  }
}

void RspJoinGroup::MergeFrom(const RspJoinGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspJoinGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspJoinGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspJoinGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspJoinGroup::CopyFrom(const RspJoinGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspJoinGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspJoinGroup::IsInitialized() const {
  return true;
}

void RspJoinGroup::Swap(RspJoinGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspJoinGroup::InternalSwap(RspJoinGroup* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspJoinGroup::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspJoinGroup

// int32 result = 1;
void RspJoinGroup::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspJoinGroup::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspJoinGroup.result)
  return result_;
}
void RspJoinGroup::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspJoinGroup.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAssignAsManager::kGroupIdFieldNumber;
const int ReqAssignAsManager::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAssignAsManager::ReqAssignAsManager()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqAssignAsManager)
}
ReqAssignAsManager::ReqAssignAsManager(const ReqAssignAsManager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&group_id_, &from.group_id_,
    reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqAssignAsManager)
}

void ReqAssignAsManager::SharedCtor() {
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(user_id_));
  _cached_size_ = 0;
}

ReqAssignAsManager::~ReqAssignAsManager() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqAssignAsManager)
  SharedDtor();
}

void ReqAssignAsManager::SharedDtor() {
}

void ReqAssignAsManager::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAssignAsManager::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[19].descriptor;
}

const ReqAssignAsManager& ReqAssignAsManager::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqAssignAsManager* ReqAssignAsManager::New(::google::protobuf::Arena* arena) const {
  ReqAssignAsManager* n = new ReqAssignAsManager;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAssignAsManager::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqAssignAsManager)
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(user_id_));
}

bool ReqAssignAsManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqAssignAsManager)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 group_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 user_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqAssignAsManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqAssignAsManager)
  return false;
#undef DO_
}

void ReqAssignAsManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqAssignAsManager)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqAssignAsManager)
}

::google::protobuf::uint8* ReqAssignAsManager::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqAssignAsManager)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqAssignAsManager)
  return target;
}

size_t ReqAssignAsManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqAssignAsManager)
  size_t total_size = 0;

  // int32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAssignAsManager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqAssignAsManager)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAssignAsManager* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAssignAsManager>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqAssignAsManager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqAssignAsManager)
    MergeFrom(*source);
  }
}

void ReqAssignAsManager::MergeFrom(const ReqAssignAsManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqAssignAsManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void ReqAssignAsManager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqAssignAsManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAssignAsManager::CopyFrom(const ReqAssignAsManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqAssignAsManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAssignAsManager::IsInitialized() const {
  return true;
}

void ReqAssignAsManager::Swap(ReqAssignAsManager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAssignAsManager::InternalSwap(ReqAssignAsManager* other) {
  std::swap(group_id_, other->group_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAssignAsManager::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAssignAsManager

// int32 group_id = 1;
void ReqAssignAsManager::clear_group_id() {
  group_id_ = 0;
}
::google::protobuf::int32 ReqAssignAsManager::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqAssignAsManager.group_id)
  return group_id_;
}
void ReqAssignAsManager::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqAssignAsManager.group_id)
}

// int32 user_id = 2;
void ReqAssignAsManager::clear_user_id() {
  user_id_ = 0;
}
::google::protobuf::int32 ReqAssignAsManager::user_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqAssignAsManager.user_id)
  return user_id_;
}
void ReqAssignAsManager::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqAssignAsManager.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspAssignAsManager::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspAssignAsManager::RspAssignAsManager()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspAssignAsManager)
}
RspAssignAsManager::RspAssignAsManager(const RspAssignAsManager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspAssignAsManager)
}

void RspAssignAsManager::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

RspAssignAsManager::~RspAssignAsManager() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspAssignAsManager)
  SharedDtor();
}

void RspAssignAsManager::SharedDtor() {
}

void RspAssignAsManager::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspAssignAsManager::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[20].descriptor;
}

const RspAssignAsManager& RspAssignAsManager::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspAssignAsManager* RspAssignAsManager::New(::google::protobuf::Arena* arena) const {
  RspAssignAsManager* n = new RspAssignAsManager;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspAssignAsManager::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspAssignAsManager)
  result_ = 0;
}

bool RspAssignAsManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspAssignAsManager)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspAssignAsManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspAssignAsManager)
  return false;
#undef DO_
}

void RspAssignAsManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspAssignAsManager)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspAssignAsManager)
}

::google::protobuf::uint8* RspAssignAsManager::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspAssignAsManager)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspAssignAsManager)
  return target;
}

size_t RspAssignAsManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspAssignAsManager)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspAssignAsManager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspAssignAsManager)
  GOOGLE_DCHECK_NE(&from, this);
  const RspAssignAsManager* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspAssignAsManager>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspAssignAsManager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspAssignAsManager)
    MergeFrom(*source);
  }
}

void RspAssignAsManager::MergeFrom(const RspAssignAsManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspAssignAsManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspAssignAsManager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspAssignAsManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspAssignAsManager::CopyFrom(const RspAssignAsManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspAssignAsManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspAssignAsManager::IsInitialized() const {
  return true;
}

void RspAssignAsManager::Swap(RspAssignAsManager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspAssignAsManager::InternalSwap(RspAssignAsManager* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspAssignAsManager::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspAssignAsManager

// int32 result = 1;
void RspAssignAsManager::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspAssignAsManager::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspAssignAsManager.result)
  return result_;
}
void RspAssignAsManager::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspAssignAsManager.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAssignAsMemeber::kGroupIdFieldNumber;
const int ReqAssignAsMemeber::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAssignAsMemeber::ReqAssignAsMemeber()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqAssignAsMemeber)
}
ReqAssignAsMemeber::ReqAssignAsMemeber(const ReqAssignAsMemeber& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&group_id_, &from.group_id_,
    reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqAssignAsMemeber)
}

void ReqAssignAsMemeber::SharedCtor() {
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(user_id_));
  _cached_size_ = 0;
}

ReqAssignAsMemeber::~ReqAssignAsMemeber() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqAssignAsMemeber)
  SharedDtor();
}

void ReqAssignAsMemeber::SharedDtor() {
}

void ReqAssignAsMemeber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAssignAsMemeber::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[21].descriptor;
}

const ReqAssignAsMemeber& ReqAssignAsMemeber::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqAssignAsMemeber* ReqAssignAsMemeber::New(::google::protobuf::Arena* arena) const {
  ReqAssignAsMemeber* n = new ReqAssignAsMemeber;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAssignAsMemeber::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqAssignAsMemeber)
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(user_id_));
}

bool ReqAssignAsMemeber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqAssignAsMemeber)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 group_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 user_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqAssignAsMemeber)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqAssignAsMemeber)
  return false;
#undef DO_
}

void ReqAssignAsMemeber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqAssignAsMemeber)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqAssignAsMemeber)
}

::google::protobuf::uint8* ReqAssignAsMemeber::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqAssignAsMemeber)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqAssignAsMemeber)
  return target;
}

size_t ReqAssignAsMemeber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqAssignAsMemeber)
  size_t total_size = 0;

  // int32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAssignAsMemeber::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqAssignAsMemeber)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAssignAsMemeber* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAssignAsMemeber>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqAssignAsMemeber)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqAssignAsMemeber)
    MergeFrom(*source);
  }
}

void ReqAssignAsMemeber::MergeFrom(const ReqAssignAsMemeber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqAssignAsMemeber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void ReqAssignAsMemeber::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqAssignAsMemeber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAssignAsMemeber::CopyFrom(const ReqAssignAsMemeber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqAssignAsMemeber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAssignAsMemeber::IsInitialized() const {
  return true;
}

void ReqAssignAsMemeber::Swap(ReqAssignAsMemeber* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAssignAsMemeber::InternalSwap(ReqAssignAsMemeber* other) {
  std::swap(group_id_, other->group_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAssignAsMemeber::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAssignAsMemeber

// int32 group_id = 1;
void ReqAssignAsMemeber::clear_group_id() {
  group_id_ = 0;
}
::google::protobuf::int32 ReqAssignAsMemeber::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqAssignAsMemeber.group_id)
  return group_id_;
}
void ReqAssignAsMemeber::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqAssignAsMemeber.group_id)
}

// int32 user_id = 2;
void ReqAssignAsMemeber::clear_user_id() {
  user_id_ = 0;
}
::google::protobuf::int32 ReqAssignAsMemeber::user_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqAssignAsMemeber.user_id)
  return user_id_;
}
void ReqAssignAsMemeber::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqAssignAsMemeber.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspAssignAsMemeber::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspAssignAsMemeber::RspAssignAsMemeber()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspAssignAsMemeber)
}
RspAssignAsMemeber::RspAssignAsMemeber(const RspAssignAsMemeber& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspAssignAsMemeber)
}

void RspAssignAsMemeber::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

RspAssignAsMemeber::~RspAssignAsMemeber() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspAssignAsMemeber)
  SharedDtor();
}

void RspAssignAsMemeber::SharedDtor() {
}

void RspAssignAsMemeber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspAssignAsMemeber::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[22].descriptor;
}

const RspAssignAsMemeber& RspAssignAsMemeber::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspAssignAsMemeber* RspAssignAsMemeber::New(::google::protobuf::Arena* arena) const {
  RspAssignAsMemeber* n = new RspAssignAsMemeber;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspAssignAsMemeber::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspAssignAsMemeber)
  result_ = 0;
}

bool RspAssignAsMemeber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspAssignAsMemeber)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspAssignAsMemeber)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspAssignAsMemeber)
  return false;
#undef DO_
}

void RspAssignAsMemeber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspAssignAsMemeber)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspAssignAsMemeber)
}

::google::protobuf::uint8* RspAssignAsMemeber::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspAssignAsMemeber)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspAssignAsMemeber)
  return target;
}

size_t RspAssignAsMemeber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspAssignAsMemeber)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspAssignAsMemeber::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspAssignAsMemeber)
  GOOGLE_DCHECK_NE(&from, this);
  const RspAssignAsMemeber* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspAssignAsMemeber>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspAssignAsMemeber)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspAssignAsMemeber)
    MergeFrom(*source);
  }
}

void RspAssignAsMemeber::MergeFrom(const RspAssignAsMemeber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspAssignAsMemeber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspAssignAsMemeber::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspAssignAsMemeber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspAssignAsMemeber::CopyFrom(const RspAssignAsMemeber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspAssignAsMemeber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspAssignAsMemeber::IsInitialized() const {
  return true;
}

void RspAssignAsMemeber::Swap(RspAssignAsMemeber* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspAssignAsMemeber::InternalSwap(RspAssignAsMemeber* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspAssignAsMemeber::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspAssignAsMemeber

// int32 result = 1;
void RspAssignAsMemeber::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspAssignAsMemeber::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspAssignAsMemeber.result)
  return result_;
}
void RspAssignAsMemeber::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspAssignAsMemeber.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqKickOutUser::kGroupIdFieldNumber;
const int ReqKickOutUser::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqKickOutUser::ReqKickOutUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqKickOutUser)
}
ReqKickOutUser::ReqKickOutUser(const ReqKickOutUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&group_id_, &from.group_id_,
    reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqKickOutUser)
}

void ReqKickOutUser::SharedCtor() {
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(user_id_));
  _cached_size_ = 0;
}

ReqKickOutUser::~ReqKickOutUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqKickOutUser)
  SharedDtor();
}

void ReqKickOutUser::SharedDtor() {
}

void ReqKickOutUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqKickOutUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[23].descriptor;
}

const ReqKickOutUser& ReqKickOutUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqKickOutUser* ReqKickOutUser::New(::google::protobuf::Arena* arena) const {
  ReqKickOutUser* n = new ReqKickOutUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqKickOutUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqKickOutUser)
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(user_id_));
}

bool ReqKickOutUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqKickOutUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 group_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 user_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqKickOutUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqKickOutUser)
  return false;
#undef DO_
}

void ReqKickOutUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqKickOutUser)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqKickOutUser)
}

::google::protobuf::uint8* ReqKickOutUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqKickOutUser)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqKickOutUser)
  return target;
}

size_t ReqKickOutUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqKickOutUser)
  size_t total_size = 0;

  // int32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqKickOutUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqKickOutUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqKickOutUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqKickOutUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqKickOutUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqKickOutUser)
    MergeFrom(*source);
  }
}

void ReqKickOutUser::MergeFrom(const ReqKickOutUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqKickOutUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void ReqKickOutUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqKickOutUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqKickOutUser::CopyFrom(const ReqKickOutUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqKickOutUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqKickOutUser::IsInitialized() const {
  return true;
}

void ReqKickOutUser::Swap(ReqKickOutUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqKickOutUser::InternalSwap(ReqKickOutUser* other) {
  std::swap(group_id_, other->group_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqKickOutUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqKickOutUser

// int32 group_id = 1;
void ReqKickOutUser::clear_group_id() {
  group_id_ = 0;
}
::google::protobuf::int32 ReqKickOutUser::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqKickOutUser.group_id)
  return group_id_;
}
void ReqKickOutUser::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqKickOutUser.group_id)
}

// int32 user_id = 2;
void ReqKickOutUser::clear_user_id() {
  user_id_ = 0;
}
::google::protobuf::int32 ReqKickOutUser::user_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqKickOutUser.user_id)
  return user_id_;
}
void ReqKickOutUser::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqKickOutUser.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspKickOutUser::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspKickOutUser::RspKickOutUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspKickOutUser)
}
RspKickOutUser::RspKickOutUser(const RspKickOutUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspKickOutUser)
}

void RspKickOutUser::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

RspKickOutUser::~RspKickOutUser() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspKickOutUser)
  SharedDtor();
}

void RspKickOutUser::SharedDtor() {
}

void RspKickOutUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspKickOutUser::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[24].descriptor;
}

const RspKickOutUser& RspKickOutUser::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspKickOutUser* RspKickOutUser::New(::google::protobuf::Arena* arena) const {
  RspKickOutUser* n = new RspKickOutUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspKickOutUser::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspKickOutUser)
  result_ = 0;
}

bool RspKickOutUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspKickOutUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspKickOutUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspKickOutUser)
  return false;
#undef DO_
}

void RspKickOutUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspKickOutUser)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspKickOutUser)
}

::google::protobuf::uint8* RspKickOutUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspKickOutUser)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspKickOutUser)
  return target;
}

size_t RspKickOutUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspKickOutUser)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspKickOutUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspKickOutUser)
  GOOGLE_DCHECK_NE(&from, this);
  const RspKickOutUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspKickOutUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspKickOutUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspKickOutUser)
    MergeFrom(*source);
  }
}

void RspKickOutUser::MergeFrom(const RspKickOutUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspKickOutUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspKickOutUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspKickOutUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspKickOutUser::CopyFrom(const RspKickOutUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspKickOutUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspKickOutUser::IsInitialized() const {
  return true;
}

void RspKickOutUser::Swap(RspKickOutUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspKickOutUser::InternalSwap(RspKickOutUser* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspKickOutUser::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspKickOutUser

// int32 result = 1;
void RspKickOutUser::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspKickOutUser::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspKickOutUser.result)
  return result_;
}
void RspKickOutUser::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspKickOutUser.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileFragment::kMaxFragmentFieldNumber;
const int FileFragment::kFragmentIndexFieldNumber;
const int FileFragment::kFragmentContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileFragment::FileFragment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.FileFragment)
}
FileFragment::FileFragment(const FileFragment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fragment_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fragment_content().size() > 0) {
    fragment_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fragment_content_);
  }
  ::memcpy(&max_fragment_, &from.max_fragment_,
    reinterpret_cast<char*>(&fragment_index_) -
    reinterpret_cast<char*>(&max_fragment_) + sizeof(fragment_index_));
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.FileFragment)
}

void FileFragment::SharedCtor() {
  fragment_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_fragment_, 0, reinterpret_cast<char*>(&fragment_index_) -
    reinterpret_cast<char*>(&max_fragment_) + sizeof(fragment_index_));
  _cached_size_ = 0;
}

FileFragment::~FileFragment() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.FileFragment)
  SharedDtor();
}

void FileFragment::SharedDtor() {
  fragment_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileFragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileFragment::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[25].descriptor;
}

const FileFragment& FileFragment::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileFragment* FileFragment::New(::google::protobuf::Arena* arena) const {
  FileFragment* n = new FileFragment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileFragment::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.FileFragment)
  fragment_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_fragment_, 0, reinterpret_cast<char*>(&fragment_index_) -
    reinterpret_cast<char*>(&max_fragment_) + sizeof(fragment_index_));
}

bool FileFragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.FileFragment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_fragment = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_fragment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fragment_index = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragment_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes fragment_content = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fragment_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.FileFragment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.FileFragment)
  return false;
#undef DO_
}

void FileFragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.FileFragment)
  // int32 max_fragment = 1;
  if (this->max_fragment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_fragment(), output);
  }

  // int32 fragment_index = 2;
  if (this->fragment_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fragment_index(), output);
  }

  // bytes fragment_content = 3;
  if (this->fragment_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->fragment_content(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.FileFragment)
}

::google::protobuf::uint8* FileFragment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.FileFragment)
  // int32 max_fragment = 1;
  if (this->max_fragment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_fragment(), target);
  }

  // int32 fragment_index = 2;
  if (this->fragment_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fragment_index(), target);
  }

  // bytes fragment_content = 3;
  if (this->fragment_content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->fragment_content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.FileFragment)
  return target;
}

size_t FileFragment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.FileFragment)
  size_t total_size = 0;

  // bytes fragment_content = 3;
  if (this->fragment_content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fragment_content());
  }

  // int32 max_fragment = 1;
  if (this->max_fragment() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_fragment());
  }

  // int32 fragment_index = 2;
  if (this->fragment_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fragment_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileFragment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.FileFragment)
  GOOGLE_DCHECK_NE(&from, this);
  const FileFragment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileFragment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.FileFragment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.FileFragment)
    MergeFrom(*source);
  }
}

void FileFragment::MergeFrom(const FileFragment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.FileFragment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.fragment_content().size() > 0) {

    fragment_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fragment_content_);
  }
  if (from.max_fragment() != 0) {
    set_max_fragment(from.max_fragment());
  }
  if (from.fragment_index() != 0) {
    set_fragment_index(from.fragment_index());
  }
}

void FileFragment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.FileFragment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileFragment::CopyFrom(const FileFragment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.FileFragment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileFragment::IsInitialized() const {
  return true;
}

void FileFragment::Swap(FileFragment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileFragment::InternalSwap(FileFragment* other) {
  fragment_content_.Swap(&other->fragment_content_);
  std::swap(max_fragment_, other->max_fragment_);
  std::swap(fragment_index_, other->fragment_index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileFragment::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileFragment

// int32 max_fragment = 1;
void FileFragment::clear_max_fragment() {
  max_fragment_ = 0;
}
::google::protobuf::int32 FileFragment::max_fragment() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.FileFragment.max_fragment)
  return max_fragment_;
}
void FileFragment::set_max_fragment(::google::protobuf::int32 value) {
  
  max_fragment_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.FileFragment.max_fragment)
}

// int32 fragment_index = 2;
void FileFragment::clear_fragment_index() {
  fragment_index_ = 0;
}
::google::protobuf::int32 FileFragment::fragment_index() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.FileFragment.fragment_index)
  return fragment_index_;
}
void FileFragment::set_fragment_index(::google::protobuf::int32 value) {
  
  fragment_index_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.FileFragment.fragment_index)
}

// bytes fragment_content = 3;
void FileFragment::clear_fragment_content() {
  fragment_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileFragment::fragment_content() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.FileFragment.fragment_content)
  return fragment_content_.GetNoArena();
}
void FileFragment::set_fragment_content(const ::std::string& value) {
  
  fragment_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.FileFragment.fragment_content)
}
#if LANG_CXX11
void FileFragment::set_fragment_content(::std::string&& value) {
  
  fragment_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.FileFragment.fragment_content)
}
#endif
void FileFragment::set_fragment_content(const char* value) {
  
  fragment_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.FileFragment.fragment_content)
}
void FileFragment::set_fragment_content(const void* value, size_t size) {
  
  fragment_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.FileFragment.fragment_content)
}
::std::string* FileFragment::mutable_fragment_content() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.FileFragment.fragment_content)
  return fragment_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileFragment::release_fragment_content() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.FileFragment.fragment_content)
  
  return fragment_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileFragment::set_allocated_fragment_content(::std::string* fragment_content) {
  if (fragment_content != NULL) {
    
  } else {
    
  }
  fragment_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fragment_content);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.FileFragment.fragment_content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqPutFile::kGroupIdFieldNumber;
const int ReqPutFile::kFilePathFieldNumber;
const int ReqPutFile::kFragmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqPutFile::ReqPutFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqPutFile)
}
ReqPutFile::ReqPutFile(const ReqPutFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.has_fragment()) {
    fragment_ = new ::spaceless::protocol::FileFragment(*from.fragment_);
  } else {
    fragment_ = NULL;
  }
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqPutFile)
}

void ReqPutFile::SharedCtor() {
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fragment_, 0, reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&fragment_) + sizeof(group_id_));
  _cached_size_ = 0;
}

ReqPutFile::~ReqPutFile() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqPutFile)
  SharedDtor();
}

void ReqPutFile::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete fragment_;
  }
}

void ReqPutFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPutFile::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[26].descriptor;
}

const ReqPutFile& ReqPutFile::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqPutFile* ReqPutFile::New(::google::protobuf::Arena* arena) const {
  ReqPutFile* n = new ReqPutFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqPutFile::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqPutFile)
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && fragment_ != NULL) {
    delete fragment_;
  }
  fragment_ = NULL;
  group_id_ = 0;
}

bool ReqPutFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqPutFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 group_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_path = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.ReqPutFile.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spaceless.protocol.FileFragment fragment = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fragment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqPutFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqPutFile)
  return false;
#undef DO_
}

void ReqPutFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqPutFile)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // string file_path = 2;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqPutFile.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_path(), output);
  }

  // .spaceless.protocol.FileFragment fragment = 3;
  if (this->has_fragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fragment_, output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqPutFile)
}

::google::protobuf::uint8* ReqPutFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqPutFile)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // string file_path = 2;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqPutFile.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_path(), target);
  }

  // .spaceless.protocol.FileFragment fragment = 3;
  if (this->has_fragment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->fragment_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqPutFile)
  return target;
}

size_t ReqPutFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqPutFile)
  size_t total_size = 0;

  // string file_path = 2;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // .spaceless.protocol.FileFragment fragment = 3;
  if (this->has_fragment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fragment_);
  }

  // int32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPutFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqPutFile)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqPutFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqPutFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqPutFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqPutFile)
    MergeFrom(*source);
  }
}

void ReqPutFile::MergeFrom(const ReqPutFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqPutFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.has_fragment()) {
    mutable_fragment()->::spaceless::protocol::FileFragment::MergeFrom(from.fragment());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void ReqPutFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqPutFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPutFile::CopyFrom(const ReqPutFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqPutFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPutFile::IsInitialized() const {
  return true;
}

void ReqPutFile::Swap(ReqPutFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqPutFile::InternalSwap(ReqPutFile* other) {
  file_path_.Swap(&other->file_path_);
  std::swap(fragment_, other->fragment_);
  std::swap(group_id_, other->group_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqPutFile::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqPutFile

// int32 group_id = 1;
void ReqPutFile::clear_group_id() {
  group_id_ = 0;
}
::google::protobuf::int32 ReqPutFile::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqPutFile.group_id)
  return group_id_;
}
void ReqPutFile::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqPutFile.group_id)
}

// string file_path = 2;
void ReqPutFile::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqPutFile::file_path() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqPutFile.file_path)
  return file_path_.GetNoArena();
}
void ReqPutFile::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqPutFile.file_path)
}
#if LANG_CXX11
void ReqPutFile::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqPutFile.file_path)
}
#endif
void ReqPutFile::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqPutFile.file_path)
}
void ReqPutFile::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqPutFile.file_path)
}
::std::string* ReqPutFile::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqPutFile.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqPutFile::release_file_path() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqPutFile.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqPutFile::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqPutFile.file_path)
}

// .spaceless.protocol.FileFragment fragment = 3;
bool ReqPutFile::has_fragment() const {
  return this != internal_default_instance() && fragment_ != NULL;
}
void ReqPutFile::clear_fragment() {
  if (GetArenaNoVirtual() == NULL && fragment_ != NULL) delete fragment_;
  fragment_ = NULL;
}
const ::spaceless::protocol::FileFragment& ReqPutFile::fragment() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqPutFile.fragment)
  return fragment_ != NULL ? *fragment_
                         : *::spaceless::protocol::FileFragment::internal_default_instance();
}
::spaceless::protocol::FileFragment* ReqPutFile::mutable_fragment() {
  
  if (fragment_ == NULL) {
    fragment_ = new ::spaceless::protocol::FileFragment;
  }
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqPutFile.fragment)
  return fragment_;
}
::spaceless::protocol::FileFragment* ReqPutFile::release_fragment() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqPutFile.fragment)
  
  ::spaceless::protocol::FileFragment* temp = fragment_;
  fragment_ = NULL;
  return temp;
}
void ReqPutFile::set_allocated_fragment(::spaceless::protocol::FileFragment* fragment) {
  delete fragment_;
  fragment_ = fragment;
  if (fragment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqPutFile.fragment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspPutFile::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspPutFile::RspPutFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspPutFile)
}
RspPutFile::RspPutFile(const RspPutFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspPutFile)
}

void RspPutFile::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

RspPutFile::~RspPutFile() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspPutFile)
  SharedDtor();
}

void RspPutFile::SharedDtor() {
}

void RspPutFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspPutFile::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[27].descriptor;
}

const RspPutFile& RspPutFile::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspPutFile* RspPutFile::New(::google::protobuf::Arena* arena) const {
  RspPutFile* n = new RspPutFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspPutFile::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspPutFile)
  result_ = 0;
}

bool RspPutFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspPutFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspPutFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspPutFile)
  return false;
#undef DO_
}

void RspPutFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspPutFile)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspPutFile)
}

::google::protobuf::uint8* RspPutFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspPutFile)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspPutFile)
  return target;
}

size_t RspPutFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspPutFile)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspPutFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspPutFile)
  GOOGLE_DCHECK_NE(&from, this);
  const RspPutFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspPutFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspPutFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspPutFile)
    MergeFrom(*source);
  }
}

void RspPutFile::MergeFrom(const RspPutFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspPutFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspPutFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspPutFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspPutFile::CopyFrom(const RspPutFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspPutFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspPutFile::IsInitialized() const {
  return true;
}

void RspPutFile::Swap(RspPutFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspPutFile::InternalSwap(RspPutFile* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspPutFile::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspPutFile

// int32 result = 1;
void RspPutFile::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspPutFile::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspPutFile.result)
  return result_;
}
void RspPutFile::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspPutFile.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqGetFile::kGroupIdFieldNumber;
const int ReqGetFile::kFilePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqGetFile::ReqGetFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqGetFile)
}
ReqGetFile::ReqGetFile(const ReqGetFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqGetFile)
}

void ReqGetFile::SharedCtor() {
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0;
  _cached_size_ = 0;
}

ReqGetFile::~ReqGetFile() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqGetFile)
  SharedDtor();
}

void ReqGetFile::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqGetFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetFile::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[28].descriptor;
}

const ReqGetFile& ReqGetFile::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqGetFile* ReqGetFile::New(::google::protobuf::Arena* arena) const {
  ReqGetFile* n = new ReqGetFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqGetFile::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqGetFile)
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0;
}

bool ReqGetFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqGetFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 group_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_path = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.ReqGetFile.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqGetFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqGetFile)
  return false;
#undef DO_
}

void ReqGetFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqGetFile)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // string file_path = 2;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqGetFile.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqGetFile)
}

::google::protobuf::uint8* ReqGetFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqGetFile)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // string file_path = 2;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqGetFile.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqGetFile)
  return target;
}

size_t ReqGetFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqGetFile)
  size_t total_size = 0;

  // string file_path = 2;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // int32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqGetFile)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqGetFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqGetFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqGetFile)
    MergeFrom(*source);
  }
}

void ReqGetFile::MergeFrom(const ReqGetFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqGetFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void ReqGetFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqGetFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetFile::CopyFrom(const ReqGetFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqGetFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetFile::IsInitialized() const {
  return true;
}

void ReqGetFile::Swap(ReqGetFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqGetFile::InternalSwap(ReqGetFile* other) {
  file_path_.Swap(&other->file_path_);
  std::swap(group_id_, other->group_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqGetFile::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqGetFile

// int32 group_id = 1;
void ReqGetFile::clear_group_id() {
  group_id_ = 0;
}
::google::protobuf::int32 ReqGetFile::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqGetFile.group_id)
  return group_id_;
}
void ReqGetFile::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqGetFile.group_id)
}

// string file_path = 2;
void ReqGetFile::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqGetFile::file_path() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqGetFile.file_path)
  return file_path_.GetNoArena();
}
void ReqGetFile::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqGetFile.file_path)
}
#if LANG_CXX11
void ReqGetFile::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqGetFile.file_path)
}
#endif
void ReqGetFile::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqGetFile.file_path)
}
void ReqGetFile::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqGetFile.file_path)
}
::std::string* ReqGetFile::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqGetFile.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqGetFile::release_file_path() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqGetFile.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqGetFile::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqGetFile.file_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspGetFile::kResultFieldNumber;
const int RspGetFile::kFragmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspGetFile::RspGetFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspGetFile)
}
RspGetFile::RspGetFile(const RspGetFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fragment()) {
    fragment_ = new ::spaceless::protocol::FileFragment(*from.fragment_);
  } else {
    fragment_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspGetFile)
}

void RspGetFile::SharedCtor() {
  ::memset(&fragment_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&fragment_) + sizeof(result_));
  _cached_size_ = 0;
}

RspGetFile::~RspGetFile() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspGetFile)
  SharedDtor();
}

void RspGetFile::SharedDtor() {
  if (this != internal_default_instance()) {
    delete fragment_;
  }
}

void RspGetFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGetFile::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[29].descriptor;
}

const RspGetFile& RspGetFile::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspGetFile* RspGetFile::New(::google::protobuf::Arena* arena) const {
  RspGetFile* n = new RspGetFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspGetFile::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspGetFile)
  if (GetArenaNoVirtual() == NULL && fragment_ != NULL) {
    delete fragment_;
  }
  fragment_ = NULL;
  result_ = 0;
}

bool RspGetFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspGetFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spaceless.protocol.FileFragment fragment = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fragment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspGetFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspGetFile)
  return false;
#undef DO_
}

void RspGetFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspGetFile)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // .spaceless.protocol.FileFragment fragment = 2;
  if (this->has_fragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fragment_, output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspGetFile)
}

::google::protobuf::uint8* RspGetFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspGetFile)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // .spaceless.protocol.FileFragment fragment = 2;
  if (this->has_fragment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fragment_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspGetFile)
  return target;
}

size_t RspGetFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspGetFile)
  size_t total_size = 0;

  // .spaceless.protocol.FileFragment fragment = 2;
  if (this->has_fragment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fragment_);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGetFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspGetFile)
  GOOGLE_DCHECK_NE(&from, this);
  const RspGetFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspGetFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspGetFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspGetFile)
    MergeFrom(*source);
  }
}

void RspGetFile::MergeFrom(const RspGetFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspGetFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fragment()) {
    mutable_fragment()->::spaceless::protocol::FileFragment::MergeFrom(from.fragment());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspGetFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspGetFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetFile::CopyFrom(const RspGetFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspGetFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetFile::IsInitialized() const {
  return true;
}

void RspGetFile::Swap(RspGetFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspGetFile::InternalSwap(RspGetFile* other) {
  std::swap(fragment_, other->fragment_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspGetFile::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspGetFile

// int32 result = 1;
void RspGetFile::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspGetFile::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspGetFile.result)
  return result_;
}
void RspGetFile::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspGetFile.result)
}

// .spaceless.protocol.FileFragment fragment = 2;
bool RspGetFile::has_fragment() const {
  return this != internal_default_instance() && fragment_ != NULL;
}
void RspGetFile::clear_fragment() {
  if (GetArenaNoVirtual() == NULL && fragment_ != NULL) delete fragment_;
  fragment_ = NULL;
}
const ::spaceless::protocol::FileFragment& RspGetFile::fragment() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspGetFile.fragment)
  return fragment_ != NULL ? *fragment_
                         : *::spaceless::protocol::FileFragment::internal_default_instance();
}
::spaceless::protocol::FileFragment* RspGetFile::mutable_fragment() {
  
  if (fragment_ == NULL) {
    fragment_ = new ::spaceless::protocol::FileFragment;
  }
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.RspGetFile.fragment)
  return fragment_;
}
::spaceless::protocol::FileFragment* RspGetFile::release_fragment() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.RspGetFile.fragment)
  
  ::spaceless::protocol::FileFragment* temp = fragment_;
  fragment_ = NULL;
  return temp;
}
void RspGetFile::set_allocated_fragment(::spaceless::protocol::FileFragment* fragment) {
  delete fragment_;
  fragment_ = fragment;
  if (fragment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.RspGetFile.fragment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCreatePath::kGroupIdFieldNumber;
const int ReqCreatePath::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCreatePath::ReqCreatePath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqCreatePath)
}
ReqCreatePath::ReqCreatePath(const ReqCreatePath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqCreatePath)
}

void ReqCreatePath::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0;
  _cached_size_ = 0;
}

ReqCreatePath::~ReqCreatePath() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqCreatePath)
  SharedDtor();
}

void ReqCreatePath::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqCreatePath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCreatePath::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[30].descriptor;
}

const ReqCreatePath& ReqCreatePath::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqCreatePath* ReqCreatePath::New(::google::protobuf::Arena* arena) const {
  ReqCreatePath* n = new ReqCreatePath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqCreatePath::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqCreatePath)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0;
}

bool ReqCreatePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqCreatePath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 group_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.ReqCreatePath.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqCreatePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqCreatePath)
  return false;
#undef DO_
}

void ReqCreatePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqCreatePath)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqCreatePath.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqCreatePath)
}

::google::protobuf::uint8* ReqCreatePath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqCreatePath)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqCreatePath.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqCreatePath)
  return target;
}

size_t ReqCreatePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqCreatePath)
  size_t total_size = 0;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // int32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCreatePath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqCreatePath)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCreatePath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCreatePath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqCreatePath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqCreatePath)
    MergeFrom(*source);
  }
}

void ReqCreatePath::MergeFrom(const ReqCreatePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqCreatePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void ReqCreatePath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqCreatePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreatePath::CopyFrom(const ReqCreatePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqCreatePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreatePath::IsInitialized() const {
  return true;
}

void ReqCreatePath::Swap(ReqCreatePath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCreatePath::InternalSwap(ReqCreatePath* other) {
  path_.Swap(&other->path_);
  std::swap(group_id_, other->group_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqCreatePath::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqCreatePath

// int32 group_id = 1;
void ReqCreatePath::clear_group_id() {
  group_id_ = 0;
}
::google::protobuf::int32 ReqCreatePath::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqCreatePath.group_id)
  return group_id_;
}
void ReqCreatePath::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqCreatePath.group_id)
}

// string path = 2;
void ReqCreatePath::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqCreatePath::path() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqCreatePath.path)
  return path_.GetNoArena();
}
void ReqCreatePath::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqCreatePath.path)
}
#if LANG_CXX11
void ReqCreatePath::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqCreatePath.path)
}
#endif
void ReqCreatePath::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqCreatePath.path)
}
void ReqCreatePath::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqCreatePath.path)
}
::std::string* ReqCreatePath::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqCreatePath.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqCreatePath::release_path() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqCreatePath.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqCreatePath::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqCreatePath.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspCreatePath::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspCreatePath::RspCreatePath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspCreatePath)
}
RspCreatePath::RspCreatePath(const RspCreatePath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspCreatePath)
}

void RspCreatePath::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

RspCreatePath::~RspCreatePath() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspCreatePath)
  SharedDtor();
}

void RspCreatePath::SharedDtor() {
}

void RspCreatePath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspCreatePath::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[31].descriptor;
}

const RspCreatePath& RspCreatePath::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspCreatePath* RspCreatePath::New(::google::protobuf::Arena* arena) const {
  RspCreatePath* n = new RspCreatePath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspCreatePath::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspCreatePath)
  result_ = 0;
}

bool RspCreatePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspCreatePath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspCreatePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspCreatePath)
  return false;
#undef DO_
}

void RspCreatePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspCreatePath)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspCreatePath)
}

::google::protobuf::uint8* RspCreatePath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspCreatePath)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspCreatePath)
  return target;
}

size_t RspCreatePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspCreatePath)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspCreatePath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspCreatePath)
  GOOGLE_DCHECK_NE(&from, this);
  const RspCreatePath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspCreatePath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspCreatePath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspCreatePath)
    MergeFrom(*source);
  }
}

void RspCreatePath::MergeFrom(const RspCreatePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspCreatePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspCreatePath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspCreatePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCreatePath::CopyFrom(const RspCreatePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspCreatePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCreatePath::IsInitialized() const {
  return true;
}

void RspCreatePath::Swap(RspCreatePath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspCreatePath::InternalSwap(RspCreatePath* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspCreatePath::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspCreatePath

// int32 result = 1;
void RspCreatePath::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspCreatePath::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspCreatePath.result)
  return result_;
}
void RspCreatePath::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspCreatePath.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRemovePath::kGroupIdFieldNumber;
const int ReqRemovePath::kPathFieldNumber;
const int ReqRemovePath::kForceRemoveAllFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRemovePath::ReqRemovePath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.ReqRemovePath)
}
ReqRemovePath::ReqRemovePath(const ReqRemovePath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&group_id_, &from.group_id_,
    reinterpret_cast<char*>(&force_remove_all_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(force_remove_all_));
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.ReqRemovePath)
}

void ReqRemovePath::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&force_remove_all_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(force_remove_all_));
  _cached_size_ = 0;
}

ReqRemovePath::~ReqRemovePath() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.ReqRemovePath)
  SharedDtor();
}

void ReqRemovePath::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqRemovePath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRemovePath::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[32].descriptor;
}

const ReqRemovePath& ReqRemovePath::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqRemovePath* ReqRemovePath::New(::google::protobuf::Arena* arena) const {
  ReqRemovePath* n = new ReqRemovePath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRemovePath::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.ReqRemovePath)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&force_remove_all_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(force_remove_all_));
}

bool ReqRemovePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.ReqRemovePath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 group_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spaceless.protocol.ReqRemovePath.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool force_remove_all = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_remove_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.ReqRemovePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.ReqRemovePath)
  return false;
#undef DO_
}

void ReqRemovePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.ReqRemovePath)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqRemovePath.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // bool force_remove_all = 3;
  if (this->force_remove_all() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->force_remove_all(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.ReqRemovePath)
}

::google::protobuf::uint8* ReqRemovePath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.ReqRemovePath)
  // int32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spaceless.protocol.ReqRemovePath.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // bool force_remove_all = 3;
  if (this->force_remove_all() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->force_remove_all(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.ReqRemovePath)
  return target;
}

size_t ReqRemovePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.ReqRemovePath)
  size_t total_size = 0;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // int32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  // bool force_remove_all = 3;
  if (this->force_remove_all() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRemovePath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.ReqRemovePath)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRemovePath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRemovePath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.ReqRemovePath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.ReqRemovePath)
    MergeFrom(*source);
  }
}

void ReqRemovePath::MergeFrom(const ReqRemovePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.ReqRemovePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.force_remove_all() != 0) {
    set_force_remove_all(from.force_remove_all());
  }
}

void ReqRemovePath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.ReqRemovePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRemovePath::CopyFrom(const ReqRemovePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.ReqRemovePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRemovePath::IsInitialized() const {
  return true;
}

void ReqRemovePath::Swap(ReqRemovePath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRemovePath::InternalSwap(ReqRemovePath* other) {
  path_.Swap(&other->path_);
  std::swap(group_id_, other->group_id_);
  std::swap(force_remove_all_, other->force_remove_all_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRemovePath::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRemovePath

// int32 group_id = 1;
void ReqRemovePath::clear_group_id() {
  group_id_ = 0;
}
::google::protobuf::int32 ReqRemovePath::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRemovePath.group_id)
  return group_id_;
}
void ReqRemovePath::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRemovePath.group_id)
}

// string path = 2;
void ReqRemovePath::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReqRemovePath::path() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRemovePath.path)
  return path_.GetNoArena();
}
void ReqRemovePath::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRemovePath.path)
}
#if LANG_CXX11
void ReqRemovePath::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqRemovePath.path)
}
#endif
void ReqRemovePath::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqRemovePath.path)
}
void ReqRemovePath::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqRemovePath.path)
}
::std::string* ReqRemovePath::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqRemovePath.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqRemovePath::release_path() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqRemovePath.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqRemovePath::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqRemovePath.path)
}

// bool force_remove_all = 3;
void ReqRemovePath::clear_force_remove_all() {
  force_remove_all_ = false;
}
bool ReqRemovePath::force_remove_all() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRemovePath.force_remove_all)
  return force_remove_all_;
}
void ReqRemovePath::set_force_remove_all(bool value) {
  
  force_remove_all_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRemovePath.force_remove_all)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspRemovePath::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspRemovePath::RspRemovePath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:spaceless.protocol.RspRemovePath)
}
RspRemovePath::RspRemovePath(const RspRemovePath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:spaceless.protocol.RspRemovePath)
}

void RspRemovePath::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

RspRemovePath::~RspRemovePath() {
  // @@protoc_insertion_point(destructor:spaceless.protocol.RspRemovePath)
  SharedDtor();
}

void RspRemovePath::SharedDtor() {
}

void RspRemovePath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspRemovePath::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[33].descriptor;
}

const RspRemovePath& RspRemovePath::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspRemovePath* RspRemovePath::New(::google::protobuf::Arena* arena) const {
  RspRemovePath* n = new RspRemovePath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspRemovePath::Clear() {
// @@protoc_insertion_point(message_clear_start:spaceless.protocol.RspRemovePath)
  result_ = 0;
}

bool RspRemovePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spaceless.protocol.RspRemovePath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spaceless.protocol.RspRemovePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spaceless.protocol.RspRemovePath)
  return false;
#undef DO_
}

void RspRemovePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spaceless.protocol.RspRemovePath)
  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:spaceless.protocol.RspRemovePath)
}

::google::protobuf::uint8* RspRemovePath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spaceless.protocol.RspRemovePath)
  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spaceless.protocol.RspRemovePath)
  return target;
}

size_t RspRemovePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spaceless.protocol.RspRemovePath)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspRemovePath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spaceless.protocol.RspRemovePath)
  GOOGLE_DCHECK_NE(&from, this);
  const RspRemovePath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspRemovePath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spaceless.protocol.RspRemovePath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spaceless.protocol.RspRemovePath)
    MergeFrom(*source);
  }
}

void RspRemovePath::MergeFrom(const RspRemovePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spaceless.protocol.RspRemovePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RspRemovePath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spaceless.protocol.RspRemovePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspRemovePath::CopyFrom(const RspRemovePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spaceless.protocol.RspRemovePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspRemovePath::IsInitialized() const {
  return true;
}

void RspRemovePath::Swap(RspRemovePath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspRemovePath::InternalSwap(RspRemovePath* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspRemovePath::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspRemovePath

// int32 result = 1;
void RspRemovePath::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 RspRemovePath::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRemovePath.result)
  return result_;
}
void RspRemovePath::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspRemovePath.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace spaceless

// @@protoc_insertion_point(global_scope)
