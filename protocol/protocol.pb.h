// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_INCLUDED_protocol_2eproto
#define PROTOBUF_INCLUDED_protocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto 

namespace protobuf_protocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[43];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protocol_2eproto
namespace spaceless {
namespace protocol {
class ReqAssignAsManager;
class ReqAssignAsManagerDefaultTypeInternal;
extern ReqAssignAsManagerDefaultTypeInternal _ReqAssignAsManager_default_instance_;
class ReqAssignAsMember;
class ReqAssignAsMemberDefaultTypeInternal;
extern ReqAssignAsMemberDefaultTypeInternal _ReqAssignAsMember_default_instance_;
class ReqCreatePath;
class ReqCreatePathDefaultTypeInternal;
extern ReqCreatePathDefaultTypeInternal _ReqCreatePath_default_instance_;
class ReqFindGroup;
class ReqFindGroupDefaultTypeInternal;
extern ReqFindGroupDefaultTypeInternal _ReqFindGroup_default_instance_;
class ReqFindUser;
class ReqFindUserDefaultTypeInternal;
extern ReqFindUserDefaultTypeInternal _ReqFindUser_default_instance_;
class ReqGetFile;
class ReqGetFileDefaultTypeInternal;
extern ReqGetFileDefaultTypeInternal _ReqGetFile_default_instance_;
class ReqGetFileSession;
class ReqGetFileSessionDefaultTypeInternal;
extern ReqGetFileSessionDefaultTypeInternal _ReqGetFileSession_default_instance_;
class ReqJoinGroup;
class ReqJoinGroupDefaultTypeInternal;
extern ReqJoinGroupDefaultTypeInternal _ReqJoinGroup_default_instance_;
class ReqKickOutUser;
class ReqKickOutUserDefaultTypeInternal;
extern ReqKickOutUserDefaultTypeInternal _ReqKickOutUser_default_instance_;
class ReqLoginUser;
class ReqLoginUserDefaultTypeInternal;
extern ReqLoginUserDefaultTypeInternal _ReqLoginUser_default_instance_;
class ReqNodeGetFileSession;
class ReqNodeGetFileSessionDefaultTypeInternal;
extern ReqNodeGetFileSessionDefaultTypeInternal _ReqNodeGetFileSession_default_instance_;
class ReqNodePutFileSession;
class ReqNodePutFileSessionDefaultTypeInternal;
extern ReqNodePutFileSessionDefaultTypeInternal _ReqNodePutFileSession_default_instance_;
class ReqPing;
class ReqPingDefaultTypeInternal;
extern ReqPingDefaultTypeInternal _ReqPing_default_instance_;
class ReqPutFile;
class ReqPutFileDefaultTypeInternal;
extern ReqPutFileDefaultTypeInternal _ReqPutFile_default_instance_;
class ReqPutFileSession;
class ReqPutFileSessionDefaultTypeInternal;
extern ReqPutFileSessionDefaultTypeInternal _ReqPutFileSession_default_instance_;
class ReqRegisterGroup;
class ReqRegisterGroupDefaultTypeInternal;
extern ReqRegisterGroupDefaultTypeInternal _ReqRegisterGroup_default_instance_;
class ReqRegisterUser;
class ReqRegisterUserDefaultTypeInternal;
extern ReqRegisterUserDefaultTypeInternal _ReqRegisterUser_default_instance_;
class ReqRemoveGroup;
class ReqRemoveGroupDefaultTypeInternal;
extern ReqRemoveGroupDefaultTypeInternal _ReqRemoveGroup_default_instance_;
class ReqRemovePath;
class ReqRemovePathDefaultTypeInternal;
extern ReqRemovePathDefaultTypeInternal _ReqRemovePath_default_instance_;
class ReqRemoveUser;
class ReqRemoveUserDefaultTypeInternal;
extern ReqRemoveUserDefaultTypeInternal _ReqRemoveUser_default_instance_;
class RspAssignAsManager;
class RspAssignAsManagerDefaultTypeInternal;
extern RspAssignAsManagerDefaultTypeInternal _RspAssignAsManager_default_instance_;
class RspAssignAsMember;
class RspAssignAsMemberDefaultTypeInternal;
extern RspAssignAsMemberDefaultTypeInternal _RspAssignAsMember_default_instance_;
class RspCreatePath;
class RspCreatePathDefaultTypeInternal;
extern RspCreatePathDefaultTypeInternal _RspCreatePath_default_instance_;
class RspError;
class RspErrorDefaultTypeInternal;
extern RspErrorDefaultTypeInternal _RspError_default_instance_;
class RspFindGroup;
class RspFindGroupDefaultTypeInternal;
extern RspFindGroupDefaultTypeInternal _RspFindGroup_default_instance_;
class RspFindUser;
class RspFindUserDefaultTypeInternal;
extern RspFindUserDefaultTypeInternal _RspFindUser_default_instance_;
class RspGetFile;
class RspGetFileDefaultTypeInternal;
extern RspGetFileDefaultTypeInternal _RspGetFile_default_instance_;
class RspGetFileSession;
class RspGetFileSessionDefaultTypeInternal;
extern RspGetFileSessionDefaultTypeInternal _RspGetFileSession_default_instance_;
class RspJoinGroup;
class RspJoinGroupDefaultTypeInternal;
extern RspJoinGroupDefaultTypeInternal _RspJoinGroup_default_instance_;
class RspKickOutUser;
class RspKickOutUserDefaultTypeInternal;
extern RspKickOutUserDefaultTypeInternal _RspKickOutUser_default_instance_;
class RspLoginUser;
class RspLoginUserDefaultTypeInternal;
extern RspLoginUserDefaultTypeInternal _RspLoginUser_default_instance_;
class RspNodeGetFileSession;
class RspNodeGetFileSessionDefaultTypeInternal;
extern RspNodeGetFileSessionDefaultTypeInternal _RspNodeGetFileSession_default_instance_;
class RspNodePutFileSession;
class RspNodePutFileSessionDefaultTypeInternal;
extern RspNodePutFileSessionDefaultTypeInternal _RspNodePutFileSession_default_instance_;
class RspPing;
class RspPingDefaultTypeInternal;
extern RspPingDefaultTypeInternal _RspPing_default_instance_;
class RspPutFile;
class RspPutFileDefaultTypeInternal;
extern RspPutFileDefaultTypeInternal _RspPutFile_default_instance_;
class RspPutFileSession;
class RspPutFileSessionDefaultTypeInternal;
extern RspPutFileSessionDefaultTypeInternal _RspPutFileSession_default_instance_;
class RspRegisterGroup;
class RspRegisterGroupDefaultTypeInternal;
extern RspRegisterGroupDefaultTypeInternal _RspRegisterGroup_default_instance_;
class RspRegisterUser;
class RspRegisterUserDefaultTypeInternal;
extern RspRegisterUserDefaultTypeInternal _RspRegisterUser_default_instance_;
class RspRemoveGroup;
class RspRemoveGroupDefaultTypeInternal;
extern RspRemoveGroupDefaultTypeInternal _RspRemoveGroup_default_instance_;
class RspRemovePath;
class RspRemovePathDefaultTypeInternal;
extern RspRemovePathDefaultTypeInternal _RspRemovePath_default_instance_;
class RspRemoveUser;
class RspRemoveUserDefaultTypeInternal;
extern RspRemoveUserDefaultTypeInternal _RspRemoveUser_default_instance_;
class SharingGroup;
class SharingGroupDefaultTypeInternal;
extern SharingGroupDefaultTypeInternal _SharingGroup_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace protocol
}  // namespace spaceless
namespace google {
namespace protobuf {
template<> ::spaceless::protocol::ReqAssignAsManager* Arena::CreateMaybeMessage<::spaceless::protocol::ReqAssignAsManager>(Arena*);
template<> ::spaceless::protocol::ReqAssignAsMember* Arena::CreateMaybeMessage<::spaceless::protocol::ReqAssignAsMember>(Arena*);
template<> ::spaceless::protocol::ReqCreatePath* Arena::CreateMaybeMessage<::spaceless::protocol::ReqCreatePath>(Arena*);
template<> ::spaceless::protocol::ReqFindGroup* Arena::CreateMaybeMessage<::spaceless::protocol::ReqFindGroup>(Arena*);
template<> ::spaceless::protocol::ReqFindUser* Arena::CreateMaybeMessage<::spaceless::protocol::ReqFindUser>(Arena*);
template<> ::spaceless::protocol::ReqGetFile* Arena::CreateMaybeMessage<::spaceless::protocol::ReqGetFile>(Arena*);
template<> ::spaceless::protocol::ReqGetFileSession* Arena::CreateMaybeMessage<::spaceless::protocol::ReqGetFileSession>(Arena*);
template<> ::spaceless::protocol::ReqJoinGroup* Arena::CreateMaybeMessage<::spaceless::protocol::ReqJoinGroup>(Arena*);
template<> ::spaceless::protocol::ReqKickOutUser* Arena::CreateMaybeMessage<::spaceless::protocol::ReqKickOutUser>(Arena*);
template<> ::spaceless::protocol::ReqLoginUser* Arena::CreateMaybeMessage<::spaceless::protocol::ReqLoginUser>(Arena*);
template<> ::spaceless::protocol::ReqNodeGetFileSession* Arena::CreateMaybeMessage<::spaceless::protocol::ReqNodeGetFileSession>(Arena*);
template<> ::spaceless::protocol::ReqNodePutFileSession* Arena::CreateMaybeMessage<::spaceless::protocol::ReqNodePutFileSession>(Arena*);
template<> ::spaceless::protocol::ReqPing* Arena::CreateMaybeMessage<::spaceless::protocol::ReqPing>(Arena*);
template<> ::spaceless::protocol::ReqPutFile* Arena::CreateMaybeMessage<::spaceless::protocol::ReqPutFile>(Arena*);
template<> ::spaceless::protocol::ReqPutFileSession* Arena::CreateMaybeMessage<::spaceless::protocol::ReqPutFileSession>(Arena*);
template<> ::spaceless::protocol::ReqRegisterGroup* Arena::CreateMaybeMessage<::spaceless::protocol::ReqRegisterGroup>(Arena*);
template<> ::spaceless::protocol::ReqRegisterUser* Arena::CreateMaybeMessage<::spaceless::protocol::ReqRegisterUser>(Arena*);
template<> ::spaceless::protocol::ReqRemoveGroup* Arena::CreateMaybeMessage<::spaceless::protocol::ReqRemoveGroup>(Arena*);
template<> ::spaceless::protocol::ReqRemovePath* Arena::CreateMaybeMessage<::spaceless::protocol::ReqRemovePath>(Arena*);
template<> ::spaceless::protocol::ReqRemoveUser* Arena::CreateMaybeMessage<::spaceless::protocol::ReqRemoveUser>(Arena*);
template<> ::spaceless::protocol::RspAssignAsManager* Arena::CreateMaybeMessage<::spaceless::protocol::RspAssignAsManager>(Arena*);
template<> ::spaceless::protocol::RspAssignAsMember* Arena::CreateMaybeMessage<::spaceless::protocol::RspAssignAsMember>(Arena*);
template<> ::spaceless::protocol::RspCreatePath* Arena::CreateMaybeMessage<::spaceless::protocol::RspCreatePath>(Arena*);
template<> ::spaceless::protocol::RspError* Arena::CreateMaybeMessage<::spaceless::protocol::RspError>(Arena*);
template<> ::spaceless::protocol::RspFindGroup* Arena::CreateMaybeMessage<::spaceless::protocol::RspFindGroup>(Arena*);
template<> ::spaceless::protocol::RspFindUser* Arena::CreateMaybeMessage<::spaceless::protocol::RspFindUser>(Arena*);
template<> ::spaceless::protocol::RspGetFile* Arena::CreateMaybeMessage<::spaceless::protocol::RspGetFile>(Arena*);
template<> ::spaceless::protocol::RspGetFileSession* Arena::CreateMaybeMessage<::spaceless::protocol::RspGetFileSession>(Arena*);
template<> ::spaceless::protocol::RspJoinGroup* Arena::CreateMaybeMessage<::spaceless::protocol::RspJoinGroup>(Arena*);
template<> ::spaceless::protocol::RspKickOutUser* Arena::CreateMaybeMessage<::spaceless::protocol::RspKickOutUser>(Arena*);
template<> ::spaceless::protocol::RspLoginUser* Arena::CreateMaybeMessage<::spaceless::protocol::RspLoginUser>(Arena*);
template<> ::spaceless::protocol::RspNodeGetFileSession* Arena::CreateMaybeMessage<::spaceless::protocol::RspNodeGetFileSession>(Arena*);
template<> ::spaceless::protocol::RspNodePutFileSession* Arena::CreateMaybeMessage<::spaceless::protocol::RspNodePutFileSession>(Arena*);
template<> ::spaceless::protocol::RspPing* Arena::CreateMaybeMessage<::spaceless::protocol::RspPing>(Arena*);
template<> ::spaceless::protocol::RspPutFile* Arena::CreateMaybeMessage<::spaceless::protocol::RspPutFile>(Arena*);
template<> ::spaceless::protocol::RspPutFileSession* Arena::CreateMaybeMessage<::spaceless::protocol::RspPutFileSession>(Arena*);
template<> ::spaceless::protocol::RspRegisterGroup* Arena::CreateMaybeMessage<::spaceless::protocol::RspRegisterGroup>(Arena*);
template<> ::spaceless::protocol::RspRegisterUser* Arena::CreateMaybeMessage<::spaceless::protocol::RspRegisterUser>(Arena*);
template<> ::spaceless::protocol::RspRemoveGroup* Arena::CreateMaybeMessage<::spaceless::protocol::RspRemoveGroup>(Arena*);
template<> ::spaceless::protocol::RspRemovePath* Arena::CreateMaybeMessage<::spaceless::protocol::RspRemovePath>(Arena*);
template<> ::spaceless::protocol::RspRemoveUser* Arena::CreateMaybeMessage<::spaceless::protocol::RspRemoveUser>(Arena*);
template<> ::spaceless::protocol::SharingGroup* Arena::CreateMaybeMessage<::spaceless::protocol::SharingGroup>(Arena*);
template<> ::spaceless::protocol::User* Arena::CreateMaybeMessage<::spaceless::protocol::User>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace spaceless {
namespace protocol {

enum MiscellaneousType {
  INVALID_MISCELLANEOUS = 0,
  MAX_FRAGMENT_CONTENT_LEN = 50000,
  MiscellaneousType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MiscellaneousType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MiscellaneousType_IsValid(int value);
const MiscellaneousType MiscellaneousType_MIN = INVALID_MISCELLANEOUS;
const MiscellaneousType MiscellaneousType_MAX = MAX_FRAGMENT_CONTENT_LEN;
const int MiscellaneousType_ARRAYSIZE = MiscellaneousType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MiscellaneousType_descriptor();
inline const ::std::string& MiscellaneousType_Name(MiscellaneousType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MiscellaneousType_descriptor(), value);
}
inline bool MiscellaneousType_Parse(
    const ::std::string& name, MiscellaneousType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MiscellaneousType>(
    MiscellaneousType_descriptor(), name, value);
}
// ===================================================================

class RspError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspError) */ {
 public:
  RspError();
  virtual ~RspError();

  RspError(const RspError& from);

  inline RspError& operator=(const RspError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspError(RspError&& from) noexcept
    : RspError() {
    *this = ::std::move(from);
  }

  inline RspError& operator=(RspError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspError* internal_default_instance() {
    return reinterpret_cast<const RspError*>(
               &_RspError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RspError* other);
  friend void swap(RspError& a, RspError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspError* New() const final {
    return CreateMaybeMessage<RspError>(NULL);
  }

  RspError* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspError>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspError& from);
  void MergeFrom(const RspError& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqPing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqPing) */ {
 public:
  ReqPing();
  virtual ~ReqPing();

  ReqPing(const ReqPing& from);

  inline ReqPing& operator=(const ReqPing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqPing(ReqPing&& from) noexcept
    : ReqPing() {
    *this = ::std::move(from);
  }

  inline ReqPing& operator=(ReqPing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqPing* internal_default_instance() {
    return reinterpret_cast<const ReqPing*>(
               &_ReqPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ReqPing* other);
  friend void swap(ReqPing& a, ReqPing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqPing* New() const final {
    return CreateMaybeMessage<ReqPing>(NULL);
  }

  ReqPing* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqPing>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqPing& from);
  void MergeFrom(const ReqPing& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqPing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 second = 1;
  void clear_second();
  static const int kSecondFieldNumber = 1;
  ::google::protobuf::int32 second() const;
  void set_second(::google::protobuf::int32 value);

  // int32 microsecond = 2;
  void clear_microsecond();
  static const int kMicrosecondFieldNumber = 2;
  ::google::protobuf::int32 microsecond() const;
  void set_microsecond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqPing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 second_;
  ::google::protobuf::int32 microsecond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspPing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspPing) */ {
 public:
  RspPing();
  virtual ~RspPing();

  RspPing(const RspPing& from);

  inline RspPing& operator=(const RspPing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspPing(RspPing&& from) noexcept
    : RspPing() {
    *this = ::std::move(from);
  }

  inline RspPing& operator=(RspPing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspPing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspPing* internal_default_instance() {
    return reinterpret_cast<const RspPing*>(
               &_RspPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RspPing* other);
  friend void swap(RspPing& a, RspPing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspPing* New() const final {
    return CreateMaybeMessage<RspPing>(NULL);
  }

  RspPing* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspPing>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspPing& from);
  void MergeFrom(const RspPing& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspPing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 second = 2;
  void clear_second();
  static const int kSecondFieldNumber = 2;
  ::google::protobuf::int32 second() const;
  void set_second(::google::protobuf::int32 value);

  // int32 microsecond = 3;
  void clear_microsecond();
  static const int kMicrosecondFieldNumber = 3;
  ::google::protobuf::int32 microsecond() const;
  void set_microsecond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspPing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 second_;
  ::google::protobuf::int32 microsecond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(NULL);
  }

  User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 group_list = 3;
  int group_list_size() const;
  void clear_group_list();
  static const int kGroupListFieldNumber = 3;
  ::google::protobuf::int32 group_list(int index) const;
  void set_group_list(int index, ::google::protobuf::int32 value);
  void add_group_list(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      group_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_group_list();

  // string user_name = 2;
  void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // int32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > group_list_;
  mutable int _group_list_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::int32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqRegisterUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqRegisterUser) */ {
 public:
  ReqRegisterUser();
  virtual ~ReqRegisterUser();

  ReqRegisterUser(const ReqRegisterUser& from);

  inline ReqRegisterUser& operator=(const ReqRegisterUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqRegisterUser(ReqRegisterUser&& from) noexcept
    : ReqRegisterUser() {
    *this = ::std::move(from);
  }

  inline ReqRegisterUser& operator=(ReqRegisterUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRegisterUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqRegisterUser* internal_default_instance() {
    return reinterpret_cast<const ReqRegisterUser*>(
               &_ReqRegisterUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ReqRegisterUser* other);
  friend void swap(ReqRegisterUser& a, ReqRegisterUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqRegisterUser* New() const final {
    return CreateMaybeMessage<ReqRegisterUser>(NULL);
  }

  ReqRegisterUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqRegisterUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqRegisterUser& from);
  void MergeFrom(const ReqRegisterUser& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRegisterUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqRegisterUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspRegisterUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspRegisterUser) */ {
 public:
  RspRegisterUser();
  virtual ~RspRegisterUser();

  RspRegisterUser(const RspRegisterUser& from);

  inline RspRegisterUser& operator=(const RspRegisterUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspRegisterUser(RspRegisterUser&& from) noexcept
    : RspRegisterUser() {
    *this = ::std::move(from);
  }

  inline RspRegisterUser& operator=(RspRegisterUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspRegisterUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspRegisterUser* internal_default_instance() {
    return reinterpret_cast<const RspRegisterUser*>(
               &_RspRegisterUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RspRegisterUser* other);
  friend void swap(RspRegisterUser& a, RspRegisterUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspRegisterUser* New() const final {
    return CreateMaybeMessage<RspRegisterUser>(NULL);
  }

  RspRegisterUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspRegisterUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspRegisterUser& from);
  void MergeFrom(const RspRegisterUser& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspRegisterUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .spaceless.protocol.User user = 2;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  private:
  const ::spaceless::protocol::User& _internal_user() const;
  public:
  const ::spaceless::protocol::User& user() const;
  ::spaceless::protocol::User* release_user();
  ::spaceless::protocol::User* mutable_user();
  void set_allocated_user(::spaceless::protocol::User* user);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspRegisterUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spaceless::protocol::User* user_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqLoginUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqLoginUser) */ {
 public:
  ReqLoginUser();
  virtual ~ReqLoginUser();

  ReqLoginUser(const ReqLoginUser& from);

  inline ReqLoginUser& operator=(const ReqLoginUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqLoginUser(ReqLoginUser&& from) noexcept
    : ReqLoginUser() {
    *this = ::std::move(from);
  }

  inline ReqLoginUser& operator=(ReqLoginUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLoginUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqLoginUser* internal_default_instance() {
    return reinterpret_cast<const ReqLoginUser*>(
               &_ReqLoginUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ReqLoginUser* other);
  friend void swap(ReqLoginUser& a, ReqLoginUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqLoginUser* New() const final {
    return CreateMaybeMessage<ReqLoginUser>(NULL);
  }

  ReqLoginUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqLoginUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqLoginUser& from);
  void MergeFrom(const ReqLoginUser& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLoginUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // int32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqLoginUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::int32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspLoginUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspLoginUser) */ {
 public:
  RspLoginUser();
  virtual ~RspLoginUser();

  RspLoginUser(const RspLoginUser& from);

  inline RspLoginUser& operator=(const RspLoginUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspLoginUser(RspLoginUser&& from) noexcept
    : RspLoginUser() {
    *this = ::std::move(from);
  }

  inline RspLoginUser& operator=(RspLoginUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspLoginUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspLoginUser* internal_default_instance() {
    return reinterpret_cast<const RspLoginUser*>(
               &_RspLoginUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RspLoginUser* other);
  friend void swap(RspLoginUser& a, RspLoginUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspLoginUser* New() const final {
    return CreateMaybeMessage<RspLoginUser>(NULL);
  }

  RspLoginUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspLoginUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspLoginUser& from);
  void MergeFrom(const RspLoginUser& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspLoginUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspLoginUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqRemoveUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqRemoveUser) */ {
 public:
  ReqRemoveUser();
  virtual ~ReqRemoveUser();

  ReqRemoveUser(const ReqRemoveUser& from);

  inline ReqRemoveUser& operator=(const ReqRemoveUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqRemoveUser(ReqRemoveUser&& from) noexcept
    : ReqRemoveUser() {
    *this = ::std::move(from);
  }

  inline ReqRemoveUser& operator=(ReqRemoveUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRemoveUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqRemoveUser* internal_default_instance() {
    return reinterpret_cast<const ReqRemoveUser*>(
               &_ReqRemoveUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ReqRemoveUser* other);
  friend void swap(ReqRemoveUser& a, ReqRemoveUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqRemoveUser* New() const final {
    return CreateMaybeMessage<ReqRemoveUser>(NULL);
  }

  ReqRemoveUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqRemoveUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqRemoveUser& from);
  void MergeFrom(const ReqRemoveUser& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRemoveUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqRemoveUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspRemoveUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspRemoveUser) */ {
 public:
  RspRemoveUser();
  virtual ~RspRemoveUser();

  RspRemoveUser(const RspRemoveUser& from);

  inline RspRemoveUser& operator=(const RspRemoveUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspRemoveUser(RspRemoveUser&& from) noexcept
    : RspRemoveUser() {
    *this = ::std::move(from);
  }

  inline RspRemoveUser& operator=(RspRemoveUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspRemoveUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspRemoveUser* internal_default_instance() {
    return reinterpret_cast<const RspRemoveUser*>(
               &_RspRemoveUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(RspRemoveUser* other);
  friend void swap(RspRemoveUser& a, RspRemoveUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspRemoveUser* New() const final {
    return CreateMaybeMessage<RspRemoveUser>(NULL);
  }

  RspRemoveUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspRemoveUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspRemoveUser& from);
  void MergeFrom(const RspRemoveUser& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspRemoveUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspRemoveUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqFindUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqFindUser) */ {
 public:
  ReqFindUser();
  virtual ~ReqFindUser();

  ReqFindUser(const ReqFindUser& from);

  inline ReqFindUser& operator=(const ReqFindUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqFindUser(ReqFindUser&& from) noexcept
    : ReqFindUser() {
    *this = ::std::move(from);
  }

  inline ReqFindUser& operator=(ReqFindUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqFindUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqFindUser* internal_default_instance() {
    return reinterpret_cast<const ReqFindUser*>(
               &_ReqFindUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ReqFindUser* other);
  friend void swap(ReqFindUser& a, ReqFindUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqFindUser* New() const final {
    return CreateMaybeMessage<ReqFindUser>(NULL);
  }

  ReqFindUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqFindUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqFindUser& from);
  void MergeFrom(const ReqFindUser& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqFindUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // int32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqFindUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspFindUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspFindUser) */ {
 public:
  RspFindUser();
  virtual ~RspFindUser();

  RspFindUser(const RspFindUser& from);

  inline RspFindUser& operator=(const RspFindUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspFindUser(RspFindUser&& from) noexcept
    : RspFindUser() {
    *this = ::std::move(from);
  }

  inline RspFindUser& operator=(RspFindUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspFindUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspFindUser* internal_default_instance() {
    return reinterpret_cast<const RspFindUser*>(
               &_RspFindUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(RspFindUser* other);
  friend void swap(RspFindUser& a, RspFindUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspFindUser* New() const final {
    return CreateMaybeMessage<RspFindUser>(NULL);
  }

  RspFindUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspFindUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspFindUser& from);
  void MergeFrom(const RspFindUser& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspFindUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .spaceless.protocol.User user = 2;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  private:
  const ::spaceless::protocol::User& _internal_user() const;
  public:
  const ::spaceless::protocol::User& user() const;
  ::spaceless::protocol::User* release_user();
  ::spaceless::protocol::User* mutable_user();
  void set_allocated_user(::spaceless::protocol::User* user);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspFindUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spaceless::protocol::User* user_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SharingGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.SharingGroup) */ {
 public:
  SharingGroup();
  virtual ~SharingGroup();

  SharingGroup(const SharingGroup& from);

  inline SharingGroup& operator=(const SharingGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SharingGroup(SharingGroup&& from) noexcept
    : SharingGroup() {
    *this = ::std::move(from);
  }

  inline SharingGroup& operator=(SharingGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SharingGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SharingGroup* internal_default_instance() {
    return reinterpret_cast<const SharingGroup*>(
               &_SharingGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SharingGroup* other);
  friend void swap(SharingGroup& a, SharingGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SharingGroup* New() const final {
    return CreateMaybeMessage<SharingGroup>(NULL);
  }

  SharingGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SharingGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SharingGroup& from);
  void MergeFrom(const SharingGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SharingGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 manager_list = 5;
  int manager_list_size() const;
  void clear_manager_list();
  static const int kManagerListFieldNumber = 5;
  ::google::protobuf::int32 manager_list(int index) const;
  void set_manager_list(int index, ::google::protobuf::int32 value);
  void add_manager_list(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      manager_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_manager_list();

  // repeated int32 member_list = 6;
  int member_list_size() const;
  void clear_member_list();
  static const int kMemberListFieldNumber = 6;
  ::google::protobuf::int32 member_list(int index) const;
  void set_member_list(int index, ::google::protobuf::int32 value);
  void add_member_list(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      member_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_member_list();

  // string group_name = 2;
  void clear_group_name();
  static const int kGroupNameFieldNumber = 2;
  const ::std::string& group_name() const;
  void set_group_name(const ::std::string& value);
  #if LANG_CXX11
  void set_group_name(::std::string&& value);
  #endif
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  ::std::string* mutable_group_name();
  ::std::string* release_group_name();
  void set_allocated_group_name(::std::string* group_name);

  // int32 group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::int32 group_id() const;
  void set_group_id(::google::protobuf::int32 value);

  // int32 owner_id = 3;
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 3;
  ::google::protobuf::int32 owner_id() const;
  void set_owner_id(::google::protobuf::int32 value);

  // int32 root_dir_id = 4;
  void clear_root_dir_id();
  static const int kRootDirIdFieldNumber = 4;
  ::google::protobuf::int32 root_dir_id() const;
  void set_root_dir_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.SharingGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > manager_list_;
  mutable int _manager_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > member_list_;
  mutable int _member_list_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr group_name_;
  ::google::protobuf::int32 group_id_;
  ::google::protobuf::int32 owner_id_;
  ::google::protobuf::int32 root_dir_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqRegisterGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqRegisterGroup) */ {
 public:
  ReqRegisterGroup();
  virtual ~ReqRegisterGroup();

  ReqRegisterGroup(const ReqRegisterGroup& from);

  inline ReqRegisterGroup& operator=(const ReqRegisterGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqRegisterGroup(ReqRegisterGroup&& from) noexcept
    : ReqRegisterGroup() {
    *this = ::std::move(from);
  }

  inline ReqRegisterGroup& operator=(ReqRegisterGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRegisterGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqRegisterGroup* internal_default_instance() {
    return reinterpret_cast<const ReqRegisterGroup*>(
               &_ReqRegisterGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ReqRegisterGroup* other);
  friend void swap(ReqRegisterGroup& a, ReqRegisterGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqRegisterGroup* New() const final {
    return CreateMaybeMessage<ReqRegisterGroup>(NULL);
  }

  ReqRegisterGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqRegisterGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqRegisterGroup& from);
  void MergeFrom(const ReqRegisterGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRegisterGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_name = 1;
  void clear_group_name();
  static const int kGroupNameFieldNumber = 1;
  const ::std::string& group_name() const;
  void set_group_name(const ::std::string& value);
  #if LANG_CXX11
  void set_group_name(::std::string&& value);
  #endif
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  ::std::string* mutable_group_name();
  ::std::string* release_group_name();
  void set_allocated_group_name(::std::string* group_name);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqRegisterGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspRegisterGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspRegisterGroup) */ {
 public:
  RspRegisterGroup();
  virtual ~RspRegisterGroup();

  RspRegisterGroup(const RspRegisterGroup& from);

  inline RspRegisterGroup& operator=(const RspRegisterGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspRegisterGroup(RspRegisterGroup&& from) noexcept
    : RspRegisterGroup() {
    *this = ::std::move(from);
  }

  inline RspRegisterGroup& operator=(RspRegisterGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspRegisterGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspRegisterGroup* internal_default_instance() {
    return reinterpret_cast<const RspRegisterGroup*>(
               &_RspRegisterGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(RspRegisterGroup* other);
  friend void swap(RspRegisterGroup& a, RspRegisterGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspRegisterGroup* New() const final {
    return CreateMaybeMessage<RspRegisterGroup>(NULL);
  }

  RspRegisterGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspRegisterGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspRegisterGroup& from);
  void MergeFrom(const RspRegisterGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspRegisterGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 group_id = 2;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  ::google::protobuf::int32 group_id() const;
  void set_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspRegisterGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 group_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqRemoveGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqRemoveGroup) */ {
 public:
  ReqRemoveGroup();
  virtual ~ReqRemoveGroup();

  ReqRemoveGroup(const ReqRemoveGroup& from);

  inline ReqRemoveGroup& operator=(const ReqRemoveGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqRemoveGroup(ReqRemoveGroup&& from) noexcept
    : ReqRemoveGroup() {
    *this = ::std::move(from);
  }

  inline ReqRemoveGroup& operator=(ReqRemoveGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRemoveGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqRemoveGroup* internal_default_instance() {
    return reinterpret_cast<const ReqRemoveGroup*>(
               &_ReqRemoveGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ReqRemoveGroup* other);
  friend void swap(ReqRemoveGroup& a, ReqRemoveGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqRemoveGroup* New() const final {
    return CreateMaybeMessage<ReqRemoveGroup>(NULL);
  }

  ReqRemoveGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqRemoveGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqRemoveGroup& from);
  void MergeFrom(const ReqRemoveGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRemoveGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::int32 group_id() const;
  void set_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqRemoveGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 group_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspRemoveGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspRemoveGroup) */ {
 public:
  RspRemoveGroup();
  virtual ~RspRemoveGroup();

  RspRemoveGroup(const RspRemoveGroup& from);

  inline RspRemoveGroup& operator=(const RspRemoveGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspRemoveGroup(RspRemoveGroup&& from) noexcept
    : RspRemoveGroup() {
    *this = ::std::move(from);
  }

  inline RspRemoveGroup& operator=(RspRemoveGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspRemoveGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspRemoveGroup* internal_default_instance() {
    return reinterpret_cast<const RspRemoveGroup*>(
               &_RspRemoveGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(RspRemoveGroup* other);
  friend void swap(RspRemoveGroup& a, RspRemoveGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspRemoveGroup* New() const final {
    return CreateMaybeMessage<RspRemoveGroup>(NULL);
  }

  RspRemoveGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspRemoveGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspRemoveGroup& from);
  void MergeFrom(const RspRemoveGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspRemoveGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspRemoveGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqFindGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqFindGroup) */ {
 public:
  ReqFindGroup();
  virtual ~ReqFindGroup();

  ReqFindGroup(const ReqFindGroup& from);

  inline ReqFindGroup& operator=(const ReqFindGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqFindGroup(ReqFindGroup&& from) noexcept
    : ReqFindGroup() {
    *this = ::std::move(from);
  }

  inline ReqFindGroup& operator=(ReqFindGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqFindGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqFindGroup* internal_default_instance() {
    return reinterpret_cast<const ReqFindGroup*>(
               &_ReqFindGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ReqFindGroup* other);
  friend void swap(ReqFindGroup& a, ReqFindGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqFindGroup* New() const final {
    return CreateMaybeMessage<ReqFindGroup>(NULL);
  }

  ReqFindGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqFindGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqFindGroup& from);
  void MergeFrom(const ReqFindGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqFindGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_name = 2;
  void clear_group_name();
  static const int kGroupNameFieldNumber = 2;
  const ::std::string& group_name() const;
  void set_group_name(const ::std::string& value);
  #if LANG_CXX11
  void set_group_name(::std::string&& value);
  #endif
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  ::std::string* mutable_group_name();
  ::std::string* release_group_name();
  void set_allocated_group_name(::std::string* group_name);

  // int32 group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::int32 group_id() const;
  void set_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqFindGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_name_;
  ::google::protobuf::int32 group_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspFindGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspFindGroup) */ {
 public:
  RspFindGroup();
  virtual ~RspFindGroup();

  RspFindGroup(const RspFindGroup& from);

  inline RspFindGroup& operator=(const RspFindGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspFindGroup(RspFindGroup&& from) noexcept
    : RspFindGroup() {
    *this = ::std::move(from);
  }

  inline RspFindGroup& operator=(RspFindGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspFindGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspFindGroup* internal_default_instance() {
    return reinterpret_cast<const RspFindGroup*>(
               &_RspFindGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(RspFindGroup* other);
  friend void swap(RspFindGroup& a, RspFindGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspFindGroup* New() const final {
    return CreateMaybeMessage<RspFindGroup>(NULL);
  }

  RspFindGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspFindGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspFindGroup& from);
  void MergeFrom(const RspFindGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspFindGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .spaceless.protocol.SharingGroup group = 2;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 2;
  private:
  const ::spaceless::protocol::SharingGroup& _internal_group() const;
  public:
  const ::spaceless::protocol::SharingGroup& group() const;
  ::spaceless::protocol::SharingGroup* release_group();
  ::spaceless::protocol::SharingGroup* mutable_group();
  void set_allocated_group(::spaceless::protocol::SharingGroup* group);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspFindGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spaceless::protocol::SharingGroup* group_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqJoinGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqJoinGroup) */ {
 public:
  ReqJoinGroup();
  virtual ~ReqJoinGroup();

  ReqJoinGroup(const ReqJoinGroup& from);

  inline ReqJoinGroup& operator=(const ReqJoinGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqJoinGroup(ReqJoinGroup&& from) noexcept
    : ReqJoinGroup() {
    *this = ::std::move(from);
  }

  inline ReqJoinGroup& operator=(ReqJoinGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqJoinGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqJoinGroup* internal_default_instance() {
    return reinterpret_cast<const ReqJoinGroup*>(
               &_ReqJoinGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ReqJoinGroup* other);
  friend void swap(ReqJoinGroup& a, ReqJoinGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqJoinGroup* New() const final {
    return CreateMaybeMessage<ReqJoinGroup>(NULL);
  }

  ReqJoinGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqJoinGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqJoinGroup& from);
  void MergeFrom(const ReqJoinGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqJoinGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::int32 group_id() const;
  void set_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqJoinGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 group_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspJoinGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspJoinGroup) */ {
 public:
  RspJoinGroup();
  virtual ~RspJoinGroup();

  RspJoinGroup(const RspJoinGroup& from);

  inline RspJoinGroup& operator=(const RspJoinGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspJoinGroup(RspJoinGroup&& from) noexcept
    : RspJoinGroup() {
    *this = ::std::move(from);
  }

  inline RspJoinGroup& operator=(RspJoinGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspJoinGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspJoinGroup* internal_default_instance() {
    return reinterpret_cast<const RspJoinGroup*>(
               &_RspJoinGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(RspJoinGroup* other);
  friend void swap(RspJoinGroup& a, RspJoinGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspJoinGroup* New() const final {
    return CreateMaybeMessage<RspJoinGroup>(NULL);
  }

  RspJoinGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspJoinGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspJoinGroup& from);
  void MergeFrom(const RspJoinGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspJoinGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspJoinGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqAssignAsManager : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqAssignAsManager) */ {
 public:
  ReqAssignAsManager();
  virtual ~ReqAssignAsManager();

  ReqAssignAsManager(const ReqAssignAsManager& from);

  inline ReqAssignAsManager& operator=(const ReqAssignAsManager& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAssignAsManager(ReqAssignAsManager&& from) noexcept
    : ReqAssignAsManager() {
    *this = ::std::move(from);
  }

  inline ReqAssignAsManager& operator=(ReqAssignAsManager&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAssignAsManager& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAssignAsManager* internal_default_instance() {
    return reinterpret_cast<const ReqAssignAsManager*>(
               &_ReqAssignAsManager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(ReqAssignAsManager* other);
  friend void swap(ReqAssignAsManager& a, ReqAssignAsManager& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAssignAsManager* New() const final {
    return CreateMaybeMessage<ReqAssignAsManager>(NULL);
  }

  ReqAssignAsManager* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAssignAsManager>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAssignAsManager& from);
  void MergeFrom(const ReqAssignAsManager& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAssignAsManager* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::int32 group_id() const;
  void set_group_id(::google::protobuf::int32 value);

  // int32 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqAssignAsManager)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 group_id_;
  ::google::protobuf::int32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspAssignAsManager : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspAssignAsManager) */ {
 public:
  RspAssignAsManager();
  virtual ~RspAssignAsManager();

  RspAssignAsManager(const RspAssignAsManager& from);

  inline RspAssignAsManager& operator=(const RspAssignAsManager& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspAssignAsManager(RspAssignAsManager&& from) noexcept
    : RspAssignAsManager() {
    *this = ::std::move(from);
  }

  inline RspAssignAsManager& operator=(RspAssignAsManager&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspAssignAsManager& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspAssignAsManager* internal_default_instance() {
    return reinterpret_cast<const RspAssignAsManager*>(
               &_RspAssignAsManager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(RspAssignAsManager* other);
  friend void swap(RspAssignAsManager& a, RspAssignAsManager& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspAssignAsManager* New() const final {
    return CreateMaybeMessage<RspAssignAsManager>(NULL);
  }

  RspAssignAsManager* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspAssignAsManager>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspAssignAsManager& from);
  void MergeFrom(const RspAssignAsManager& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspAssignAsManager* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspAssignAsManager)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqAssignAsMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqAssignAsMember) */ {
 public:
  ReqAssignAsMember();
  virtual ~ReqAssignAsMember();

  ReqAssignAsMember(const ReqAssignAsMember& from);

  inline ReqAssignAsMember& operator=(const ReqAssignAsMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAssignAsMember(ReqAssignAsMember&& from) noexcept
    : ReqAssignAsMember() {
    *this = ::std::move(from);
  }

  inline ReqAssignAsMember& operator=(ReqAssignAsMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAssignAsMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAssignAsMember* internal_default_instance() {
    return reinterpret_cast<const ReqAssignAsMember*>(
               &_ReqAssignAsMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ReqAssignAsMember* other);
  friend void swap(ReqAssignAsMember& a, ReqAssignAsMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAssignAsMember* New() const final {
    return CreateMaybeMessage<ReqAssignAsMember>(NULL);
  }

  ReqAssignAsMember* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAssignAsMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAssignAsMember& from);
  void MergeFrom(const ReqAssignAsMember& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAssignAsMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::int32 group_id() const;
  void set_group_id(::google::protobuf::int32 value);

  // int32 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqAssignAsMember)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 group_id_;
  ::google::protobuf::int32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspAssignAsMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspAssignAsMember) */ {
 public:
  RspAssignAsMember();
  virtual ~RspAssignAsMember();

  RspAssignAsMember(const RspAssignAsMember& from);

  inline RspAssignAsMember& operator=(const RspAssignAsMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspAssignAsMember(RspAssignAsMember&& from) noexcept
    : RspAssignAsMember() {
    *this = ::std::move(from);
  }

  inline RspAssignAsMember& operator=(RspAssignAsMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspAssignAsMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspAssignAsMember* internal_default_instance() {
    return reinterpret_cast<const RspAssignAsMember*>(
               &_RspAssignAsMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(RspAssignAsMember* other);
  friend void swap(RspAssignAsMember& a, RspAssignAsMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspAssignAsMember* New() const final {
    return CreateMaybeMessage<RspAssignAsMember>(NULL);
  }

  RspAssignAsMember* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspAssignAsMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspAssignAsMember& from);
  void MergeFrom(const RspAssignAsMember& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspAssignAsMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspAssignAsMember)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqKickOutUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqKickOutUser) */ {
 public:
  ReqKickOutUser();
  virtual ~ReqKickOutUser();

  ReqKickOutUser(const ReqKickOutUser& from);

  inline ReqKickOutUser& operator=(const ReqKickOutUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqKickOutUser(ReqKickOutUser&& from) noexcept
    : ReqKickOutUser() {
    *this = ::std::move(from);
  }

  inline ReqKickOutUser& operator=(ReqKickOutUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqKickOutUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqKickOutUser* internal_default_instance() {
    return reinterpret_cast<const ReqKickOutUser*>(
               &_ReqKickOutUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(ReqKickOutUser* other);
  friend void swap(ReqKickOutUser& a, ReqKickOutUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqKickOutUser* New() const final {
    return CreateMaybeMessage<ReqKickOutUser>(NULL);
  }

  ReqKickOutUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqKickOutUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqKickOutUser& from);
  void MergeFrom(const ReqKickOutUser& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqKickOutUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::int32 group_id() const;
  void set_group_id(::google::protobuf::int32 value);

  // int32 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqKickOutUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 group_id_;
  ::google::protobuf::int32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspKickOutUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspKickOutUser) */ {
 public:
  RspKickOutUser();
  virtual ~RspKickOutUser();

  RspKickOutUser(const RspKickOutUser& from);

  inline RspKickOutUser& operator=(const RspKickOutUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspKickOutUser(RspKickOutUser&& from) noexcept
    : RspKickOutUser() {
    *this = ::std::move(from);
  }

  inline RspKickOutUser& operator=(RspKickOutUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspKickOutUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspKickOutUser* internal_default_instance() {
    return reinterpret_cast<const RspKickOutUser*>(
               &_RspKickOutUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(RspKickOutUser* other);
  friend void swap(RspKickOutUser& a, RspKickOutUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspKickOutUser* New() const final {
    return CreateMaybeMessage<RspKickOutUser>(NULL);
  }

  RspKickOutUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspKickOutUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspKickOutUser& from);
  void MergeFrom(const RspKickOutUser& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspKickOutUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspKickOutUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqPutFileSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqPutFileSession) */ {
 public:
  ReqPutFileSession();
  virtual ~ReqPutFileSession();

  ReqPutFileSession(const ReqPutFileSession& from);

  inline ReqPutFileSession& operator=(const ReqPutFileSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqPutFileSession(ReqPutFileSession&& from) noexcept
    : ReqPutFileSession() {
    *this = ::std::move(from);
  }

  inline ReqPutFileSession& operator=(ReqPutFileSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPutFileSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqPutFileSession* internal_default_instance() {
    return reinterpret_cast<const ReqPutFileSession*>(
               &_ReqPutFileSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(ReqPutFileSession* other);
  friend void swap(ReqPutFileSession& a, ReqPutFileSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqPutFileSession* New() const final {
    return CreateMaybeMessage<ReqPutFileSession>(NULL);
  }

  ReqPutFileSession* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqPutFileSession>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqPutFileSession& from);
  void MergeFrom(const ReqPutFileSession& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqPutFileSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_path = 2;
  void clear_file_path();
  static const int kFilePathFieldNumber = 2;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_file_path(::std::string&& value);
  #endif
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // int32 group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::int32 group_id() const;
  void set_group_id(::google::protobuf::int32 value);

  // int32 max_fragment = 3;
  void clear_max_fragment();
  static const int kMaxFragmentFieldNumber = 3;
  ::google::protobuf::int32 max_fragment() const;
  void set_max_fragment(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqPutFileSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  ::google::protobuf::int32 group_id_;
  ::google::protobuf::int32 max_fragment_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspPutFileSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspPutFileSession) */ {
 public:
  RspPutFileSession();
  virtual ~RspPutFileSession();

  RspPutFileSession(const RspPutFileSession& from);

  inline RspPutFileSession& operator=(const RspPutFileSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspPutFileSession(RspPutFileSession&& from) noexcept
    : RspPutFileSession() {
    *this = ::std::move(from);
  }

  inline RspPutFileSession& operator=(RspPutFileSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspPutFileSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspPutFileSession* internal_default_instance() {
    return reinterpret_cast<const RspPutFileSession*>(
               &_RspPutFileSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(RspPutFileSession* other);
  friend void swap(RspPutFileSession& a, RspPutFileSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspPutFileSession* New() const final {
    return CreateMaybeMessage<RspPutFileSession>(NULL);
  }

  RspPutFileSession* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspPutFileSession>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspPutFileSession& from);
  void MergeFrom(const RspPutFileSession& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspPutFileSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // int32 next_fragment = 3;
  void clear_next_fragment();
  static const int kNextFragmentFieldNumber = 3;
  ::google::protobuf::int32 next_fragment() const;
  void set_next_fragment(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspPutFileSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 next_fragment_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqNodePutFileSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqNodePutFileSession) */ {
 public:
  ReqNodePutFileSession();
  virtual ~ReqNodePutFileSession();

  ReqNodePutFileSession(const ReqNodePutFileSession& from);

  inline ReqNodePutFileSession& operator=(const ReqNodePutFileSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqNodePutFileSession(ReqNodePutFileSession&& from) noexcept
    : ReqNodePutFileSession() {
    *this = ::std::move(from);
  }

  inline ReqNodePutFileSession& operator=(ReqNodePutFileSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqNodePutFileSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqNodePutFileSession* internal_default_instance() {
    return reinterpret_cast<const ReqNodePutFileSession*>(
               &_ReqNodePutFileSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(ReqNodePutFileSession* other);
  friend void swap(ReqNodePutFileSession& a, ReqNodePutFileSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqNodePutFileSession* New() const final {
    return CreateMaybeMessage<ReqNodePutFileSession>(NULL);
  }

  ReqNodePutFileSession* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqNodePutFileSession>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqNodePutFileSession& from);
  void MergeFrom(const ReqNodePutFileSession& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqNodePutFileSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_path = 2;
  void clear_file_path();
  static const int kFilePathFieldNumber = 2;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_file_path(::std::string&& value);
  #endif
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // int32 max_fragment = 3;
  void clear_max_fragment();
  static const int kMaxFragmentFieldNumber = 3;
  ::google::protobuf::int32 max_fragment() const;
  void set_max_fragment(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqNodePutFileSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  ::google::protobuf::int32 max_fragment_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspNodePutFileSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspNodePutFileSession) */ {
 public:
  RspNodePutFileSession();
  virtual ~RspNodePutFileSession();

  RspNodePutFileSession(const RspNodePutFileSession& from);

  inline RspNodePutFileSession& operator=(const RspNodePutFileSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspNodePutFileSession(RspNodePutFileSession&& from) noexcept
    : RspNodePutFileSession() {
    *this = ::std::move(from);
  }

  inline RspNodePutFileSession& operator=(RspNodePutFileSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspNodePutFileSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspNodePutFileSession* internal_default_instance() {
    return reinterpret_cast<const RspNodePutFileSession*>(
               &_RspNodePutFileSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(RspNodePutFileSession* other);
  friend void swap(RspNodePutFileSession& a, RspNodePutFileSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspNodePutFileSession* New() const final {
    return CreateMaybeMessage<RspNodePutFileSession>(NULL);
  }

  RspNodePutFileSession* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspNodePutFileSession>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspNodePutFileSession& from);
  void MergeFrom(const RspNodePutFileSession& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspNodePutFileSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspNodePutFileSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 session_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqPutFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqPutFile) */ {
 public:
  ReqPutFile();
  virtual ~ReqPutFile();

  ReqPutFile(const ReqPutFile& from);

  inline ReqPutFile& operator=(const ReqPutFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqPutFile(ReqPutFile&& from) noexcept
    : ReqPutFile() {
    *this = ::std::move(from);
  }

  inline ReqPutFile& operator=(ReqPutFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPutFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqPutFile* internal_default_instance() {
    return reinterpret_cast<const ReqPutFile*>(
               &_ReqPutFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(ReqPutFile* other);
  friend void swap(ReqPutFile& a, ReqPutFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqPutFile* New() const final {
    return CreateMaybeMessage<ReqPutFile>(NULL);
  }

  ReqPutFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqPutFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqPutFile& from);
  void MergeFrom(const ReqPutFile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqPutFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes fragment_content = 3;
  void clear_fragment_content();
  static const int kFragmentContentFieldNumber = 3;
  const ::std::string& fragment_content() const;
  void set_fragment_content(const ::std::string& value);
  #if LANG_CXX11
  void set_fragment_content(::std::string&& value);
  #endif
  void set_fragment_content(const char* value);
  void set_fragment_content(const void* value, size_t size);
  ::std::string* mutable_fragment_content();
  ::std::string* release_fragment_content();
  void set_allocated_fragment_content(::std::string* fragment_content);

  // int32 session_id = 1;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // int32 fragment_index = 2;
  void clear_fragment_index();
  static const int kFragmentIndexFieldNumber = 2;
  ::google::protobuf::int32 fragment_index() const;
  void set_fragment_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqPutFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fragment_content_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 fragment_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspPutFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspPutFile) */ {
 public:
  RspPutFile();
  virtual ~RspPutFile();

  RspPutFile(const RspPutFile& from);

  inline RspPutFile& operator=(const RspPutFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspPutFile(RspPutFile&& from) noexcept
    : RspPutFile() {
    *this = ::std::move(from);
  }

  inline RspPutFile& operator=(RspPutFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspPutFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspPutFile* internal_default_instance() {
    return reinterpret_cast<const RspPutFile*>(
               &_RspPutFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(RspPutFile* other);
  friend void swap(RspPutFile& a, RspPutFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspPutFile* New() const final {
    return CreateMaybeMessage<RspPutFile>(NULL);
  }

  RspPutFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspPutFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspPutFile& from);
  void MergeFrom(const RspPutFile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspPutFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // int32 fragment_index = 3;
  void clear_fragment_index();
  static const int kFragmentIndexFieldNumber = 3;
  ::google::protobuf::int32 fragment_index() const;
  void set_fragment_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspPutFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 fragment_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqGetFileSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqGetFileSession) */ {
 public:
  ReqGetFileSession();
  virtual ~ReqGetFileSession();

  ReqGetFileSession(const ReqGetFileSession& from);

  inline ReqGetFileSession& operator=(const ReqGetFileSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqGetFileSession(ReqGetFileSession&& from) noexcept
    : ReqGetFileSession() {
    *this = ::std::move(from);
  }

  inline ReqGetFileSession& operator=(ReqGetFileSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGetFileSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqGetFileSession* internal_default_instance() {
    return reinterpret_cast<const ReqGetFileSession*>(
               &_ReqGetFileSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(ReqGetFileSession* other);
  friend void swap(ReqGetFileSession& a, ReqGetFileSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqGetFileSession* New() const final {
    return CreateMaybeMessage<ReqGetFileSession>(NULL);
  }

  ReqGetFileSession* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetFileSession>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqGetFileSession& from);
  void MergeFrom(const ReqGetFileSession& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetFileSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_path = 2;
  void clear_file_path();
  static const int kFilePathFieldNumber = 2;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_file_path(::std::string&& value);
  #endif
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // int32 group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::int32 group_id() const;
  void set_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqGetFileSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  ::google::protobuf::int32 group_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspGetFileSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspGetFileSession) */ {
 public:
  RspGetFileSession();
  virtual ~RspGetFileSession();

  RspGetFileSession(const RspGetFileSession& from);

  inline RspGetFileSession& operator=(const RspGetFileSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspGetFileSession(RspGetFileSession&& from) noexcept
    : RspGetFileSession() {
    *this = ::std::move(from);
  }

  inline RspGetFileSession& operator=(RspGetFileSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspGetFileSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspGetFileSession* internal_default_instance() {
    return reinterpret_cast<const RspGetFileSession*>(
               &_RspGetFileSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(RspGetFileSession* other);
  friend void swap(RspGetFileSession& a, RspGetFileSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspGetFileSession* New() const final {
    return CreateMaybeMessage<RspGetFileSession>(NULL);
  }

  RspGetFileSession* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspGetFileSession>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspGetFileSession& from);
  void MergeFrom(const RspGetFileSession& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspGetFileSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // int32 max_fragment = 3;
  void clear_max_fragment();
  static const int kMaxFragmentFieldNumber = 3;
  ::google::protobuf::int32 max_fragment() const;
  void set_max_fragment(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspGetFileSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 max_fragment_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqNodeGetFileSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqNodeGetFileSession) */ {
 public:
  ReqNodeGetFileSession();
  virtual ~ReqNodeGetFileSession();

  ReqNodeGetFileSession(const ReqNodeGetFileSession& from);

  inline ReqNodeGetFileSession& operator=(const ReqNodeGetFileSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqNodeGetFileSession(ReqNodeGetFileSession&& from) noexcept
    : ReqNodeGetFileSession() {
    *this = ::std::move(from);
  }

  inline ReqNodeGetFileSession& operator=(ReqNodeGetFileSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqNodeGetFileSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqNodeGetFileSession* internal_default_instance() {
    return reinterpret_cast<const ReqNodeGetFileSession*>(
               &_ReqNodeGetFileSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(ReqNodeGetFileSession* other);
  friend void swap(ReqNodeGetFileSession& a, ReqNodeGetFileSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqNodeGetFileSession* New() const final {
    return CreateMaybeMessage<ReqNodeGetFileSession>(NULL);
  }

  ReqNodeGetFileSession* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqNodeGetFileSession>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqNodeGetFileSession& from);
  void MergeFrom(const ReqNodeGetFileSession& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqNodeGetFileSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_path = 2;
  void clear_file_path();
  static const int kFilePathFieldNumber = 2;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_file_path(::std::string&& value);
  #endif
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqNodeGetFileSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspNodeGetFileSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspNodeGetFileSession) */ {
 public:
  RspNodeGetFileSession();
  virtual ~RspNodeGetFileSession();

  RspNodeGetFileSession(const RspNodeGetFileSession& from);

  inline RspNodeGetFileSession& operator=(const RspNodeGetFileSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspNodeGetFileSession(RspNodeGetFileSession&& from) noexcept
    : RspNodeGetFileSession() {
    *this = ::std::move(from);
  }

  inline RspNodeGetFileSession& operator=(RspNodeGetFileSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspNodeGetFileSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspNodeGetFileSession* internal_default_instance() {
    return reinterpret_cast<const RspNodeGetFileSession*>(
               &_RspNodeGetFileSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(RspNodeGetFileSession* other);
  friend void swap(RspNodeGetFileSession& a, RspNodeGetFileSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspNodeGetFileSession* New() const final {
    return CreateMaybeMessage<RspNodeGetFileSession>(NULL);
  }

  RspNodeGetFileSession* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspNodeGetFileSession>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspNodeGetFileSession& from);
  void MergeFrom(const RspNodeGetFileSession& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspNodeGetFileSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // int32 max_fragment = 3;
  void clear_max_fragment();
  static const int kMaxFragmentFieldNumber = 3;
  ::google::protobuf::int32 max_fragment() const;
  void set_max_fragment(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspNodeGetFileSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 max_fragment_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqGetFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqGetFile) */ {
 public:
  ReqGetFile();
  virtual ~ReqGetFile();

  ReqGetFile(const ReqGetFile& from);

  inline ReqGetFile& operator=(const ReqGetFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqGetFile(ReqGetFile&& from) noexcept
    : ReqGetFile() {
    *this = ::std::move(from);
  }

  inline ReqGetFile& operator=(ReqGetFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGetFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqGetFile* internal_default_instance() {
    return reinterpret_cast<const ReqGetFile*>(
               &_ReqGetFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(ReqGetFile* other);
  friend void swap(ReqGetFile& a, ReqGetFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqGetFile* New() const final {
    return CreateMaybeMessage<ReqGetFile>(NULL);
  }

  ReqGetFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqGetFile& from);
  void MergeFrom(const ReqGetFile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 session_id = 1;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // int32 fragment_index = 2;
  void clear_fragment_index();
  static const int kFragmentIndexFieldNumber = 2;
  ::google::protobuf::int32 fragment_index() const;
  void set_fragment_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqGetFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 fragment_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspGetFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspGetFile) */ {
 public:
  RspGetFile();
  virtual ~RspGetFile();

  RspGetFile(const RspGetFile& from);

  inline RspGetFile& operator=(const RspGetFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspGetFile(RspGetFile&& from) noexcept
    : RspGetFile() {
    *this = ::std::move(from);
  }

  inline RspGetFile& operator=(RspGetFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspGetFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspGetFile* internal_default_instance() {
    return reinterpret_cast<const RspGetFile*>(
               &_RspGetFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(RspGetFile* other);
  friend void swap(RspGetFile& a, RspGetFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspGetFile* New() const final {
    return CreateMaybeMessage<RspGetFile>(NULL);
  }

  RspGetFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspGetFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspGetFile& from);
  void MergeFrom(const RspGetFile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspGetFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes fragment_content = 4;
  void clear_fragment_content();
  static const int kFragmentContentFieldNumber = 4;
  const ::std::string& fragment_content() const;
  void set_fragment_content(const ::std::string& value);
  #if LANG_CXX11
  void set_fragment_content(::std::string&& value);
  #endif
  void set_fragment_content(const char* value);
  void set_fragment_content(const void* value, size_t size);
  ::std::string* mutable_fragment_content();
  ::std::string* release_fragment_content();
  void set_allocated_fragment_content(::std::string* fragment_content);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // int32 fragment_index = 3;
  void clear_fragment_index();
  static const int kFragmentIndexFieldNumber = 3;
  ::google::protobuf::int32 fragment_index() const;
  void set_fragment_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspGetFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fragment_content_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 fragment_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqCreatePath : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqCreatePath) */ {
 public:
  ReqCreatePath();
  virtual ~ReqCreatePath();

  ReqCreatePath(const ReqCreatePath& from);

  inline ReqCreatePath& operator=(const ReqCreatePath& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqCreatePath(ReqCreatePath&& from) noexcept
    : ReqCreatePath() {
    *this = ::std::move(from);
  }

  inline ReqCreatePath& operator=(ReqCreatePath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCreatePath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCreatePath* internal_default_instance() {
    return reinterpret_cast<const ReqCreatePath*>(
               &_ReqCreatePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(ReqCreatePath* other);
  friend void swap(ReqCreatePath& a, ReqCreatePath& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqCreatePath* New() const final {
    return CreateMaybeMessage<ReqCreatePath>(NULL);
  }

  ReqCreatePath* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqCreatePath>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqCreatePath& from);
  void MergeFrom(const ReqCreatePath& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCreatePath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // int32 group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::int32 group_id() const;
  void set_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqCreatePath)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int32 group_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspCreatePath : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspCreatePath) */ {
 public:
  RspCreatePath();
  virtual ~RspCreatePath();

  RspCreatePath(const RspCreatePath& from);

  inline RspCreatePath& operator=(const RspCreatePath& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspCreatePath(RspCreatePath&& from) noexcept
    : RspCreatePath() {
    *this = ::std::move(from);
  }

  inline RspCreatePath& operator=(RspCreatePath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspCreatePath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspCreatePath* internal_default_instance() {
    return reinterpret_cast<const RspCreatePath*>(
               &_RspCreatePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(RspCreatePath* other);
  friend void swap(RspCreatePath& a, RspCreatePath& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspCreatePath* New() const final {
    return CreateMaybeMessage<RspCreatePath>(NULL);
  }

  RspCreatePath* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspCreatePath>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspCreatePath& from);
  void MergeFrom(const RspCreatePath& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspCreatePath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspCreatePath)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqRemovePath : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.ReqRemovePath) */ {
 public:
  ReqRemovePath();
  virtual ~ReqRemovePath();

  ReqRemovePath(const ReqRemovePath& from);

  inline ReqRemovePath& operator=(const ReqRemovePath& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqRemovePath(ReqRemovePath&& from) noexcept
    : ReqRemovePath() {
    *this = ::std::move(from);
  }

  inline ReqRemovePath& operator=(ReqRemovePath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRemovePath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqRemovePath* internal_default_instance() {
    return reinterpret_cast<const ReqRemovePath*>(
               &_ReqRemovePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(ReqRemovePath* other);
  friend void swap(ReqRemovePath& a, ReqRemovePath& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqRemovePath* New() const final {
    return CreateMaybeMessage<ReqRemovePath>(NULL);
  }

  ReqRemovePath* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqRemovePath>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqRemovePath& from);
  void MergeFrom(const ReqRemovePath& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRemovePath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // int32 group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::int32 group_id() const;
  void set_group_id(::google::protobuf::int32 value);

  // bool force_remove_all = 3;
  void clear_force_remove_all();
  static const int kForceRemoveAllFieldNumber = 3;
  bool force_remove_all() const;
  void set_force_remove_all(bool value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.ReqRemovePath)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int32 group_id_;
  bool force_remove_all_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspRemovePath : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spaceless.protocol.RspRemovePath) */ {
 public:
  RspRemovePath();
  virtual ~RspRemovePath();

  RspRemovePath(const RspRemovePath& from);

  inline RspRemovePath& operator=(const RspRemovePath& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspRemovePath(RspRemovePath&& from) noexcept
    : RspRemovePath() {
    *this = ::std::move(from);
  }

  inline RspRemovePath& operator=(RspRemovePath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspRemovePath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspRemovePath* internal_default_instance() {
    return reinterpret_cast<const RspRemovePath*>(
               &_RspRemovePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(RspRemovePath* other);
  friend void swap(RspRemovePath& a, RspRemovePath& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspRemovePath* New() const final {
    return CreateMaybeMessage<RspRemovePath>(NULL);
  }

  RspRemovePath* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspRemovePath>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspRemovePath& from);
  void MergeFrom(const RspRemovePath& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspRemovePath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:spaceless.protocol.RspRemovePath)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RspError

// int32 result = 1;
inline void RspError::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspError::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspError.result)
  return result_;
}
inline void RspError::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspError.result)
}

// -------------------------------------------------------------------

// ReqPing

// int32 second = 1;
inline void ReqPing::clear_second() {
  second_ = 0;
}
inline ::google::protobuf::int32 ReqPing::second() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqPing.second)
  return second_;
}
inline void ReqPing::set_second(::google::protobuf::int32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqPing.second)
}

// int32 microsecond = 2;
inline void ReqPing::clear_microsecond() {
  microsecond_ = 0;
}
inline ::google::protobuf::int32 ReqPing::microsecond() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqPing.microsecond)
  return microsecond_;
}
inline void ReqPing::set_microsecond(::google::protobuf::int32 value) {
  
  microsecond_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqPing.microsecond)
}

// -------------------------------------------------------------------

// RspPing

// int32 result = 1;
inline void RspPing::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspPing::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspPing.result)
  return result_;
}
inline void RspPing::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspPing.result)
}

// int32 second = 2;
inline void RspPing::clear_second() {
  second_ = 0;
}
inline ::google::protobuf::int32 RspPing::second() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspPing.second)
  return second_;
}
inline void RspPing::set_second(::google::protobuf::int32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspPing.second)
}

// int32 microsecond = 3;
inline void RspPing::clear_microsecond() {
  microsecond_ = 0;
}
inline ::google::protobuf::int32 RspPing::microsecond() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspPing.microsecond)
  return microsecond_;
}
inline void RspPing::set_microsecond(::google::protobuf::int32 value) {
  
  microsecond_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspPing.microsecond)
}

// -------------------------------------------------------------------

// User

// int32 user_id = 1;
inline void User::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 User::user_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.User.user_id)
  return user_id_;
}
inline void User::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.User.user_id)
}

// string user_name = 2;
inline void User::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::user_name() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.User.user_name)
  return user_name_.GetNoArena();
}
inline void User::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.User.user_name)
}
#if LANG_CXX11
inline void User::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.User.user_name)
}
#endif
inline void User::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.User.user_name)
}
inline void User::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.User.user_name)
}
inline ::std::string* User::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.User.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_user_name() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.User.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.User.user_name)
}

// repeated int32 group_list = 3;
inline int User::group_list_size() const {
  return group_list_.size();
}
inline void User::clear_group_list() {
  group_list_.Clear();
}
inline ::google::protobuf::int32 User::group_list(int index) const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.User.group_list)
  return group_list_.Get(index);
}
inline void User::set_group_list(int index, ::google::protobuf::int32 value) {
  group_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.User.group_list)
}
inline void User::add_group_list(::google::protobuf::int32 value) {
  group_list_.Add(value);
  // @@protoc_insertion_point(field_add:spaceless.protocol.User.group_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
User::group_list() const {
  // @@protoc_insertion_point(field_list:spaceless.protocol.User.group_list)
  return group_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
User::mutable_group_list() {
  // @@protoc_insertion_point(field_mutable_list:spaceless.protocol.User.group_list)
  return &group_list_;
}

// -------------------------------------------------------------------

// ReqRegisterUser

// string username = 1;
inline void ReqRegisterUser::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqRegisterUser::username() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRegisterUser.username)
  return username_.GetNoArena();
}
inline void ReqRegisterUser::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRegisterUser.username)
}
#if LANG_CXX11
inline void ReqRegisterUser::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqRegisterUser.username)
}
#endif
inline void ReqRegisterUser::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqRegisterUser.username)
}
inline void ReqRegisterUser::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqRegisterUser.username)
}
inline ::std::string* ReqRegisterUser::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqRegisterUser.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqRegisterUser::release_username() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqRegisterUser.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRegisterUser::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqRegisterUser.username)
}

// string password = 2;
inline void ReqRegisterUser::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqRegisterUser::password() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRegisterUser.password)
  return password_.GetNoArena();
}
inline void ReqRegisterUser::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRegisterUser.password)
}
#if LANG_CXX11
inline void ReqRegisterUser::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqRegisterUser.password)
}
#endif
inline void ReqRegisterUser::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqRegisterUser.password)
}
inline void ReqRegisterUser::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqRegisterUser.password)
}
inline ::std::string* ReqRegisterUser::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqRegisterUser.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqRegisterUser::release_password() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqRegisterUser.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRegisterUser::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqRegisterUser.password)
}

// -------------------------------------------------------------------

// RspRegisterUser

// int32 result = 1;
inline void RspRegisterUser::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspRegisterUser::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRegisterUser.result)
  return result_;
}
inline void RspRegisterUser::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspRegisterUser.result)
}

// .spaceless.protocol.User user = 2;
inline bool RspRegisterUser::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline void RspRegisterUser::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
}
inline const ::spaceless::protocol::User& RspRegisterUser::_internal_user() const {
  return *user_;
}
inline const ::spaceless::protocol::User& RspRegisterUser::user() const {
  const ::spaceless::protocol::User* p = user_;
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRegisterUser.user)
  return p != NULL ? *p : *reinterpret_cast<const ::spaceless::protocol::User*>(
      &::spaceless::protocol::_User_default_instance_);
}
inline ::spaceless::protocol::User* RspRegisterUser::release_user() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.RspRegisterUser.user)
  
  ::spaceless::protocol::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::spaceless::protocol::User* RspRegisterUser::mutable_user() {
  
  if (user_ == NULL) {
    auto* p = CreateMaybeMessage<::spaceless::protocol::User>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.RspRegisterUser.user)
  return user_;
}
inline void RspRegisterUser::set_allocated_user(::spaceless::protocol::User* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.RspRegisterUser.user)
}

// -------------------------------------------------------------------

// ReqLoginUser

// int32 user_id = 1;
inline void ReqLoginUser::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 ReqLoginUser::user_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqLoginUser.user_id)
  return user_id_;
}
inline void ReqLoginUser::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqLoginUser.user_id)
}

// string password = 2;
inline void ReqLoginUser::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqLoginUser::password() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqLoginUser.password)
  return password_.GetNoArena();
}
inline void ReqLoginUser::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqLoginUser.password)
}
#if LANG_CXX11
inline void ReqLoginUser::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqLoginUser.password)
}
#endif
inline void ReqLoginUser::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqLoginUser.password)
}
inline void ReqLoginUser::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqLoginUser.password)
}
inline ::std::string* ReqLoginUser::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqLoginUser.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqLoginUser::release_password() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqLoginUser.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLoginUser::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqLoginUser.password)
}

// -------------------------------------------------------------------

// RspLoginUser

// int32 result = 1;
inline void RspLoginUser::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspLoginUser::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspLoginUser.result)
  return result_;
}
inline void RspLoginUser::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspLoginUser.result)
}

// -------------------------------------------------------------------

// ReqRemoveUser

// int32 user_id = 1;
inline void ReqRemoveUser::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 ReqRemoveUser::user_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRemoveUser.user_id)
  return user_id_;
}
inline void ReqRemoveUser::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRemoveUser.user_id)
}

// -------------------------------------------------------------------

// RspRemoveUser

// int32 result = 1;
inline void RspRemoveUser::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspRemoveUser::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRemoveUser.result)
  return result_;
}
inline void RspRemoveUser::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspRemoveUser.result)
}

// -------------------------------------------------------------------

// ReqFindUser

// int32 user_id = 1;
inline void ReqFindUser::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 ReqFindUser::user_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqFindUser.user_id)
  return user_id_;
}
inline void ReqFindUser::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqFindUser.user_id)
}

// string username = 2;
inline void ReqFindUser::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqFindUser::username() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqFindUser.username)
  return username_.GetNoArena();
}
inline void ReqFindUser::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqFindUser.username)
}
#if LANG_CXX11
inline void ReqFindUser::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqFindUser.username)
}
#endif
inline void ReqFindUser::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqFindUser.username)
}
inline void ReqFindUser::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqFindUser.username)
}
inline ::std::string* ReqFindUser::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqFindUser.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqFindUser::release_username() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqFindUser.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqFindUser::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqFindUser.username)
}

// -------------------------------------------------------------------

// RspFindUser

// int32 result = 1;
inline void RspFindUser::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspFindUser::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspFindUser.result)
  return result_;
}
inline void RspFindUser::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspFindUser.result)
}

// .spaceless.protocol.User user = 2;
inline bool RspFindUser::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline void RspFindUser::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
}
inline const ::spaceless::protocol::User& RspFindUser::_internal_user() const {
  return *user_;
}
inline const ::spaceless::protocol::User& RspFindUser::user() const {
  const ::spaceless::protocol::User* p = user_;
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspFindUser.user)
  return p != NULL ? *p : *reinterpret_cast<const ::spaceless::protocol::User*>(
      &::spaceless::protocol::_User_default_instance_);
}
inline ::spaceless::protocol::User* RspFindUser::release_user() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.RspFindUser.user)
  
  ::spaceless::protocol::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::spaceless::protocol::User* RspFindUser::mutable_user() {
  
  if (user_ == NULL) {
    auto* p = CreateMaybeMessage<::spaceless::protocol::User>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.RspFindUser.user)
  return user_;
}
inline void RspFindUser::set_allocated_user(::spaceless::protocol::User* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.RspFindUser.user)
}

// -------------------------------------------------------------------

// SharingGroup

// int32 group_id = 1;
inline void SharingGroup::clear_group_id() {
  group_id_ = 0;
}
inline ::google::protobuf::int32 SharingGroup::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.SharingGroup.group_id)
  return group_id_;
}
inline void SharingGroup::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.SharingGroup.group_id)
}

// string group_name = 2;
inline void SharingGroup::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SharingGroup::group_name() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.SharingGroup.group_name)
  return group_name_.GetNoArena();
}
inline void SharingGroup::set_group_name(const ::std::string& value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.SharingGroup.group_name)
}
#if LANG_CXX11
inline void SharingGroup::set_group_name(::std::string&& value) {
  
  group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.SharingGroup.group_name)
}
#endif
inline void SharingGroup::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.SharingGroup.group_name)
}
inline void SharingGroup::set_group_name(const char* value, size_t size) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.SharingGroup.group_name)
}
inline ::std::string* SharingGroup::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.SharingGroup.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SharingGroup::release_group_name() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.SharingGroup.group_name)
  
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SharingGroup::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.SharingGroup.group_name)
}

// int32 owner_id = 3;
inline void SharingGroup::clear_owner_id() {
  owner_id_ = 0;
}
inline ::google::protobuf::int32 SharingGroup::owner_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.SharingGroup.owner_id)
  return owner_id_;
}
inline void SharingGroup::set_owner_id(::google::protobuf::int32 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.SharingGroup.owner_id)
}

// int32 root_dir_id = 4;
inline void SharingGroup::clear_root_dir_id() {
  root_dir_id_ = 0;
}
inline ::google::protobuf::int32 SharingGroup::root_dir_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.SharingGroup.root_dir_id)
  return root_dir_id_;
}
inline void SharingGroup::set_root_dir_id(::google::protobuf::int32 value) {
  
  root_dir_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.SharingGroup.root_dir_id)
}

// repeated int32 manager_list = 5;
inline int SharingGroup::manager_list_size() const {
  return manager_list_.size();
}
inline void SharingGroup::clear_manager_list() {
  manager_list_.Clear();
}
inline ::google::protobuf::int32 SharingGroup::manager_list(int index) const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.SharingGroup.manager_list)
  return manager_list_.Get(index);
}
inline void SharingGroup::set_manager_list(int index, ::google::protobuf::int32 value) {
  manager_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.SharingGroup.manager_list)
}
inline void SharingGroup::add_manager_list(::google::protobuf::int32 value) {
  manager_list_.Add(value);
  // @@protoc_insertion_point(field_add:spaceless.protocol.SharingGroup.manager_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SharingGroup::manager_list() const {
  // @@protoc_insertion_point(field_list:spaceless.protocol.SharingGroup.manager_list)
  return manager_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SharingGroup::mutable_manager_list() {
  // @@protoc_insertion_point(field_mutable_list:spaceless.protocol.SharingGroup.manager_list)
  return &manager_list_;
}

// repeated int32 member_list = 6;
inline int SharingGroup::member_list_size() const {
  return member_list_.size();
}
inline void SharingGroup::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::int32 SharingGroup::member_list(int index) const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.SharingGroup.member_list)
  return member_list_.Get(index);
}
inline void SharingGroup::set_member_list(int index, ::google::protobuf::int32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.SharingGroup.member_list)
}
inline void SharingGroup::add_member_list(::google::protobuf::int32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:spaceless.protocol.SharingGroup.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SharingGroup::member_list() const {
  // @@protoc_insertion_point(field_list:spaceless.protocol.SharingGroup.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SharingGroup::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:spaceless.protocol.SharingGroup.member_list)
  return &member_list_;
}

// -------------------------------------------------------------------

// ReqRegisterGroup

// string group_name = 1;
inline void ReqRegisterGroup::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqRegisterGroup::group_name() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRegisterGroup.group_name)
  return group_name_.GetNoArena();
}
inline void ReqRegisterGroup::set_group_name(const ::std::string& value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRegisterGroup.group_name)
}
#if LANG_CXX11
inline void ReqRegisterGroup::set_group_name(::std::string&& value) {
  
  group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqRegisterGroup.group_name)
}
#endif
inline void ReqRegisterGroup::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqRegisterGroup.group_name)
}
inline void ReqRegisterGroup::set_group_name(const char* value, size_t size) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqRegisterGroup.group_name)
}
inline ::std::string* ReqRegisterGroup::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqRegisterGroup.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqRegisterGroup::release_group_name() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqRegisterGroup.group_name)
  
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRegisterGroup::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqRegisterGroup.group_name)
}

// -------------------------------------------------------------------

// RspRegisterGroup

// int32 result = 1;
inline void RspRegisterGroup::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspRegisterGroup::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRegisterGroup.result)
  return result_;
}
inline void RspRegisterGroup::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspRegisterGroup.result)
}

// int32 group_id = 2;
inline void RspRegisterGroup::clear_group_id() {
  group_id_ = 0;
}
inline ::google::protobuf::int32 RspRegisterGroup::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRegisterGroup.group_id)
  return group_id_;
}
inline void RspRegisterGroup::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspRegisterGroup.group_id)
}

// -------------------------------------------------------------------

// ReqRemoveGroup

// int32 group_id = 1;
inline void ReqRemoveGroup::clear_group_id() {
  group_id_ = 0;
}
inline ::google::protobuf::int32 ReqRemoveGroup::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRemoveGroup.group_id)
  return group_id_;
}
inline void ReqRemoveGroup::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRemoveGroup.group_id)
}

// -------------------------------------------------------------------

// RspRemoveGroup

// bool result = 1;
inline void RspRemoveGroup::clear_result() {
  result_ = false;
}
inline bool RspRemoveGroup::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRemoveGroup.result)
  return result_;
}
inline void RspRemoveGroup::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspRemoveGroup.result)
}

// -------------------------------------------------------------------

// ReqFindGroup

// int32 group_id = 1;
inline void ReqFindGroup::clear_group_id() {
  group_id_ = 0;
}
inline ::google::protobuf::int32 ReqFindGroup::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqFindGroup.group_id)
  return group_id_;
}
inline void ReqFindGroup::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqFindGroup.group_id)
}

// string group_name = 2;
inline void ReqFindGroup::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqFindGroup::group_name() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqFindGroup.group_name)
  return group_name_.GetNoArena();
}
inline void ReqFindGroup::set_group_name(const ::std::string& value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqFindGroup.group_name)
}
#if LANG_CXX11
inline void ReqFindGroup::set_group_name(::std::string&& value) {
  
  group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqFindGroup.group_name)
}
#endif
inline void ReqFindGroup::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqFindGroup.group_name)
}
inline void ReqFindGroup::set_group_name(const char* value, size_t size) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqFindGroup.group_name)
}
inline ::std::string* ReqFindGroup::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqFindGroup.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqFindGroup::release_group_name() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqFindGroup.group_name)
  
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqFindGroup::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqFindGroup.group_name)
}

// -------------------------------------------------------------------

// RspFindGroup

// int32 result = 1;
inline void RspFindGroup::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspFindGroup::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspFindGroup.result)
  return result_;
}
inline void RspFindGroup::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspFindGroup.result)
}

// .spaceless.protocol.SharingGroup group = 2;
inline bool RspFindGroup::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
inline void RspFindGroup::clear_group() {
  if (GetArenaNoVirtual() == NULL && group_ != NULL) {
    delete group_;
  }
  group_ = NULL;
}
inline const ::spaceless::protocol::SharingGroup& RspFindGroup::_internal_group() const {
  return *group_;
}
inline const ::spaceless::protocol::SharingGroup& RspFindGroup::group() const {
  const ::spaceless::protocol::SharingGroup* p = group_;
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspFindGroup.group)
  return p != NULL ? *p : *reinterpret_cast<const ::spaceless::protocol::SharingGroup*>(
      &::spaceless::protocol::_SharingGroup_default_instance_);
}
inline ::spaceless::protocol::SharingGroup* RspFindGroup::release_group() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.RspFindGroup.group)
  
  ::spaceless::protocol::SharingGroup* temp = group_;
  group_ = NULL;
  return temp;
}
inline ::spaceless::protocol::SharingGroup* RspFindGroup::mutable_group() {
  
  if (group_ == NULL) {
    auto* p = CreateMaybeMessage<::spaceless::protocol::SharingGroup>(GetArenaNoVirtual());
    group_ = p;
  }
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.RspFindGroup.group)
  return group_;
}
inline void RspFindGroup::set_allocated_group(::spaceless::protocol::SharingGroup* group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete group_;
  }
  if (group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.RspFindGroup.group)
}

// -------------------------------------------------------------------

// ReqJoinGroup

// int32 group_id = 1;
inline void ReqJoinGroup::clear_group_id() {
  group_id_ = 0;
}
inline ::google::protobuf::int32 ReqJoinGroup::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqJoinGroup.group_id)
  return group_id_;
}
inline void ReqJoinGroup::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqJoinGroup.group_id)
}

// -------------------------------------------------------------------

// RspJoinGroup

// int32 result = 1;
inline void RspJoinGroup::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspJoinGroup::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspJoinGroup.result)
  return result_;
}
inline void RspJoinGroup::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspJoinGroup.result)
}

// -------------------------------------------------------------------

// ReqAssignAsManager

// int32 group_id = 1;
inline void ReqAssignAsManager::clear_group_id() {
  group_id_ = 0;
}
inline ::google::protobuf::int32 ReqAssignAsManager::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqAssignAsManager.group_id)
  return group_id_;
}
inline void ReqAssignAsManager::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqAssignAsManager.group_id)
}

// int32 user_id = 2;
inline void ReqAssignAsManager::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 ReqAssignAsManager::user_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqAssignAsManager.user_id)
  return user_id_;
}
inline void ReqAssignAsManager::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqAssignAsManager.user_id)
}

// -------------------------------------------------------------------

// RspAssignAsManager

// int32 result = 1;
inline void RspAssignAsManager::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspAssignAsManager::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspAssignAsManager.result)
  return result_;
}
inline void RspAssignAsManager::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspAssignAsManager.result)
}

// -------------------------------------------------------------------

// ReqAssignAsMember

// int32 group_id = 1;
inline void ReqAssignAsMember::clear_group_id() {
  group_id_ = 0;
}
inline ::google::protobuf::int32 ReqAssignAsMember::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqAssignAsMember.group_id)
  return group_id_;
}
inline void ReqAssignAsMember::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqAssignAsMember.group_id)
}

// int32 user_id = 2;
inline void ReqAssignAsMember::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 ReqAssignAsMember::user_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqAssignAsMember.user_id)
  return user_id_;
}
inline void ReqAssignAsMember::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqAssignAsMember.user_id)
}

// -------------------------------------------------------------------

// RspAssignAsMember

// int32 result = 1;
inline void RspAssignAsMember::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspAssignAsMember::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspAssignAsMember.result)
  return result_;
}
inline void RspAssignAsMember::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspAssignAsMember.result)
}

// -------------------------------------------------------------------

// ReqKickOutUser

// int32 group_id = 1;
inline void ReqKickOutUser::clear_group_id() {
  group_id_ = 0;
}
inline ::google::protobuf::int32 ReqKickOutUser::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqKickOutUser.group_id)
  return group_id_;
}
inline void ReqKickOutUser::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqKickOutUser.group_id)
}

// int32 user_id = 2;
inline void ReqKickOutUser::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 ReqKickOutUser::user_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqKickOutUser.user_id)
  return user_id_;
}
inline void ReqKickOutUser::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqKickOutUser.user_id)
}

// -------------------------------------------------------------------

// RspKickOutUser

// int32 result = 1;
inline void RspKickOutUser::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspKickOutUser::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspKickOutUser.result)
  return result_;
}
inline void RspKickOutUser::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspKickOutUser.result)
}

// -------------------------------------------------------------------

// ReqPutFileSession

// int32 group_id = 1;
inline void ReqPutFileSession::clear_group_id() {
  group_id_ = 0;
}
inline ::google::protobuf::int32 ReqPutFileSession::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqPutFileSession.group_id)
  return group_id_;
}
inline void ReqPutFileSession::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqPutFileSession.group_id)
}

// string file_path = 2;
inline void ReqPutFileSession::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqPutFileSession::file_path() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqPutFileSession.file_path)
  return file_path_.GetNoArena();
}
inline void ReqPutFileSession::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqPutFileSession.file_path)
}
#if LANG_CXX11
inline void ReqPutFileSession::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqPutFileSession.file_path)
}
#endif
inline void ReqPutFileSession::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqPutFileSession.file_path)
}
inline void ReqPutFileSession::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqPutFileSession.file_path)
}
inline ::std::string* ReqPutFileSession::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqPutFileSession.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqPutFileSession::release_file_path() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqPutFileSession.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPutFileSession::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqPutFileSession.file_path)
}

// int32 max_fragment = 3;
inline void ReqPutFileSession::clear_max_fragment() {
  max_fragment_ = 0;
}
inline ::google::protobuf::int32 ReqPutFileSession::max_fragment() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqPutFileSession.max_fragment)
  return max_fragment_;
}
inline void ReqPutFileSession::set_max_fragment(::google::protobuf::int32 value) {
  
  max_fragment_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqPutFileSession.max_fragment)
}

// -------------------------------------------------------------------

// RspPutFileSession

// int32 result = 1;
inline void RspPutFileSession::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspPutFileSession::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspPutFileSession.result)
  return result_;
}
inline void RspPutFileSession::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspPutFileSession.result)
}

// int32 session_id = 2;
inline void RspPutFileSession::clear_session_id() {
  session_id_ = 0;
}
inline ::google::protobuf::int32 RspPutFileSession::session_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspPutFileSession.session_id)
  return session_id_;
}
inline void RspPutFileSession::set_session_id(::google::protobuf::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspPutFileSession.session_id)
}

// int32 next_fragment = 3;
inline void RspPutFileSession::clear_next_fragment() {
  next_fragment_ = 0;
}
inline ::google::protobuf::int32 RspPutFileSession::next_fragment() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspPutFileSession.next_fragment)
  return next_fragment_;
}
inline void RspPutFileSession::set_next_fragment(::google::protobuf::int32 value) {
  
  next_fragment_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspPutFileSession.next_fragment)
}

// -------------------------------------------------------------------

// ReqNodePutFileSession

// string file_path = 2;
inline void ReqNodePutFileSession::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqNodePutFileSession::file_path() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqNodePutFileSession.file_path)
  return file_path_.GetNoArena();
}
inline void ReqNodePutFileSession::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqNodePutFileSession.file_path)
}
#if LANG_CXX11
inline void ReqNodePutFileSession::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqNodePutFileSession.file_path)
}
#endif
inline void ReqNodePutFileSession::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqNodePutFileSession.file_path)
}
inline void ReqNodePutFileSession::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqNodePutFileSession.file_path)
}
inline ::std::string* ReqNodePutFileSession::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqNodePutFileSession.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqNodePutFileSession::release_file_path() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqNodePutFileSession.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqNodePutFileSession::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqNodePutFileSession.file_path)
}

// int32 max_fragment = 3;
inline void ReqNodePutFileSession::clear_max_fragment() {
  max_fragment_ = 0;
}
inline ::google::protobuf::int32 ReqNodePutFileSession::max_fragment() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqNodePutFileSession.max_fragment)
  return max_fragment_;
}
inline void ReqNodePutFileSession::set_max_fragment(::google::protobuf::int32 value) {
  
  max_fragment_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqNodePutFileSession.max_fragment)
}

// -------------------------------------------------------------------

// RspNodePutFileSession

// int32 result = 1;
inline void RspNodePutFileSession::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspNodePutFileSession::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspNodePutFileSession.result)
  return result_;
}
inline void RspNodePutFileSession::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspNodePutFileSession.result)
}

// int32 session_id = 2;
inline void RspNodePutFileSession::clear_session_id() {
  session_id_ = 0;
}
inline ::google::protobuf::int32 RspNodePutFileSession::session_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspNodePutFileSession.session_id)
  return session_id_;
}
inline void RspNodePutFileSession::set_session_id(::google::protobuf::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspNodePutFileSession.session_id)
}

// -------------------------------------------------------------------

// ReqPutFile

// int32 session_id = 1;
inline void ReqPutFile::clear_session_id() {
  session_id_ = 0;
}
inline ::google::protobuf::int32 ReqPutFile::session_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqPutFile.session_id)
  return session_id_;
}
inline void ReqPutFile::set_session_id(::google::protobuf::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqPutFile.session_id)
}

// int32 fragment_index = 2;
inline void ReqPutFile::clear_fragment_index() {
  fragment_index_ = 0;
}
inline ::google::protobuf::int32 ReqPutFile::fragment_index() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqPutFile.fragment_index)
  return fragment_index_;
}
inline void ReqPutFile::set_fragment_index(::google::protobuf::int32 value) {
  
  fragment_index_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqPutFile.fragment_index)
}

// bytes fragment_content = 3;
inline void ReqPutFile::clear_fragment_content() {
  fragment_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqPutFile::fragment_content() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqPutFile.fragment_content)
  return fragment_content_.GetNoArena();
}
inline void ReqPutFile::set_fragment_content(const ::std::string& value) {
  
  fragment_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqPutFile.fragment_content)
}
#if LANG_CXX11
inline void ReqPutFile::set_fragment_content(::std::string&& value) {
  
  fragment_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqPutFile.fragment_content)
}
#endif
inline void ReqPutFile::set_fragment_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fragment_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqPutFile.fragment_content)
}
inline void ReqPutFile::set_fragment_content(const void* value, size_t size) {
  
  fragment_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqPutFile.fragment_content)
}
inline ::std::string* ReqPutFile::mutable_fragment_content() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqPutFile.fragment_content)
  return fragment_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqPutFile::release_fragment_content() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqPutFile.fragment_content)
  
  return fragment_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPutFile::set_allocated_fragment_content(::std::string* fragment_content) {
  if (fragment_content != NULL) {
    
  } else {
    
  }
  fragment_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fragment_content);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqPutFile.fragment_content)
}

// -------------------------------------------------------------------

// RspPutFile

// int32 result = 1;
inline void RspPutFile::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspPutFile::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspPutFile.result)
  return result_;
}
inline void RspPutFile::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspPutFile.result)
}

// int32 session_id = 2;
inline void RspPutFile::clear_session_id() {
  session_id_ = 0;
}
inline ::google::protobuf::int32 RspPutFile::session_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspPutFile.session_id)
  return session_id_;
}
inline void RspPutFile::set_session_id(::google::protobuf::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspPutFile.session_id)
}

// int32 fragment_index = 3;
inline void RspPutFile::clear_fragment_index() {
  fragment_index_ = 0;
}
inline ::google::protobuf::int32 RspPutFile::fragment_index() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspPutFile.fragment_index)
  return fragment_index_;
}
inline void RspPutFile::set_fragment_index(::google::protobuf::int32 value) {
  
  fragment_index_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspPutFile.fragment_index)
}

// -------------------------------------------------------------------

// ReqGetFileSession

// int32 group_id = 1;
inline void ReqGetFileSession::clear_group_id() {
  group_id_ = 0;
}
inline ::google::protobuf::int32 ReqGetFileSession::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqGetFileSession.group_id)
  return group_id_;
}
inline void ReqGetFileSession::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqGetFileSession.group_id)
}

// string file_path = 2;
inline void ReqGetFileSession::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqGetFileSession::file_path() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqGetFileSession.file_path)
  return file_path_.GetNoArena();
}
inline void ReqGetFileSession::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqGetFileSession.file_path)
}
#if LANG_CXX11
inline void ReqGetFileSession::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqGetFileSession.file_path)
}
#endif
inline void ReqGetFileSession::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqGetFileSession.file_path)
}
inline void ReqGetFileSession::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqGetFileSession.file_path)
}
inline ::std::string* ReqGetFileSession::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqGetFileSession.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqGetFileSession::release_file_path() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqGetFileSession.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqGetFileSession::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqGetFileSession.file_path)
}

// -------------------------------------------------------------------

// RspGetFileSession

// int32 result = 1;
inline void RspGetFileSession::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspGetFileSession::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspGetFileSession.result)
  return result_;
}
inline void RspGetFileSession::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspGetFileSession.result)
}

// int32 session_id = 2;
inline void RspGetFileSession::clear_session_id() {
  session_id_ = 0;
}
inline ::google::protobuf::int32 RspGetFileSession::session_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspGetFileSession.session_id)
  return session_id_;
}
inline void RspGetFileSession::set_session_id(::google::protobuf::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspGetFileSession.session_id)
}

// int32 max_fragment = 3;
inline void RspGetFileSession::clear_max_fragment() {
  max_fragment_ = 0;
}
inline ::google::protobuf::int32 RspGetFileSession::max_fragment() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspGetFileSession.max_fragment)
  return max_fragment_;
}
inline void RspGetFileSession::set_max_fragment(::google::protobuf::int32 value) {
  
  max_fragment_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspGetFileSession.max_fragment)
}

// -------------------------------------------------------------------

// ReqNodeGetFileSession

// string file_path = 2;
inline void ReqNodeGetFileSession::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqNodeGetFileSession::file_path() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqNodeGetFileSession.file_path)
  return file_path_.GetNoArena();
}
inline void ReqNodeGetFileSession::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqNodeGetFileSession.file_path)
}
#if LANG_CXX11
inline void ReqNodeGetFileSession::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqNodeGetFileSession.file_path)
}
#endif
inline void ReqNodeGetFileSession::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqNodeGetFileSession.file_path)
}
inline void ReqNodeGetFileSession::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqNodeGetFileSession.file_path)
}
inline ::std::string* ReqNodeGetFileSession::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqNodeGetFileSession.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqNodeGetFileSession::release_file_path() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqNodeGetFileSession.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqNodeGetFileSession::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqNodeGetFileSession.file_path)
}

// -------------------------------------------------------------------

// RspNodeGetFileSession

// int32 result = 1;
inline void RspNodeGetFileSession::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspNodeGetFileSession::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspNodeGetFileSession.result)
  return result_;
}
inline void RspNodeGetFileSession::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspNodeGetFileSession.result)
}

// int32 session_id = 2;
inline void RspNodeGetFileSession::clear_session_id() {
  session_id_ = 0;
}
inline ::google::protobuf::int32 RspNodeGetFileSession::session_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspNodeGetFileSession.session_id)
  return session_id_;
}
inline void RspNodeGetFileSession::set_session_id(::google::protobuf::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspNodeGetFileSession.session_id)
}

// int32 max_fragment = 3;
inline void RspNodeGetFileSession::clear_max_fragment() {
  max_fragment_ = 0;
}
inline ::google::protobuf::int32 RspNodeGetFileSession::max_fragment() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspNodeGetFileSession.max_fragment)
  return max_fragment_;
}
inline void RspNodeGetFileSession::set_max_fragment(::google::protobuf::int32 value) {
  
  max_fragment_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspNodeGetFileSession.max_fragment)
}

// -------------------------------------------------------------------

// ReqGetFile

// int32 session_id = 1;
inline void ReqGetFile::clear_session_id() {
  session_id_ = 0;
}
inline ::google::protobuf::int32 ReqGetFile::session_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqGetFile.session_id)
  return session_id_;
}
inline void ReqGetFile::set_session_id(::google::protobuf::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqGetFile.session_id)
}

// int32 fragment_index = 2;
inline void ReqGetFile::clear_fragment_index() {
  fragment_index_ = 0;
}
inline ::google::protobuf::int32 ReqGetFile::fragment_index() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqGetFile.fragment_index)
  return fragment_index_;
}
inline void ReqGetFile::set_fragment_index(::google::protobuf::int32 value) {
  
  fragment_index_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqGetFile.fragment_index)
}

// -------------------------------------------------------------------

// RspGetFile

// int32 result = 1;
inline void RspGetFile::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspGetFile::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspGetFile.result)
  return result_;
}
inline void RspGetFile::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspGetFile.result)
}

// int32 session_id = 2;
inline void RspGetFile::clear_session_id() {
  session_id_ = 0;
}
inline ::google::protobuf::int32 RspGetFile::session_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspGetFile.session_id)
  return session_id_;
}
inline void RspGetFile::set_session_id(::google::protobuf::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspGetFile.session_id)
}

// int32 fragment_index = 3;
inline void RspGetFile::clear_fragment_index() {
  fragment_index_ = 0;
}
inline ::google::protobuf::int32 RspGetFile::fragment_index() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspGetFile.fragment_index)
  return fragment_index_;
}
inline void RspGetFile::set_fragment_index(::google::protobuf::int32 value) {
  
  fragment_index_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspGetFile.fragment_index)
}

// bytes fragment_content = 4;
inline void RspGetFile::clear_fragment_content() {
  fragment_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspGetFile::fragment_content() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspGetFile.fragment_content)
  return fragment_content_.GetNoArena();
}
inline void RspGetFile::set_fragment_content(const ::std::string& value) {
  
  fragment_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspGetFile.fragment_content)
}
#if LANG_CXX11
inline void RspGetFile::set_fragment_content(::std::string&& value) {
  
  fragment_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.RspGetFile.fragment_content)
}
#endif
inline void RspGetFile::set_fragment_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fragment_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.RspGetFile.fragment_content)
}
inline void RspGetFile::set_fragment_content(const void* value, size_t size) {
  
  fragment_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.RspGetFile.fragment_content)
}
inline ::std::string* RspGetFile::mutable_fragment_content() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.RspGetFile.fragment_content)
  return fragment_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspGetFile::release_fragment_content() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.RspGetFile.fragment_content)
  
  return fragment_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspGetFile::set_allocated_fragment_content(::std::string* fragment_content) {
  if (fragment_content != NULL) {
    
  } else {
    
  }
  fragment_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fragment_content);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.RspGetFile.fragment_content)
}

// -------------------------------------------------------------------

// ReqCreatePath

// int32 group_id = 1;
inline void ReqCreatePath::clear_group_id() {
  group_id_ = 0;
}
inline ::google::protobuf::int32 ReqCreatePath::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqCreatePath.group_id)
  return group_id_;
}
inline void ReqCreatePath::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqCreatePath.group_id)
}

// string path = 2;
inline void ReqCreatePath::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqCreatePath::path() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqCreatePath.path)
  return path_.GetNoArena();
}
inline void ReqCreatePath::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqCreatePath.path)
}
#if LANG_CXX11
inline void ReqCreatePath::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqCreatePath.path)
}
#endif
inline void ReqCreatePath::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqCreatePath.path)
}
inline void ReqCreatePath::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqCreatePath.path)
}
inline ::std::string* ReqCreatePath::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqCreatePath.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqCreatePath::release_path() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqCreatePath.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCreatePath::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqCreatePath.path)
}

// -------------------------------------------------------------------

// RspCreatePath

// int32 result = 1;
inline void RspCreatePath::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspCreatePath::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspCreatePath.result)
  return result_;
}
inline void RspCreatePath::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspCreatePath.result)
}

// -------------------------------------------------------------------

// ReqRemovePath

// int32 group_id = 1;
inline void ReqRemovePath::clear_group_id() {
  group_id_ = 0;
}
inline ::google::protobuf::int32 ReqRemovePath::group_id() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRemovePath.group_id)
  return group_id_;
}
inline void ReqRemovePath::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRemovePath.group_id)
}

// string path = 2;
inline void ReqRemovePath::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqRemovePath::path() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRemovePath.path)
  return path_.GetNoArena();
}
inline void ReqRemovePath::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRemovePath.path)
}
#if LANG_CXX11
inline void ReqRemovePath::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceless.protocol.ReqRemovePath.path)
}
#endif
inline void ReqRemovePath::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceless.protocol.ReqRemovePath.path)
}
inline void ReqRemovePath::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceless.protocol.ReqRemovePath.path)
}
inline ::std::string* ReqRemovePath::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:spaceless.protocol.ReqRemovePath.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqRemovePath::release_path() {
  // @@protoc_insertion_point(field_release:spaceless.protocol.ReqRemovePath.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRemovePath::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:spaceless.protocol.ReqRemovePath.path)
}

// bool force_remove_all = 3;
inline void ReqRemovePath::clear_force_remove_all() {
  force_remove_all_ = false;
}
inline bool ReqRemovePath::force_remove_all() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.ReqRemovePath.force_remove_all)
  return force_remove_all_;
}
inline void ReqRemovePath::set_force_remove_all(bool value) {
  
  force_remove_all_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.ReqRemovePath.force_remove_all)
}

// -------------------------------------------------------------------

// RspRemovePath

// int32 result = 1;
inline void RspRemovePath::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RspRemovePath::result() const {
  // @@protoc_insertion_point(field_get:spaceless.protocol.RspRemovePath.result)
  return result_;
}
inline void RspRemovePath::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:spaceless.protocol.RspRemovePath.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace spaceless

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::spaceless::protocol::MiscellaneousType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spaceless::protocol::MiscellaneousType>() {
  return ::spaceless::protocol::MiscellaneousType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protocol_2eproto
