/**
 * basics.h
 * @author wherewindblow
 * @date   Nov 15, 2017
 */

#pragma once

#include <cstdint>


/**
 * Generate instance method of class.
 */
#define SPACELESS_SINGLETON_INSTANCE(class_name) \
static class_name* instance() \
{ \
	static class_name inst; \
	return &inst; \
}

namespace spaceless {

const int INVALID_ID = 0;
const int PACKAGE_VERSION = 2;
const int REACTOR_TIMEOUT_MS = 5;
const int REACTOR_MAX_MSG_PER_TIMES = 10;
const int WORKER_IDLE_SLEEP_MS = 2;
const int WORKER_LONG_IDLE_TIMES = 5;
const int WORKER_LONG_IDLE_SLEEP_MS = 10;
const int SCHEDULER_WAITING_STOP_PERIOD_MS = 100;
const int MONITOR_STATE_PER_SEC = 5;

extern const char* WORKER_THREAD_NAME;

enum
{
	ERR_SUCCESS = 0,
	ERR_NETWORK_PACKAGE_ALREADY_EXIST = 100,
	ERR_NETWORK_PACKAGE_CANNOT_PARSE_TO_PROTOCOL = 101,
	ERR_NETWORK_PACKAGE_NOT_EXIST = 102,
	ERR_NETWORK_CONNECTION_NOT_EXIST = 105,
	ERR_NETWORK_SERVICE_ALREADY_EXIST = 110,
	ERR_NETWORK_SERVICE_NOT_EXIST = 111,
	ERR_PROTOCOL_COMMAND_NOT_EXIST = 115,
	ERR_PROTOCOL_NAME_NOT_EXIST = 116,
	ERR_TRANSACTION_ALREADY_EXIST = 120,
	ERR_MULTIPLY_PHASE_TRANSACTION_ALREADY_EXIST = 121,
	ERR_BOUND_TRANSACTION_ALREADY_EXIST = 122,
	ERR_TRANSACTION_TIMEOUT = 123,
	ERR_MONITOR_MANAGER_ALREADY_EXIST = 125,
	ERR_EVENT_ALREADY_EXIST = 140,
	ERR_CRYPTO_CIPHER_SPACE_NOT_ENOUGH = 200,
	ERR_CRYPTO_PLAIN_SPACE_NOT_ENOUGH = 201,
	ERR_CRYPTO_INCOMPLETE_DATA = 202,
	ERR_CRYPTO_CANNOT_OPEN_FILE = 203,
};

enum class BuildInCommand
{
	NTF_INVALID_VERSION = 1,
	NTF_SECURITY_SETTING = 2,
	REQ_START_CRYPTO = 3,
	RSP_START_CRYPTO = 4,
	MAX = 1000,
};

enum class SecuritySetting: std::uint8_t
{
	CLOSE_SECURITY = 1,
	OPEN_SECURITY = 2,
};

enum class ErrorCategory
{
	INVALID = 0,
	LIGHTS = 1,
	SPACELESS = 2,
};

} // namespace spaceless

